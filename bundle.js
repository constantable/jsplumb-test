(() => {
  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/_virtual/_rollupPluginBabelHelpers.js
  function e(t61) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      e = function(e78) {
        return typeof e78;
      };
    } else {
      e = function(e78) {
        return e78 && typeof Symbol === "function" && e78.constructor === Symbol && e78 !== Symbol.prototype ? "symbol" : typeof e78;
      };
    }
    return e(t61);
  }
  function t(e78, t61) {
    if (!(e78 instanceof t61)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function r(e78, t61) {
    for (var r53 = 0; r53 < t61.length; r53++) {
      var n91 = t61[r53];
      n91.enumerable = n91.enumerable || false;
      n91.configurable = true;
      if ("value" in n91)
        n91.writable = true;
      Object.defineProperty(e78, n91.key, n91);
    }
  }
  function n(e78, t61, n91) {
    if (t61)
      r(e78.prototype, t61);
    if (n91)
      r(e78, n91);
    return e78;
  }
  function o(e78, t61, r53) {
    if (t61 in e78) {
      Object.defineProperty(e78, t61, { value: r53, enumerable: true, configurable: true, writable: true });
    } else {
      e78[t61] = r53;
    }
    return e78;
  }
  function a(e78, t61) {
    if (typeof t61 !== "function" && t61 !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    e78.prototype = Object.create(t61 && t61.prototype, { constructor: { value: e78, writable: true, configurable: true } });
    if (t61)
      i(e78, t61);
  }
  function u(e78) {
    u = Object.setPrototypeOf ? Object.getPrototypeOf : function e79(t61) {
      return t61.__proto__ || Object.getPrototypeOf(t61);
    };
    return u(e78);
  }
  function i(e78, t61) {
    i = Object.setPrototypeOf || function e79(t62, r53) {
      t62.__proto__ = r53;
      return t62;
    };
    return i(e78, t61);
  }
  function f() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e78) {
      return false;
    }
  }
  function l(e78) {
    if (e78 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return e78;
  }
  function c(e78, t61) {
    if (t61 && (typeof t61 === "object" || typeof t61 === "function")) {
      return t61;
    } else if (t61 !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return l(e78);
  }
  function s(e78) {
    var t61 = f();
    return function r53() {
      var n91 = u(e78), o42;
      if (t61) {
        var a48 = u(this).constructor;
        o42 = Reflect.construct(n91, arguments, a48);
      } else {
        o42 = n91.apply(this, arguments);
      }
      return c(this, o42);
    };
  }
  function y(e78, t61) {
    while (!Object.prototype.hasOwnProperty.call(e78, t61)) {
      e78 = u(e78);
      if (e78 === null)
        break;
    }
    return e78;
  }
  function p(e78, t61, r53) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      p = Reflect.get;
    } else {
      p = function e79(t62, r54, n91) {
        var o42 = y(t62, r54);
        if (!o42)
          return;
        var a48 = Object.getOwnPropertyDescriptor(o42, r54);
        if (a48.get) {
          return a48.get.call(n91);
        }
        return a48.value;
      };
    }
    return p(e78, t61, r53 || e78);
  }
  function b(e78, t61) {
    return m(e78) || w(e78, t61) || O(e78, t61) || j();
  }
  function h(e78) {
    return d(e78) || v(e78) || O(e78) || S();
  }
  function d(e78) {
    if (Array.isArray(e78))
      return g(e78);
  }
  function m(e78) {
    if (Array.isArray(e78))
      return e78;
  }
  function v(e78) {
    if (typeof Symbol !== "undefined" && e78[Symbol.iterator] != null || e78["@@iterator"] != null)
      return Array.from(e78);
  }
  function w(e78, t61) {
    var r53 = e78 == null ? null : typeof Symbol !== "undefined" && e78[Symbol.iterator] || e78["@@iterator"];
    if (r53 == null)
      return;
    var n91 = [];
    var o42 = true;
    var a48 = false;
    var u52, i45;
    try {
      for (r53 = r53.call(e78); !(o42 = (u52 = r53.next()).done); o42 = true) {
        n91.push(u52.value);
        if (t61 && n91.length === t61)
          break;
      }
    } catch (e79) {
      a48 = true;
      i45 = e79;
    } finally {
      try {
        if (!o42 && r53["return"] != null)
          r53["return"]();
      } finally {
        if (a48)
          throw i45;
      }
    }
    return n91;
  }
  function O(e78, t61) {
    if (!e78)
      return;
    if (typeof e78 === "string")
      return g(e78, t61);
    var r53 = Object.prototype.toString.call(e78).slice(8, -1);
    if (r53 === "Object" && e78.constructor)
      r53 = e78.constructor.name;
    if (r53 === "Map" || r53 === "Set")
      return Array.from(e78);
    if (r53 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r53))
      return g(e78, t61);
  }
  function g(e78, t61) {
    if (t61 == null || t61 > e78.length)
      t61 = e78.length;
    for (var r53 = 0, n91 = new Array(t61); r53 < t61; r53++)
      n91[r53] = e78[r53];
    return n91;
  }
  function S() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function j() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/util/util.js
  function e2(n91, r53, t61) {
    if (n91 === "*") {
      return true;
    }
    return n91.length > 0 ? n91.indexOf(r53) !== -1 : !t61;
  }
  function u2(n91, r53, t61) {
    var e78;
    n91 = n91 || {};
    r53 = r53 || {};
    var u52 = n91, i45 = r53;
    if (t61) {
      for (e78 = 0; e78 < t61.length; e78++) {
        u52[t61[e78]] = i45[t61[e78]];
      }
    } else {
      for (e78 in i45) {
        u52[e78] = i45[e78];
      }
    }
    return n91;
  }
  function i2(n91) {
    return Object.prototype.toString.call(n91) === "[object Number]";
  }
  function l2(n91) {
    return typeof n91 === "string";
  }
  function f2(n91) {
    return typeof n91 === "boolean";
  }
  function a2(n91) {
    return n91 == null ? false : Object.prototype.toString.call(n91) === "[object Object]";
  }
  function o2(n91) {
    return n91 == null ? false : Object.prototype.toString.call(n91).match(/\[object .*Element]/) != null;
  }
  function s2(n91) {
    return n91 == null ? false : Object.prototype.toString.call(n91) === "[object Text]";
  }
  function c2(n91) {
    return Object.prototype.toString.call(n91) === "[object Date]";
  }
  function h2(n91) {
    return Object.prototype.toString.call(n91) === "[object Function]";
  }
  function v2(n91) {
    for (var r53 in n91) {
      if (n91.hasOwnProperty(r53)) {
        return false;
      }
    }
    return true;
  }
  function x(n91) {
    if (l2(n91)) {
      return "" + n91;
    } else if (f2(n91)) {
      return !!n91;
    } else if (c2(n91)) {
      return new Date(n91.getTime());
    } else if (h2(n91)) {
      return n91;
    } else if (Array.isArray(n91)) {
      var r53 = [];
      for (var t61 = 0; t61 < n91.length; t61++) {
        r53.push(x(n91[t61]));
      }
      return r53;
    } else if (o2(n91) || s2(n91)) {
      return n91;
    } else if (a2(n91)) {
      var e78 = {};
      for (var u52 in n91) {
        e78[u52] = x(n91[u52]);
      }
      return e78;
    } else {
      return n91;
    }
  }
  function p2(n91) {
    var r53 = {};
    for (var t61 in n91) {
      if (n91[t61] != null) {
        r53[t61] = n91[t61];
      }
    }
    return r53;
  }
  function m2(n91, r53, t61, e78) {
    var u52 = {}, o42, s40, c47 = {};
    t61 = t61 || [];
    e78 = e78 || [];
    for (s40 = 0; s40 < t61.length; s40++) {
      u52[t61[s40]] = true;
    }
    for (s40 = 0; s40 < e78.length; s40++) {
      c47[e78[s40]] = true;
    }
    var y34 = x(n91);
    for (s40 in r53) {
      if (y34[s40] == null || c47[s40]) {
        y34[s40] = r53[s40];
      } else if (u52[s40]) {
        o42 = [];
        o42.push.apply(o42, Array.isArray(y34[s40]) ? y34[s40] : [y34[s40]]);
        o42.push(r53[s40]);
        y34[s40] = o42;
      } else if (l2(r53[s40]) || f2(r53[s40]) || h2(r53[s40]) || i2(r53[s40])) {
        y34[s40] = r53[s40];
      } else {
        if (Array.isArray(r53[s40])) {
          o42 = [];
          if (Array.isArray(y34[s40])) {
            o42.push.apply(o42, y34[s40]);
          }
          o42.push.apply(o42, r53[s40]);
          y34[s40] = o42;
        } else if (a2(r53[s40])) {
          if (!a2(y34[s40])) {
            y34[s40] = {};
          }
          for (var v41 in r53[s40]) {
            y34[s40][v41] = r53[s40][v41];
          }
        }
      }
    }
    return y34;
  }
  function g2(n91, r53) {
    if (n91 != null && r53 == null) {
      return false;
    } else {
      if ((n91 == null || l2(n91) || f2(n91) || i2(n91)) && n91 !== r53) {
        return false;
      } else {
        if (Array.isArray(n91)) {
          if (!Array.isArray(r53)) {
            return false;
          } else {
            if (!d2(n91, r53)) {
              return false;
            }
          }
        } else if (a2(n91)) {
          if (!a2(n91)) {
            return false;
          } else {
            if (!A(n91, r53)) {
              return false;
            }
          }
        }
      }
    }
    return true;
  }
  function d2(n91, r53) {
    if (n91 == null && r53 == null) {
      return true;
    } else if (n91 == null && r53 != null) {
      return false;
    } else if (n91 != null && r53 == null) {
      return false;
    }
    if (n91.length !== r53.length) {
      return false;
    } else {
      for (var t61 = 0; t61 < n91.length; t61++) {
        if (!g2(n91[t61], r53[t61])) {
          return false;
        }
      }
    }
    return true;
  }
  function A(n91, r53) {
    if (n91 == null && r53 == null) {
      return true;
    } else if (n91 == null && r53 != null) {
      return false;
    } else if (n91 != null && r53 == null) {
      return false;
    }
    for (var t61 in n91) {
      var e78 = n91[t61], u52 = r53[t61];
      if (!g2(e78, u52)) {
        return false;
      }
    }
    return true;
  }
  function b2(n91, r53, t61) {
    if (n91 == null) {
      return;
    }
    var e78 = n91, u52 = e78;
    r53.replace(/([^\.])+/g, function(n92, r54, e79, i45) {
      var l48 = n92.match(/([^\[0-9]+){1}(\[)([0-9+])/), f45 = e79 + n92.length >= i45.length, a48 = function n93() {
        return u52[l48[1]] || function() {
          u52[l48[1]] = [];
          return u52[l48[1]];
        }();
      };
      if (f45) {
        if (l48) {
          a48()[l48[3]] = t61;
        } else {
          u52[n92] = t61;
        }
      } else {
        if (l48) {
          var o42 = a48();
          u52 = o42[l48[3]] || function() {
            o42[l48[3]] = {};
            return o42[l48[3]];
          }();
        } else {
          u52 = u52[n92] || function() {
            u52[n92] = {};
            return u52[n92];
          }();
        }
      }
      return "";
    });
    return n91;
  }
  function M(n91, r53, t61, e78) {
    var u52 = function n92(t62) {
      var e79 = t62.match(/(\${.*?})/g);
      if (e79 != null) {
        for (var u53 = 0; u53 < e79.length; u53++) {
          var i46 = r53[e79[u53].substring(2, e79[u53].length - 1)] || "";
          if (i46 != null) {
            t62 = t62.replace(e79[u53], i46);
          }
        }
      }
      e79 = t62.match(/({{.*?}})/g);
      if (e79 != null) {
        for (var l48 = 0; l48 < e79.length; l48++) {
          var f45 = r53[e79[l48].substring(2, e79[l48].length - 2)] || "";
          if (f45 != null) {
            t62 = t62.replace(e79[l48], f45);
          }
        }
      }
      return t62;
    };
    var i45 = function n92(i46) {
      if (i46 != null) {
        if (l2(i46)) {
          return u52(i46);
        } else if (h2(i46) && !e78 && (t61 == null || (i46.name || "").indexOf(t61) === 0)) {
          return i46(r53);
        } else if (Array.isArray(i46)) {
          var f45 = [];
          for (var o42 = 0; o42 < i46.length; o42++) {
            f45.push(n92(i46[o42]));
          }
          return f45;
        } else if (a2(i46)) {
          var s40 = {};
          for (var c47 in i46) {
            s40[c47] = n92(i46[c47]);
          }
          return s40;
        } else {
          return i46;
        }
      }
    };
    return i45(n91);
  }
  function j2(n91, r53) {
    if (n91) {
      for (var t61 = 0; t61 < n91.length; t61++) {
        r53(n91[t61]);
      }
    } else {
      return null;
    }
  }
  function O2(n91, r53) {
    if (n91) {
      for (var t61 = 0; t61 < n91.length; t61++) {
        if (r53(n91[t61])) {
          return t61;
        }
      }
    }
    return -1;
  }
  function w2(n91, r53) {
    var t61 = [];
    if (n91) {
      for (var e78 = 0; e78 < n91.length; e78++) {
        if (r53(n91[e78])) {
          t61.push(e78);
        }
      }
    }
    return t61;
  }
  function S2(n91, r53) {
    var t61 = O2(n91, r53);
    return t61 === -1 ? null : n91[t61];
  }
  function I(n91, r53) {
    var t61 = w2(n91, r53);
    return t61.map(function(r54) {
      return n91[r54];
    });
  }
  function P(n91, r53) {
    var t61 = null;
    n91.forEach(function(n92) {
      if (r53(n92)) {
        t61 = n92;
      }
    });
    return t61;
  }
  function k(n91) {
    var r53 = [];
    n91.forEach(function(n92) {
      r53.push(n92);
    });
    return r53;
  }
  function E(n91, r53) {
    var t61 = O2(n91, r53);
    if (t61 > -1) {
      n91.splice(t61, 1);
    }
    return t61 !== -1;
  }
  function C(n91) {
    if (Array.fromArray != null) {
      return Array.from(n91);
    } else {
      var r53 = [];
      Array.prototype.push.apply(r53, n91);
      return r53;
    }
  }
  function D(n91, r53) {
    var t61 = n91.indexOf(r53);
    if (t61 > -1) {
      n91.splice(t61, 1);
    }
    return t61 !== -1;
  }
  function _(n91, r53, t61, e78) {
    var u52 = n91[r53];
    if (u52 == null) {
      u52 = [];
      n91[r53] = u52;
    }
    u52[e78 ? "unshift" : "push"](t61);
    return u52;
  }
  function F(n91, r53, t61) {
    if (n91.indexOf(r53) === -1) {
      if (t61) {
        n91.unshift(r53);
      } else {
        n91.push(r53);
      }
      return true;
    }
    return false;
  }
  var H = [];
  for (N15 = 0; N15 < 256; N15++) {
    H[N15] = (N15 < 16 ? "0" : "") + N15.toString(16);
  }
  var N15;
  function $() {
    var n91 = Math.random() * 4294967295 | 0;
    var r53 = Math.random() * 4294967295 | 0;
    var t61 = Math.random() * 4294967295 | 0;
    var e78 = Math.random() * 4294967295 | 0;
    return H[n91 & 255] + H[n91 >> 8 & 255] + H[n91 >> 16 & 255] + H[n91 >> 24 & 255] + "-" + H[r53 & 255] + H[r53 >> 8 & 255] + "-" + H[r53 >> 16 & 15 | 64] + H[r53 >> 24 & 255] + "-" + H[t61 & 63 | 128] + H[t61 >> 8 & 255] + "-" + H[t61 >> 16 & 255] + H[t61 >> 24 & 255] + H[e78 & 255] + H[e78 >> 8 & 255] + H[e78 >> 16 & 255] + H[e78 >> 24 & 255];
  }
  function q(n91, r53, t61) {
    var e78 = { x: n91.x - r53.x, y: n91.y - r53.y }, u52 = Math.cos(t61 / 360 * Math.PI * 2), i45 = Math.sin(t61 / 360 * Math.PI * 2);
    return { x: e78.x * u52 - e78.y * i45 + r53.x, y: e78.y * u52 + e78.x * i45 + r53.y, cr: u52, sr: i45 };
  }
  function z(n91, r53) {
    var t61 = q({ x: n91[0], y: n91[1] }, { x: 0, y: 0 }, r53);
    return [Math.round(t61.x), Math.round(t61.y)];
  }
  function G(n91) {
    if (n91 == null) {
      return null;
    }
    var r53 = n91.replace(/^\s\s*/, ""), t61 = /\s/, e78 = r53.length;
    while (t61.test(r53.charAt(--e78))) {
    }
    return r53.slice(0, e78 + 1);
  }
  function J(n91, r53) {
    n91 = n91.length == null || typeof n91 === "string" ? [n91] : n91;
    for (var t61 = 0; t61 < n91.length; t61++) {
      r53(n91[t61]);
    }
  }
  function K(n91, r53) {
    var t61 = [];
    for (var e78 = 0; e78 < n91.length; e78++) {
      t61.push(r53(n91[e78]));
    }
    return t61;
  }
  function Q() {
    for (var n91 = arguments.length, r53 = new Array(n91), t61 = 0; t61 < n91; t61++) {
      r53[t61] = arguments[t61];
    }
    if (typeof console !== "undefined") {
      try {
        var e78 = arguments[arguments.length - 1];
        console.log(e78);
      } catch (n92) {
      }
    }
  }
  function R(n91) {
    return n91 < 0 ? -1 : n91 > 0 ? 1 : 0;
  }
  function U(n91, r53, t61) {
    return function() {
      var e78 = null;
      try {
        if (r53 != null) {
          e78 = r53.apply(this, arguments);
        }
      } catch (n92) {
        Q("jsPlumb function failed : " + n92);
      }
      if (n91 != null && (t61 == null || e78 !== t61)) {
        try {
          e78 = n91.apply(this, arguments);
        } catch (n92) {
          Q("wrapped function failed : " + n92);
        }
      }
      return e78;
    };
  }
  function V(n91, r53, t61, e78) {
    if (r53.length === 0) {
      r53.push(n91);
    } else {
      var u52 = e78 ? -1 : 1;
      var i45 = 0;
      var l48 = r53.length;
      var f45 = Math.floor((i45 + l48) / 2);
      while (l48 > i45) {
        var a48 = t61(n91, r53[f45]) * u52;
        if (a48 < 0) {
          l48 = f45;
        } else {
          i45 = f45 + 1;
        }
        f45 = Math.floor((i45 + l48) / 2);
      }
      r53.splice(f45, 0, n91);
    }
  }
  function W(n91, r53, t61) {
    return { x: n91.x + t61 * r53.x, y: n91.y + t61 * r53.y, w: n91.w, h: n91.h };
  }
  function X() {
    return { xmin: Infinity, xmax: -Infinity, ymin: Infinity, ymax: -Infinity };
  }
  var Y = function() {
    function e78() {
      t(this, e78);
      o(this, "extents", void 0);
      this.extents = X();
    }
    n(e78, [{ key: "add", value: function n91(r53, t61) {
      this.extents.xmin = Math.min(this.extents.xmin, r53.x);
      this.extents.ymin = Math.min(this.extents.ymin, r53.y);
      this.extents.xmax = Math.max(this.extents.xmax, r53.x + t61.w);
      this.extents.ymax = Math.max(this.extents.ymax, r53.y + t61.h);
      return this;
    } }, { key: "addAll", value: function n91(r53) {
      var t61 = this;
      r53.forEach(function(n92) {
        t61.extents.xmin = Math.min(t61.extents.xmin, n92.x);
        t61.extents.ymin = Math.min(t61.extents.ymin, n92.y);
        t61.extents.xmax = Math.max(t61.extents.xmax, n92.x + n92.w);
        t61.extents.ymax = Math.max(t61.extents.ymax, n92.y + n92.h);
      });
      return this;
    } }, { key: "reset", value: function n91() {
      this.extents = X();
    } }, { key: "getExtents", value: function n91() {
      return Object.assign({}, this.extents);
    } }]);
    return e78;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/util.js
  function r2(t61, e78, u52) {
    if (t61 == null) {
      return null;
    }
    if (e78 === "$data" || e78 == null) {
      return t61;
    }
    var i45 = e78.match(/^\{(.*)\}$/);
    if (i45) {
      var l48 = {}, f45 = i45[1].split(",");
      for (var o42 = 0; o42 < f45.length; o42++) {
        var a48 = f45[o42].split(":"), c47 = r2(t61, a48[1]);
        l48[G(a48[0])] = c47 || a48[1].replace(/'/g, "");
      }
      return l48;
    }
    e78 = e78.replace(/\['([^']*)'\]/g, ".$1");
    var s40 = t61, h35 = s40, p49 = null;
    e78.replace(/([^\.])+/g, function(n91, t62, r53, e79) {
      if (p49 != null) {
        return;
      }
      var i46 = n91.match(/([^\[0-9]+){1}(\[)([0-9+])/), l49 = r53 + n91.length >= e79.length, f46 = function n92() {
        return h35[i46[1]] || function() {
          h35[i46[1]] = [];
          return h35[i46[1]];
        }();
      };
      if (l49) {
        if (i46) {
          var o43 = f46(), a49 = i46[3];
          if (u52 == null) {
            p49 = o43[a49];
          } else {
            o43[a49] = u52;
          }
        } else {
          if (u52 == null) {
            p49 = h35[n91];
          } else {
            h35[n91] = u52;
          }
        }
      } else {
        if (i46) {
          var c48 = f46();
          h35 = c48[i46[3]] || function() {
            c48[i46[3]] = {};
            return c48[i46[3]];
          }();
        } else
          h35 = h35[n91] || function() {
            h35[n91] = {};
            return h35[n91];
          }();
      }
    });
    return p49;
  }
  function e3(n91, r53) {
    var e78 = { left: [], right: [] };
    j2(n91, function(n92) {
      if (r53(n92)) {
        e78.left.push(n92);
      } else {
        e78.right.push(n92);
      }
    });
    return e78;
  }
  function u3(t61) {
    return t61.filter(function(t62) {
      return t62 != null && G(t62).length > 0;
    });
  }
  function i3(n91, t61) {
    for (var r53 = 0; r53 < n91.length; r53++) {
      var e78 = n91[r53];
      if (e78 == null || e78.length === 0) {
        continue;
      } else {
        t61(r53, e78);
      }
    }
  }
  function l3(n91, t61, r53) {
    var e78 = r53.map(function(r54, e79) {
      var u52 = t61.w * r54.x, i45 = t61.h * r54.y, l48 = Math.sqrt(Math.pow(n91.x - u52, 2) + Math.pow(n91.y - i45, 2));
      return { p: r54, idx: e79, distance: l48 };
    });
    e78.sort(function(n92, t62) {
      if (n92.distance < t62.distance) {
        return -1;
      } else {
        return 1;
      }
    });
    return e78[0];
  }
  function f3(n91, t61, r53) {
    if (!n91.has(t61)) {
      n91.set(t61, r53());
    }
    return n91.get(t61);
  }
  function o3(n91, t61, r53) {
    if (n91[t61] == null) {
      n91[t61] = r53();
    }
    return n91[t61];
  }
  function a3(n91, t61) {
    var r53 = n91.prototype;
    while (r53 != null) {
      if (r53 instanceof t61) {
        return true;
      }
      r53 = r53.prototype;
    }
    return false;
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui/decorators.js
  var l4 = {};
  var o4;
  (function(e78) {
    e78["right"] = "right";
    e78["left"] = "left";
  })(o4 || (o4 = {}));
  var u4;
  (function(e78) {
    e78["top"] = "top";
    e78["bottom"] = "bottom";
  })(u4 || (u4 = {}));
  var f4 = function() {
    function t61(e78, n91, a48, s40) {
      t(this, t61);
      this.adapter = n91;
      this.container = a48;
      this.id = s40;
      o(this, "incremental", void 0);
      o(this, "fixedElements", /* @__PURE__ */ new Set());
      o(this, "floatedElements", /* @__PURE__ */ new Set());
      o(this, "appendedElements", /* @__PURE__ */ new Set());
    }
    n(t61, [{ key: "getFixedElement", value: function e78(t62) {
      return Array.from(this.fixedElements).find(function(e79) {
        return e79.id === t62;
      });
    } }, { key: "getBounds", value: function e78() {
      var t62 = this;
      var n91 = Infinity, r53 = -Infinity, i45 = Infinity, a48 = -Infinity;
      var s40 = function e79(s41) {
        var l48 = t62.adapter.jsplumb.getPosition(s41.el);
        var o42 = t62.adapter.jsplumb.getSize(s41.el);
        n91 = Math.min(n91, l48.x);
        r53 = Math.max(r53, l48.x + o42.w);
        i45 = Math.min(i45, l48.y);
        a48 = Math.max(a48, l48.y + o42.h);
      };
      this.fixedElements.forEach(s40);
      this.floatedElements.forEach(s40);
      this.appendedElements.forEach(s40);
      return { x: n91, y: i45, w: r53 - n91, h: a48 - i45 };
    } }, { key: "clear", value: function e78() {
      var t62 = this;
      this.appendedElements.forEach(function(e79) {
        return t62.adapter.jsplumb._removeElement(e79.el);
      });
      this.floatedElements.forEach(function(e79) {
        return t62.adapter.jsplumb._removeElement(e79.el);
      });
      this.fixedElements.forEach(function(e79) {
        return t62.adapter.unfixElement(e79.el);
      });
      this.appendedElements.clear();
      this.floatedElements.clear();
      this.fixedElements.clear();
    } }]);
    return t61;
  }();
  var h3 = function(s40) {
    a(o42, s40);
    var l48 = s(o42);
    function o42(e78, t61, n91, s41, u52, f45) {
      var h35;
      t(this, o42);
      h35 = l48.call(this, t61, n91, s41, u52);
      h35.methods = e78;
      o(l(h35), "incremental", void 0);
      h35.incremental = f45 === true;
      return h35;
    }
    n(o42, [{ key: "decorate", value: function e78(t61) {
      this.methods.decorate(t61);
    } }, { key: "reset", value: function e78(t61) {
      this.methods.reset(t61);
    } }]);
    return o42;
  }(f4);
  function c3(e78) {
    var t61 = function t62(n91, r53, i45, a48) {
      var s40 = new e78(n91, r53, i45, a48);
      return new h3(s40, n91, r53, i45, a48, s40.incremental);
    };
    return t61;
  }
  var m3 = { get: function e4(t61, n91, r53, i45, a48) {
    var s40 = l4[t61];
    if (!s40) {
      throw { message: "JsPlumb: unknown decorator type '" + t61 + "'" };
    } else {
      return new s40(n91, r53, i45, a48);
    }
  }, register: function e5(t61, n91) {
    if (a3(n91, f4)) {
      l4[t61] = n91;
    } else {
      l4[t61] = c3(n91);
    }
  } };

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui/wheel-listener.js
  var t2;
  var n2;
  var r3;
  var a4;
  var i4;
  var o5;
  function u5(e78, t61, n91) {
    return function(r53) {
      return r53[e78] / t61 * (n91 ? -1 : 1);
    };
  }
  var l5 = "deltaY";
  var f5 = "deltaX";
  var d3 = "wheelDeltaY";
  var c4 = "wheelDeltaX";
  var s3 = "webkit";
  var v3 = "mac";
  var h4 = "win";
  var m4 = "ie";
  var w3 = "safari";
  var g3 = "firefox";
  var p3 = "default";
  function y2(e78) {
    return e78.deltaY * (e78.deltaMode === 1 ? 25 : 1) / 120;
  }
  function E2(e78) {
    return e78.deltaX * (e78.deltaMode === 1 ? 25 : 1) / 120;
  }
  var D2 = (r3 = {}, o(r3, s3, (t2 = {}, o(t2, v3, u5(l5, 120)), o(t2, h4, u5(l5, 100)), t2)), o(r3, w3, u5(d3, 120, true)), o(r3, g3, (n2 = {}, o(n2, v3, y2), o(n2, h4, y2), n2)), o(r3, m4, function(e78) {
    return e78.wheelDelta / 120;
  }), o(r3, p3, function(e78) {
    return e78.deltaY || e78.wheelDelta;
  }), r3);
  var A2 = (o5 = {}, o(o5, s3, (a4 = {}, o(a4, v3, u5(f5, 120)), o(a4, h4, u5(f5, 100)), a4)), o(o5, w3, u5(c4, 120, true)), o(o5, g3, (i4 = {}, o(i4, v3, E2), o(i4, h4, E2), i4)), o(o5, m4, function(e78) {
    return e78.wheelDelta / 120;
  }), o(o5, p3, function(e78) {
    return e78.deltaX || e78.wheelDelta;
  }), o5);
  var K2 = typeof navigator !== "undefined";
  var M2 = K2 ? /Mac/.test(navigator.userAgent) ? v3 : h4 : v3;
  var x2 = K2 ? navigator.userAgent.indexOf("Firefox") !== -1 ? g3 : /Chrome/.test(navigator.userAgent) ? s3 : /Safari/.test(navigator.userAgent) ? w3 : /WebKit/.test(navigator.userAgent) ? s3 : /Trident/.test(navigator.userAgent) ? m4 : "default" : p3;
  var L = typeof D2[x2] === "function" ? D2[x2] : D2[x2][M2];
  var X2 = typeof A2[x2] === "function" ? A2[x2] : A2[x2][M2];
  var Y2 = function e6(t61) {
    return L(t61 || event);
  };
  var _2 = function e7(t61) {
    return X2(t61 || event);
  };
  var b3 = function e8(t61, n91, r53) {
    var a48 = function e78(n92) {
      var a49 = Y2(n92), i45 = _2(n92);
      n92.normalizedWheelDelta = a49;
      if (!r53 || n92.metaKey || n92.ctrlKey) {
        t61(n92, i45, a49, n92.metaKey || n92.ctrlKey);
      }
    };
    t61._jtkwl = a48;
    return a48;
  };
  var j3 = typeof document !== "undefined";
  var k2 = j3 ? "onwheel" in document.createElement("div") ? "wheel" : document.onmousewheel !== void 0 ? "mousewheel" : "DOMMouseScroll" : "wheel";
  function O3(e78, t61, n91, r53) {
    var a48 = b3(t61, n91, r53);
    if (e78.addEventListener) {
      e78.addEventListener(k2, a48, false);
    } else if (e78.attachEvent) {
      e78.attachEvent("onmousewheel", a48);
    }
    return a48;
  }
  function P2(e78, t61) {
    var n91 = t61._jtkwl;
    if (n91 != null) {
      if (e78.removeEventListener) {
        e78.removeEventListener(k2, n91, false);
      } else if (e78.detachEvent) {
        e78.detachEvent("onmousewheel", n91);
      }
    }
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/browser-ui-renderer/browser-util.js
  function s4(e78, n91, t61) {
    t61 = t61 || e78.parentNode;
    var l48 = t61.querySelectorAll(n91);
    for (var r53 = 0; r53 < l48.length; r53++) {
      if (l48[r53] === e78) {
        return true;
      }
    }
    return false;
  }
  function i5(e78, n91) {
    if (e78.stopPropagation) {
      e78.stopPropagation();
    } else {
      e78.returnValue = false;
    }
    if (!n91 && e78.preventDefault) {
      e78.preventDefault();
    }
  }
  function u6(e78, n91, t61, l48) {
    if (l48 && s4(e78, n91, t61)) {
      return e78;
    } else {
      e78 = e78.parentNode;
    }
    while (e78 != null && e78 !== t61) {
      if (s4(e78, n91)) {
        return e78;
      } else {
        e78 = e78.parentNode;
      }
    }
  }
  function o6(e78) {
    return e78.srcElement || e78.target;
  }
  function f6(e78, n91, t61) {
    n91 = G(n91);
    if (typeof e78.className.baseVal !== "undefined") {
      e78.className.baseVal = n91;
    } else {
      e78.className = n91;
    }
    try {
      var s40 = e78.classList;
      if (s40 != null) {
        while (s40.length > 0) {
          s40.remove(s40.item(0));
        }
        for (var i45 = 0; i45 < t61.length; i45++) {
          if (t61[i45]) {
            s40.add(t61[i45]);
          }
        }
      }
    } catch (e79) {
      Q("WARN: cannot set class list", e79);
    }
  }
  function c5(e78) {
    return e78.className != null ? typeof e78.className.baseVal === "undefined" ? e78.className : e78.className.baseVal : "";
  }
  function d4(e78, n91, t61) {
    var l48 = n91 == null ? [] : Array.isArray(n91) ? n91 : n91.split(/\s+/);
    var r53 = t61 == null ? [] : Array.isArray(t61) ? t61 : t61.split(/\s+/);
    var s40 = c5(e78), i45 = s40.split(/\s+/);
    var u52 = function e79(n92, t62) {
      for (var l49 = 0; l49 < t62.length; l49++) {
        if (n92) {
          if (i45.indexOf(t62[l49]) === -1) {
            i45.push(t62[l49]);
          }
        } else {
          var r54 = i45.indexOf(t62[l49]);
          if (r54 !== -1) {
            i45.splice(r54, 1);
          }
        }
      }
    };
    u52(true, l48);
    u52(false, r53);
    f6(e78, i45.join(" "), i45);
  }
  function p4(n91) {
    return !l2(n91) && !Array.isArray(n91) && n91.length != null && n91.documentElement == null && n91.nodeType == null;
  }
  function m5(n91) {
    return !l2(n91) && (Array.isArray(n91) || p4(n91));
  }
  function v4(e78) {
    return c5(e78);
  }
  function h5(e78, t61) {
    var r53 = function e79(t62, r54) {
      if (t62 != null && r54 != null && r54.length > 0) {
        if (t62.classList) {
          var s40 = G(r54).split(/\s+/);
          j2(s40, function(e80) {
            t62.classList.add(e80);
          });
        } else {
          d4(t62, r54);
        }
      }
    };
    if (p4(e78)) {
      j2(e78, function(e79) {
        return r53(e79, t61);
      });
    } else {
      r53(e78, t61);
    }
  }
  function g4(e78, n91) {
    if (e78.classList) {
      return e78.classList.contains(n91);
    } else {
      return c5(e78).indexOf(n91) !== -1;
    }
  }
  function y3(e78, t61) {
    var r53 = function e79(n91, t62) {
      if (n91 != null && t62 != null && t62.length > 0) {
        if (n91.classList) {
          var r54 = G(t62).split(/\s+/);
          r54.forEach(function(e80) {
            n91.classList.remove(e80);
          });
        } else {
          d4(n91, null, t62);
        }
      }
    };
    if (p4(e78)) {
      j2(e78, function(e79) {
        return r53(e79, t61);
      });
    } else {
      r53(e78, t61);
    }
  }
  function L2(e78, t61) {
    var l48 = this;
    var r53 = function e79(n91, t62) {
      if (n91 != null && t62 != null && t62.length > 0) {
        if (n91.classList) {
          n91.classList.toggle(t62);
        } else {
          if (l48.hasClass(n91, t62)) {
            l48.removeClass(n91, t62);
          } else {
            l48.addClass(n91, t62);
          }
        }
      }
    };
    if (p4(e78)) {
      j2(e78, function(e79) {
        return r53(e79, t61);
      });
    } else {
      r53(e78, t61);
    }
  }
  function A3(n91, l48) {
    var r53 = null;
    if (arguments.length === 1) {
      if (!l2(n91)) {
        var s40 = document.createDocumentFragment();
        s40.appendChild(n91);
        return C(s40.childNodes);
      }
      r53 = C(document.querySelectorAll(n91));
    } else {
      r53 = C(n91.querySelectorAll(l48));
    }
    return r53;
  }
  function N(e78, n91, t61, l48) {
    return V2(null, e78, n91, t61, l48);
  }
  function V2(e78, n91, t61, l48, r53) {
    var s40 = e78 == null ? document.createElement(n91) : document.createElementNS(e78, n91);
    var i45;
    t61 = t61 || {};
    for (i45 in t61) {
      s40.style[i45] = t61[i45];
    }
    if (l48) {
      h5(s40, l48);
    }
    r53 = r53 || {};
    for (i45 in r53) {
      s40.setAttribute(i45, "" + r53[i45]);
    }
    return s40;
  }
  function S3(e78, n91) {
    var t61 = e78.getBoundingClientRect(), l48 = document.body, r53 = document.documentElement, s40 = window.pageYOffset || r53.scrollTop || l48.scrollTop, i45 = window.pageXOffset || r53.scrollLeft || l48.scrollLeft, u52 = r53.clientTop || l48.clientTop || 0, a48 = r53.clientLeft || l48.clientLeft || 0, o42 = t61.top + s40 - u52, f45 = t61.left + i45 - a48;
    return { x: n91 ? f45 : Math.round(f45), y: n91 ? o42 : Math.round(o42) };
  }
  var T;
  (function(e78) {
    e78["SVG"] = "SVG";
    e78["HTML"] = "HTML";
  })(T || (T = {}));
  function b4(e78) {
    return e78 == null ? T.HTML : e78 instanceof SVGElement ? T.SVG : T.HTML;
  }
  function w4(e78) {
    return b4(e78) === T.SVG;
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/constants.js
  function a5() {
    for (var a48 = arguments.length, r53 = new Array(a48), n91 = 0; n91 < a48; n91++) {
      r53[n91] = arguments[n91];
    }
    return r53.map(function(a49) {
      return "." + a49;
    }).join(",");
  }
  function r4() {
    for (var a48 = arguments.length, r53 = new Array(a48), n91 = 0; n91 < a48; n91++) {
      r53[n91] = arguments[n91];
    }
    return r53.join(" ");
  }
  function n3() {
    for (var a48 = arguments.length, r53 = new Array(a48), n91 = 0; n91 < a48; n91++) {
      r53[n91] = arguments[n91];
    }
    return r53.map(function(a49) {
      return "[" + a49 + "]";
    }).join(",");
  }
  var t3 = "source";
  var e9 = "target";
  var o7 = "block";
  var v5 = "none";
  var s5 = "absolute";
  var l6 = "fixed";
  var u7 = "static";
  var d5 = "data-jtk-group";
  var f7 = "data-jtk-managed";
  var h6 = "data-jtk-not-draggable";
  var b5 = "tabindex";
  var g5 = "data-jtk-scope";
  var p5 = g5 + "-";
  var y4 = n3(f7);
  var m6 = "Cannot establish connection: source endpoint is full";
  var O4 = "Cannot establish connection: target endpoint is full";
  var S4 = "Cannot establish connection: source does not exist";
  var q2 = "Cannot establish connection: target does not exist";
  var z2 = "connectionOverlays";
  var B = "internal.anchor:changed";

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/browser-ui-renderer/svg-util.js
  var o8 = { "stroke-linejoin": "stroke-linejoin", "stroke-dashoffset": "stroke-dashoffset", "stroke-linecap": "stroke-linecap" };
  var i6 = "dashstyle";
  var s6 = "fill";
  var a6 = "stroke";
  var n4 = "stroke-width";
  var l7 = "strokeWidth";
  var v6 = "svg";
  var f8 = "defs";
  var h7 = "path";
  var k3 = "text";
  var p6 = "rect";
  var d6 = "g";
  var u8 = "version";
  var c6 = "xmlns";
  var w5 = "fill";
  var x3 = "stroke-dasharray";
  var g6 = "stroke-linejoin";
  var m7 = "stroke-linecap";
  var b6 = "stroke-miterlimit";
  var y5 = "stroke-dashoffset";
  var A4 = "stroke-opacity";
  var j4 = "stroke";
  var W2 = "stroke-width";
  var N2 = "vector-effect";
  var B2 = "non-scaling-stroke";
  var C2 = "text-anchor";
  var M3 = "http://www.w3.org/2000/svg";
  var O5 = "http://www.w3.org/1999/xlink";
  function z3(t61, r53) {
    for (var e78 in r53) {
      t61.setAttribute(e78, "" + r53[e78]);
    }
  }
  function D3(r53, e78) {
    e78 = e78 || {};
    return V2(M3, r53, null, null, e78);
  }
  function E3(t61) {
    return "position:absolute;left:" + t61[0] + "px;top:" + t61[1] + "px";
  }
  function F2(t61, v41) {
    t61.setAttribute(s6, v41.fill ? v41.fill : v5);
    t61.setAttribute(a6, v41.stroke ? v41.stroke : v5);
    if (v41.strokeWidth) {
      t61.setAttribute(n4, v41.strokeWidth);
    }
    if (v41[i6] && v41[l7] && !v41[x3]) {
      var f45 = v41[i6].indexOf(",") === -1 ? " " : ",", h35 = v41[i6].split(f45), k20 = "";
      j2(h35, function(t62) {
        k20 += Math.floor(t62 * v41.strokeWidth) + f45;
      });
      t61.setAttribute(x3, k20);
    } else if (v41[x3]) {
      t61.setAttribute(x3, v41[x3]);
    }
    for (var p49 in o8) {
      if (v41[p49]) {
        t61.setAttribute(o8[p49], v41[p49]);
      }
    }
  }
  function G2(t61, r53, e78) {
    if (t61.childNodes.length > e78) {
      t61.insertBefore(r53, t61.childNodes[e78]);
    } else {
      t61.appendChild(r53);
    }
  }
  var I2 = { attr: z3, node: D3 };

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/browser-ui-renderer/positioning-and-sizing-utils.js
  function n5(t61, e78) {
    var n91 = t61;
    if (n91.offsetWidth != null) {
      return x4(t61);
    } else if (n91.width && n91.width.baseVal) {
      return m8(n91);
    } else if (n91.getBBox) {
      return V3(n91);
    } else if (n91.localName === "g") {
      return c7(n91, e78);
    }
  }
  function r5(t61, e78) {
    var n91 = t61;
    if (n91.offsetWidth != null) {
      return p7(t61);
    } else if (n91.width && n91.width.baseVal) {
      return m8(n91);
    } else if (n91.getBBox) {
      return V3(n91);
    } else if (n91.localName === "g") {
      return c7(n91, this);
    }
  }
  function a7(t61) {
    var e78 = t61;
    if (e78.offsetLeft != null) {
      return y6(e78);
    } else if (e78.x && e78.x.baseVal) {
      return d7(e78);
    } else if (e78.localName === "g") {
      return B3(e78);
    }
  }
  function i7(n91, r53) {
    var a48 = n91;
    if (a48.offsetLeft != null) {
      g7(a48, r53);
    } else if (a48.x && a48.x.baseVal) {
      b7(a48, r53);
      if (a48.localName === v6 && !w4(n91.parentElement)) {
        g7(a48, r53);
      }
    } else if (a48.localName === "g") {
      F3(a48, r53);
    }
  }
  function l8(t61, e78, n91, r53, a48) {
    var i45 = t61;
    if (i45.offsetLeft != null) {
      i45.style[n91] = "".concat(e78, "px");
    } else if (i45[r53] && i45[r53].baseVal) {
      i45.setAttribute(r53, e78);
    } else if (i45.localName === "g") {
      var l48 = B3(i45);
      l48[a48] = e78;
      F3(i45, l48);
    }
  }
  function o9(t61, e78) {
    l8(t61, e78, "left", "x", "x");
  }
  function f9(t61, e78) {
    l8(t61, e78, "top", "y", "y");
  }
  function s7(t61, e78, n91) {
    var r53 = t61;
    if (r53.offsetWidth != null) {
      v7(t61, e78, n91);
    } else if (r53.width && r53.width.baseVal) {
      v7(t61, e78, n91);
      t61.setAttribute("width", "".concat(e78));
      t61.setAttribute("height", "".concat(n91));
    } else if (r53.localName === "g")
      ;
  }
  function u9(t61, e78, n91) {
    i7(t61, e78);
    s7(t61, n91.w, n91.h);
  }
  function c7(t61, e78) {
    var n91 = t61.getBoundingClientRect();
    var r53 = e78 || 1;
    return { w: n91.width / r53, h: n91.height / r53 };
  }
  function h8(t61, e78) {
    var n91 = e78.getContainer().getBoundingClientRect();
    var r53 = t61.getBoundingClientRect();
    var a48 = e78.getEffectiveVisibleZoom();
    return { x: (r53.left - n91.left) / a48, y: (r53.top - n91.top) / a48 };
  }
  function x4(t61) {
    return { w: t61.offsetWidth, h: t61.offsetHeight };
  }
  function p7(t61) {
    return { w: t61.clientWidth, h: t61.clientHeight };
  }
  function y6(t61) {
    return { x: parseFloat(t61.offsetLeft), y: parseFloat(t61.offsetTop) };
  }
  function g7(t61, e78) {
    t61.style.left = e78.x + "px";
    t61.style.top = e78.y + "px";
  }
  function v7(t61, e78, n91) {
    t61.style.width = "".concat(e78, "px");
    t61.style.height = "".concat(n91, "px");
  }
  function d7(t61) {
    try {
      return { x: parseFloat(t61.x.baseVal.value), y: parseFloat(t61.y.baseVal.value) };
    } catch (t62) {
      return { x: 0, y: 0 };
    }
  }
  function b7(t61, e78) {
    t61.setAttribute("x", "".concat(e78.x));
    t61.setAttribute("y", "".concat(e78.y));
  }
  function m8(t61) {
    try {
      return { w: parseFloat(t61.width.baseVal.value), h: parseFloat(t61.height.baseVal.value) };
    } catch (t62) {
      return { w: 0, h: 0 };
    }
  }
  function V3(t61) {
    try {
      var e78 = t61.getBBox();
      return { w: e78.width, h: e78.height };
    } catch (t62) {
      return { w: 0, h: 0 };
    }
  }
  function B3(t61) {
    var e78 = t61.style.transform.match(/translate\(([-0-9\.]+)px, ([-0-9\.]+)px\)/);
    try {
      return { x: parseFloat(e78[1]), y: parseFloat(e78[2]) };
    } catch (t62) {
      return { x: 0, y: 0 };
    }
  }
  function F3(t61, e78) {
    t61.style.transform = "translate(".concat(e78.x, "px, ").concat(e78.y, "px)");
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui/fixed-layer.js
  var a8 = "left";
  var u10 = "top";
  var f10;
  (function(e78) {
    e78["left"] = "left";
    e78["right"] = "right";
  })(f10 || (f10 = {}));
  var m9;
  (function(e78) {
    e78["top"] = "top";
    e78["bottom"] = "bottom";
  })(m9 || (m9 = {}));
  var p8 = function() {
    function p49(e78) {
      t(this, p49);
      this.panZoom = e78;
      o(this, "fixedElements", {});
    }
    n(p49, [{ key: "_findRequestedPosition", value: function e78(t61, i45) {
      if (i45 === "x") {
        var o42 = t61.pos[i45];
        if (t61.alignX === f10.right) {
          var r53 = n5(t61.el, this.panZoom.zoom);
          return o42 - r53.w;
        }
        return o42;
      } else {
        var s40 = t61.pos[i45];
        if (t61.alignY === m9.bottom) {
          var l48 = n5(t61.el, this.panZoom.zoom);
          return s40 - l48.h;
        }
        return s40;
      }
    } }, { key: "_fixElements", value: function e78(t61) {
      var i45 = this;
      var n91;
      var o42;
      for (var l48 in this.fixedElements) {
        if (this.fixedElements.hasOwnProperty(l48)) {
          var f45 = function() {
            n91 = n91 || i45.panZoom.getApparentCanvasLocation();
            o42 = o42 == null ? i45.panZoom.getZoom() : o42;
            if (t61 != null && t61 !== l48) {
              return "continue";
            }
            var e79 = i45.fixedElements[l48];
            var f46 = function t62(r53, s40, l49) {
              if (e79[r53]) {
                var a48 = i45._findRequestedPosition(e79, s40);
                e79.requestedPosition[s40] = a48;
                if (n91[s40] / o42 + a48 < 0) {
                  l49(e79.el, -(n91[s40] / o42));
                } else {
                  l49(e79.el, a48);
                }
              }
            };
            f46(a8, "x", function(t62, i46) {
              o9(t62, i46);
              e79.currentPosition.x = i46;
            });
            f46(u10, "y", function(t62, i46) {
              f9(t62, i46);
              e79.currentPosition.y = i46;
            });
          }();
          if (f45 === "continue")
            continue;
        }
      }
    } }, { key: "pan", value: function e78() {
      this._fixElements();
    } }, { key: "append", value: function e78(t61, i45, n91, r53) {
      if (t61 == null)
        return;
      var s40 = t61;
      n91 = n91 || {};
      var a48 = this.panZoom.idFunction(t61);
      this.fixedElements[a48] = { el: s40, left: n91.left, top: n91.top, pos: i45, alignX: n91.alignX || f10.left, alignY: n91.alignY || m9.top, currentPosition: Object.assign({}, i45), requestedPosition: Object.assign({}, i45), id: r53 };
      if (!w4(t61)) {
        s40.style.position = "absolute";
      }
      i7(s40, i45);
      this.panZoom.canvasElement.appendChild(t61);
      this._fixElements(a48);
      return this.fixedElements[a48];
    } }, { key: "remove", value: function e78(t61) {
      var i45 = this.panZoom.idFunction(t61);
      if (i45 && this.fixedElements[i45]) {
        this.panZoom.canvasElement.removeChild(this.fixedElements[i45].el);
        delete this.fixedElements[i45];
        this._fixElements();
      }
    } }, { key: "destroy", value: function e78() {
      this.panZoom = null;
      this.fixedElements = null;
    } }]);
    return p49;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui/pan-zoom-options.js
  var o10;
  (function(o42) {
    o42["both"] = "both";
    o42["x"] = "x";
    o42["y"] = "y";
  })(o10 || (o10 = {}));

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/browser-ui-renderer/event-constants.js
  var e10 = "click";
  var o11 = "contextmenu";
  var n6 = "dblclick";
  var a9 = "dbltap";
  var r6 = "focus";
  var t4 = "mousedown";
  var v8 = "mouseenter";
  var c8 = "mouseexit";
  var m10 = "mousemove";
  var u11 = "mouseup";
  var i8 = "mouseout";
  var d8 = "mouseover";
  var l9 = "tap";
  var s8 = "touchstart";
  var p9 = "touchend";
  var b8 = "touchmove";
  var g8 = "drag:move";
  var k4 = "drag:stop";
  var x5 = "drag:start";
  var w6 = "revert";
  var h9 = "connection:abort";
  var f11 = "connection:drag";
  var j5 = "connection:dragging";
  var q3 = "connection:drag:end";
  var y7 = "element:click";
  var z4 = "element:dblclick";
  var A5 = "element:dbltap";
  var B4 = "element:mouseout";
  var C3 = "element:mouseover";
  var D4 = "element:mousemove";
  var E4 = "element:mouseup";
  var F4 = "element:mousedown";
  var G3 = "element:contextmenu";
  var H2 = "element:tap";
  var I3 = "endpoint:click";
  var J2 = "endpoint:dblclick";
  var L3 = "endpoint:mouseout";
  var M4 = "endpoint:mouseover";
  var N3 = "endpoint:mouseup";
  var O6 = "endpoint:mousedown";
  var Q2 = "connection:click";
  var R2 = "connection:dblclick";
  var S5 = "connection:dbltap";
  var T2 = "connection:mouseout";
  var U2 = "connection:mouseover";
  var V4 = "connection:mouseup";
  var W3 = "connection:mousedown";
  var X3 = "connection:contextmenu";
  var Y3 = "connection:tap";

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/common/index.js
  var a10 = "undefined";
  var r7 = "default";
  var e11 = "true";
  var v9 = "false";
  var d9 = "*";

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/browser-ui-renderer/event-manager.js
  var x6;
  var H3;
  function w7(e78, t61, n91, r53, a48, i45, o42) {
    return new Touch({ target: e78, identifier: $(), pageX: t61, pageY: n91, screenX: r53, screenY: a48, clientX: i45 || r53, clientY: o42 || a48 });
  }
  function k5() {
    var e78 = [];
    e78.push.apply(e78, arguments);
    e78.item = function(e79) {
      return this[e79];
    };
    return e78;
  }
  function b9(e78, t61, n91, r53, a48, u52, i45) {
    return k5(w7(e78, t61, n91, r53, a48, u52, i45));
  }
  function P3(e78, t61, n91) {
    n91 = n91 || e78.parentNode;
    var r53 = n91.querySelectorAll(t61);
    for (var a48 = 0; a48 < r53.length; a48++) {
      if (r53[a48] === e78) {
        return true;
      }
    }
    return false;
  }
  function X4(e78) {
    return e78.srcElement || e78.target;
  }
  function S6(e78, t61, n91, r53) {
    if (!r53) {
      return { path: [t61], end: 1 };
    } else {
      var a48 = e78.composedPath ? e78.composedPath() : e78.path;
      if (typeof a48 !== "undefined" && a48.indexOf) {
        return { path: a48, end: a48.indexOf(n91) };
      } else {
        var u52 = { path: [], end: -1 }, i45 = function e79(t62) {
          u52.path.push(t62);
          if (t62 === n91) {
            u52.end = u52.path.length - 1;
          } else if (t62.parentNode != null) {
            e79(t62.parentNode);
          }
        };
        i45(t61);
        return u52;
      }
    }
  }
  function Y4(e78, t61) {
    var n91 = 0, r53;
    for (n91 = 0, r53 = e78.length; n91 < r53; n91++) {
      if (e78[n91][0] === t61) {
        break;
      }
    }
    if (n91 < e78.length) {
      e78.splice(n91, 1);
    }
  }
  var C4 = 1;
  var A6 = false;
  var j6 = false;
  function L4() {
    return A6 || "ontouchstart" in document.documentElement || navigator.maxTouchPoints != null && navigator.maxTouchPoints > 0;
  }
  function M5() {
    return j6 || "onmousedown" in document.documentElement;
  }
  var K3 = (x6 = {}, o(x6, t4, s8), o(x6, u11, p9), o(x6, m10, b8), x6);
  var O7 = "page";
  var U3 = "screen";
  var B5 = "client";
  function N4(e78, t61) {
    if (e78 == null)
      return { x: 0, y: 0 };
    var n91 = G4(e78), r53 = F5(n91, 0);
    return { x: r53[t61 + "X"], y: r53[t61 + "Y"] };
  }
  function q4(e78) {
    return N4(e78, O7);
  }
  function z5(e78) {
    return N4(e78, U3);
  }
  function D5(e78) {
    return N4(e78, B5);
  }
  function F5(e78, t61) {
    return e78.item ? e78.item(t61) : e78[t61];
  }
  function G4(e78) {
    return e78.touches && e78.touches.length > 0 ? e78.touches : e78.changedTouches && e78.changedTouches.length > 0 ? e78.changedTouches : e78.targetTouches && e78.targetTouches.length > 0 ? e78.targetTouches : [e78];
  }
  function I4(e78) {
    return G4(e78).length;
  }
  function Q3(e78, t61, n91, r53, a48) {
    W4(e78, t61, n91);
    r53.__tauid = n91.__tauid;
    if (e78.addEventListener) {
      e78.addEventListener(t61, n91, false, a48);
    } else if (e78.attachEvent) {
      var u52 = t61 + n91.__tauid;
      e78["e" + u52] = n91;
      e78[u52] = function() {
        e78["e" + u52] && e78["e" + u52](window.event);
      };
      e78.attachEvent("on" + t61, e78[u52]);
    }
  }
  function R3(e78, t61, n91) {
    var r53 = this;
    if (n91 == null)
      return;
    V5(e78, function(a48) {
      Z(a48, t61, n91);
      if (n91.__tauid != null) {
        if (a48.removeEventListener) {
          a48.removeEventListener(t61, n91, false);
          if (L4() && K3[t61])
            a48.removeEventListener(K3[t61], n91, false);
        } else if (r53.detachEvent) {
          var u52 = t61 + n91.__tauid;
          a48[u52] && a48.detachEvent("on" + t61, a48[u52]);
          a48[u52] = null;
          a48["e" + u52] = null;
        }
      }
      if (n91.__taTouchProxy) {
        R3(e78, n91.__taTouchProxy[1], n91.__taTouchProxy[0]);
      }
    });
  }
  function V5(e78, t61) {
    if (e78 == null)
      return;
    var n91 = typeof e78 === "string" ? document.querySelectorAll(e78) : Array.isArray(e78) ? e78 : [e78];
    for (var r53 = 0; r53 < n91.length; r53++) {
      t61(n91[r53]);
    }
  }
  function W4(e78, t61, n91) {
    var r53 = C4++;
    e78.__ta = e78.__ta || {};
    e78.__ta[t61] = e78.__ta[t61] || {};
    e78.__ta[t61][r53] = n91;
    n91.__tauid = r53;
    return r53;
  }
  function Z(e78, t61, n91) {
    e78.__ta && e78.__ta[t61] && delete e78.__ta[t61][n91.__tauid];
    if (n91.__taExtra) {
      for (var r53 = 0; r53 < n91.__taExtra.length; r53++) {
        R3(e78, n91.__taExtra[r53][0], n91.__taExtra[r53][1]);
      }
      n91.__taExtra.length = 0;
    }
    n91.__taUnstore && n91.__taUnstore();
  }
  var $2 = /:not\(([^)]+)\)/;
  function ee(e78, t61, n91, r53) {
    if (e78 == null) {
      return n91;
    } else {
      var u52 = e78.split(","), i45 = [], o42 = [];
      j2(u52, function(e79) {
        var t62 = e79.match($2);
        if (t62 != null) {
          o42.push(t62[1]);
        } else {
          i45.push(e79);
        }
      });
      if (o42.length > 0 && i45.length === 0) {
        i45.push(d9);
      }
      var l48 = function r54(a48) {
        r54.__tauid = n91.__tauid;
        var u53 = X4(a48);
        var l49 = false;
        var s40 = u53;
        var f45 = S6(a48, u53, t61, e78 != null);
        if (f45.end != -1) {
          for (var c47 = 0; !l49 && c47 < f45.end; c47++) {
            s40 = f45.path[c47];
            for (var _17 = 0; _17 < o42.length; _17++) {
              if (P3(s40, o42[_17], t61)) {
                return;
              }
            }
            for (var d32 = 0; !l49 && d32 < i45.length; d32++) {
              if (P3(s40, i45[d32], t61)) {
                n91.apply(s40, [a48, s40]);
                l49 = true;
                break;
              }
            }
          }
        }
      };
      te(n91, r53, l48);
      return l48;
    }
  }
  function te(e78, t61, n91) {
    e78.__taExtra = e78.__taExtra || [];
    e78.__taExtra.push([t61, n91]);
  }
  var ne = function e12(t61, n91, r53, a48, u52) {
    if (L4() && K3[n91]) {
      var i45 = ee(a48, t61, r53, K3[n91]);
      Q3(t61, K3[n91], i45, r53, u52);
    }
    if (n91 === r6 && t61.getAttribute(b5) == null) {
      t61.setAttribute(b5, "1");
    }
    Q3(t61, n91, ee(a48, t61, r53, n91), r53, u52);
  };
  var re = (H3 = {}, o(H3, l9, { touches: 1, taps: 1 }), o(H3, a9, { touches: 1, taps: 2 }), o(H3, o11, { touches: 2, taps: 1 }), H3);
  function ae(e78, t61, n91, r53) {
    for (var a48 in n91.__tamee[e78]) {
      if (n91.__tamee[e78].hasOwnProperty(a48)) {
        n91.__tamee[e78][a48].apply(r53, [t61]);
      }
    }
  }
  var ue = function() {
    function e78() {
      t(this, e78);
    }
    n(e78, null, [{ key: "generate", value: function e79(t61, n91) {
      return function(e80, a48, u52, i45) {
        if (a48 == o11 && M5())
          ne(e80, a48, u52, i45);
        else {
          if (e80.__taTapHandler == null) {
            var l48 = e80.__taTapHandler = { tap: [], dbltap: [], down: false, taps: 0, downSelectors: [] };
            var f45 = function r53(a49) {
              var u53 = X4(a49), o42 = S6(a49, u53, e80, i45 != null), s40 = false;
              for (var f46 = 0; f46 < o42.end; f46++) {
                if (s40)
                  return;
                u53 = o42.path[f46];
                for (var c48 = 0; c48 < l48.downSelectors.length; c48++) {
                  if (l48.downSelectors[c48] == null || P3(u53, l48.downSelectors[c48], e80)) {
                    l48.down = true;
                    setTimeout(_17, t61);
                    setTimeout(d32, n91);
                    s40 = true;
                    break;
                  }
                }
              }
            }, c47 = function t62(n92) {
              if (l48.down) {
                var r53 = X4(n92), a49, u53;
                l48.taps++;
                var i46 = I4(n92);
                for (var o42 in re) {
                  if (re.hasOwnProperty(o42)) {
                    var s40 = re[o42];
                    if (s40.touches === i46 && (s40.taps === 1 || s40.taps === l48.taps)) {
                      for (var f46 = 0; f46 < l48[o42].length; f46++) {
                        u53 = S6(n92, r53, e80, l48[o42][f46][1] != null);
                        for (var c48 = 0; c48 < u53.end; c48++) {
                          a49 = u53.path[c48];
                          if (l48[o42][f46][1] == null || P3(a49, l48[o42][f46][1], e80)) {
                            l48[o42][f46][0].apply(a49, [n92, a49]);
                            break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }, _17 = function e81() {
              l48.down = false;
            }, d32 = function e81() {
              l48.taps = 0;
            };
            e80.__taTapHandler.downHandler = f45;
            e80.__taTapHandler.upHandler = c47;
            ne(e80, t4, f45);
            ne(e80, u11, c47);
          }
          e80.__taTapHandler.downSelectors.push(i45);
          e80.__taTapHandler[a48].push([u52, i45]);
          u52.__taUnstore = function() {
            if (e80.__taTapHandler != null) {
              E(e80.__taTapHandler.downSelectors, function(e81) {
                return e81 === i45;
              });
              Y4(e80.__taTapHandler[a48], u52);
              if (e80.__taTapHandler.downSelectors.length === 0) {
                R3(e80, t4, e80.__taTapHandler.downHandler);
                R3(e80, u11, e80.__taTapHandler.upHandler);
                delete e80.__taTapHandler;
              }
            }
          };
        }
      };
    } }]);
    return e78;
  }();
  var ie = function() {
    function e78() {
      t(this, e78);
    }
    n(e78, null, [{ key: "generate", value: function e79() {
      var t61 = [];
      return function(e80, n91, r53, a48) {
        if (!e80.__tamee) {
          e80.__tamee = { over: false, mouseenter: [], mouseexit: [] };
          var u52 = function n92(r54) {
            var u53 = X4(r54);
            if (a48 == null && u53 == e80 && !e80.__tamee.over || P3(u53, a48, e80) && (u53.__tamee == null || !u53.__tamee.over)) {
              ae(v8, r54, e80, u53);
              u53.__tamee = u53.__tamee || {};
              u53.__tamee.over = true;
              t61.push(u53);
            }
          }, i45 = function n92(r54) {
            var a49 = X4(r54);
            for (var u53 = 0; u53 < t61.length; u53++) {
              if (a49 == t61[u53] && !P3(r54.relatedTarget || r54.toElement, "*", a49)) {
                a49.__tamee.over = false;
                t61.splice(u53, 1);
                ae(c8, r54, e80, a49);
              }
            }
          };
          Q3(e80, d8, ee(a48, e80, u52, d8), u52);
          Q3(e80, i8, ee(a48, e80, i45, i8), i45);
        }
        r53.__taUnstore = function() {
          delete e80.__tamee[n91][r53.__tauid];
        };
        W4(e80, n91, r53);
        e80.__tamee[n91][r53.__tauid] = r53;
      };
    } }]);
    return e78;
  }();
  var oe = function() {
    function r53(t61) {
      t(this, r53);
      o(this, "clickThreshold", void 0);
      o(this, "dblClickThreshold", void 0);
      o(this, "tapHandler", void 0);
      o(this, "mouseEnterExitHandler", void 0);
      t61 = t61 || {};
      this.clickThreshold = t61.clickThreshold || 250;
      this.dblClickThreshold = t61.dblClickThreshold || 450;
      this.mouseEnterExitHandler = ie.generate();
      this.tapHandler = ue.generate(this.clickThreshold, this.dblClickThreshold);
    }
    n(r53, [{ key: "_doBind", value: function e78(t61, n91, r54, a48, u52) {
      if (r54 == null)
        return;
      var i45 = t61;
      if (n91 === l9 || n91 === a9 || n91 === o11) {
        this.tapHandler(i45, n91, r54, a48, u52);
      } else if (n91 === v8 || n91 == c8)
        this.mouseEnterExitHandler(i45, n91, r54, a48, u52);
      else {
        ne(i45, n91, r54, a48, u52);
      }
    } }, { key: "on", value: function e78(t61, n91, r54, a48, u52) {
      var i45 = a48 == null ? null : r54, o42 = a48 == null ? r54 : a48;
      this._doBind(t61, n91, o42, i45, u52);
      return this;
    } }, { key: "off", value: function e78(t61, n91, r54) {
      R3(t61, n91, r54);
      return this;
    } }, { key: "trigger", value: function e78(t61, n91, r54, a48, u52) {
      var i45 = M5() && (typeof MouseEvent === "undefined" || r54 == null || r54.constructor === MouseEvent);
      var o42 = L4() && !M5() && K3[n91] ? K3[n91] : n91, l48 = !(L4() && !M5() && K3[n91]);
      var s40 = q4(r54), f45 = z5(r54), c47 = D5(r54);
      V5(t61, function(e79) {
        var t62;
        r54 = r54 || { screenX: f45.x, screenY: f45.y, clientX: c47.x, clientY: c47.y };
        var _17 = function e80(t63) {
          if (a48) {
            t63.payload = a48;
          }
        };
        var d32 = { TouchEvent: function t63(n92) {
          var r55 = b9(e79, s40.x, s40.y, f45.x, f45.y, c47.x, c47.y), a49 = n92.initTouchEvent || n92.initEvent;
          a49(o42, true, true, window, null, f45.x, f45.y, c47.x, c47.y, false, false, false, false, r55, r55, r55, 1, 0);
        }, MouseEvents: function t63(n92) {
          n92.initMouseEvent(o42, true, true, window, u52 == null ? 1 : u52, f45.x, f45.y, c47.x, c47.y, r54.ctrlKey === true, r54.altKey === true, r54.shiftKey === true, r54.metaKey === true, 1, e79);
        } };
        var h35 = !l48 && !i45 && L4() && K3[n91], v41 = h35 ? "TouchEvent" : "MouseEvents";
        t62 = document.createEvent(v41);
        d32[v41](t62);
        _17(t62);
        e79.dispatchEvent(t62);
      });
      return this;
    } }]);
    return r53;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui/pinch-listener.js
  var a11 = "pointerdown";
  var o12 = "pointermove";
  var s9 = "pointerup";
  var u12 = "touchstart";
  var c9 = "touchmove";
  var h10 = "touchend";
  function d10(e78, i45, n91, t61) {
    return Math.sqrt(Math.pow(n91 - e78, 2) + Math.pow(t61 - i45, 2));
  }
  var v10 = function() {
    function v41(e78) {
      var f45 = this;
      t(this, v41);
      o(this, "isPointerDevice", void 0);
      o(this, "isTouchDevice", void 0);
      o(this, "center", void 0);
      o(this, "radius", void 0);
      o(this, "startRadius", void 0);
      o(this, "onPinchStart", void 0);
      o(this, "onPinch", void 0);
      o(this, "onPinchEnd", void 0);
      o(this, "eventManager", void 0);
      o(this, "listenerTypes", { pointer: function e79(i45) {
        var n91 = {}, t61 = [], r53 = 0, u52 = false;
        var c47 = function e80() {
          if (r53 === 2) {
            f45.center = { x: (t61[1].p[0] + t61[0].p[0]) / 2, y: (t61[1].p[1] + t61[0].p[1]) / 2 };
            f45.radius = d10(t61[1].p[0], t61[1].p[1], t61[0].p[0], t61[0].p[1]);
          }
        };
        var h35 = function e80(i46) {
          if (r53 >= 2 || u52)
            return;
          t61[r53] = { e: i46, p: [i46.pageX, i46.pageY] };
          n91["" + i46.pointerId] = r53;
          r53++;
          c47();
          if (r53 === 2) {
            f45.startRadius = f45.radius;
            f45._fire(f45.onPinchStart);
          }
        };
        var v42 = function e80(i46) {
          var t62 = n91["" + i46.pointerId];
          if (t62 != null) {
            delete n91["" + i46.pointerId];
            r53--;
            u52 = r53 !== 0;
            f45._fireEnd();
          }
        };
        var p49 = function e80(i46) {
          if (u52 || r53 !== 2)
            return;
          var a48 = n91[i46.pointerId];
          if (a48 != null) {
            t61[a48].p = [i46.pageX, i46.pageY];
            c47();
            f45._fire(f45.onPinch);
          }
        };
        f45.bind(i45.el, a11, h35, { passive: false });
        f45.bind(document, s9, v42, { passive: false });
        f45.bind(document, o12, p49, { passive: false });
      }, touch: function e79(i45) {
        var n91 = function e80(i46) {
          return i46.touches || [];
        };
        var t61 = function e80(i46, n92) {
          return i46.item ? i46.item(n92) : i46[n92];
        };
        var a48 = function e80(i46) {
          var n92 = t61(i46, 0), r53 = t61(i46, 1);
          return d10(n92.pageX, n92.pageY, r53.pageX, r53.pageY);
        };
        var o42 = function e80(i46) {
          var n92 = t61(i46, 0), r53 = t61(i46, 1);
          return { x: (n92.pageX + r53.pageX) / 2, y: (n92.pageY + r53.pageY) / 2 };
        };
        var s40 = false;
        var v42 = function e80(t62) {
          var u52 = n91(t62);
          if (u52.length === 2 && i45.enableWheelZoom !== false) {
            f45.center = o42(u52);
            f45.radius = f45.startRadius = a48(u52);
            s40 = true;
            f45.bind(document, c9, l48);
            f45.bind(document, h10, p49);
            i5(t62);
            f45._fire(f45.onPinchStart);
          }
        };
        var p49 = function e80(i46) {
          s40 = false;
          i5(i46);
          f45.unbind(document, c9, l48);
          f45.unbind(document, h10, e80);
          f45._fireEnd();
        };
        var l48 = function e80(i46) {
          if (s40) {
            var t62 = n91(i46);
            if (t62.length === 2) {
              i5(i46);
              f45.radius = a48(t62);
              f45.center = o42(t62);
              f45._fire(f45.onPinch);
            }
          }
        };
        f45.bind(i45.el, u12, v42);
      } });
      this.eventManager = new oe();
      this.isPointerDevice = "onpointerdown" in document.documentElement;
      this.isTouchDevice = "ontouchstart" in document.documentElement;
      this.center = { x: 0, y: 0 };
      this.radius = 0;
      this.startRadius = 0;
      this.onPinch = e78.onPinch;
      this.onPinchStart = e78.onPinchStart;
      this.onPinchEnd = e78.onPinchEnd;
      if (this.isPointerDevice) {
        this.listenerTypes.pointer(e78);
      } else if (this.isTouchDevice) {
        this.listenerTypes.touch(e78);
      }
    }
    n(v41, [{ key: "_fire", value: function e78(i45) {
      i45(this.center, this.startRadius, this.radius, this.radius / this.startRadius);
    } }, { key: "_fireEnd", value: function e78() {
      this.onPinchEnd();
    } }, { key: "bind", value: function e78(i45, n91, t61, r53) {
      this.eventManager.on(i45, n91, t61);
    } }, { key: "unbind", value: function e78(i45, n91, t61) {
      this.eventManager.off(i45, n91, t61);
    } }, { key: "destroy", value: function e78() {
    } }]);
    return v41;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/util/geom.js
  var n7 = [null, [1, -1], [1, 1], [-1, 1], [-1, -1]];
  var r8 = [null, [-1, -1], [-1, 1], [1, 1], [1, -1]];
  var x7 = 2 * Math.PI;
  function y8(t61, n91) {
    return { x: t61.x + n91.x, y: t61.y + n91.y };
  }
  function a12(t61, n91) {
    return { x: t61.x - n91.x, y: t61.y - n91.y };
  }
  function h11(t61, n91) {
    if (n91.x === t61.x)
      return n91.y > t61.y ? Infinity : -Infinity;
    else if (n91.y === t61.y)
      return n91.x > t61.x ? 0 : -0;
    else
      return (n91.y - t61.y) / (n91.x - t61.x);
  }
  function u13(t61, n91) {
    return -1 / h11(t61, n91);
  }
  function o13(t61, n91) {
    return Math.sqrt(Math.pow(n91.y - t61.y, 2) + Math.pow(n91.x - t61.x, 2));
  }
  function M6(t61, n91) {
    if (n91.x > t61.x) {
      return n91.y > t61.y ? 2 : 1;
    } else if (n91.x == t61.x) {
      return n91.y > t61.y ? 2 : 1;
    } else {
      return n91.y > t61.y ? 3 : 4;
    }
  }
  function e13(t61, n91) {
    var r53 = h11(t61, n91), x27 = Math.atan(r53), y34 = M6(t61, n91);
    if (y34 == 4 || y34 == 3)
      x27 += Math.PI;
    if (x27 < 0)
      x27 += 2 * Math.PI;
    return x27;
  }
  function i9(t61, n91) {
    var r53 = t61.x, x27 = t61.x + t61.w, y34 = t61.y, a48 = t61.y + t61.h, h35 = n91.x, u52 = n91.x + n91.w, o42 = n91.y, M20 = n91.y + n91.h;
    return r53 <= h35 && h35 <= x27 && y34 <= o42 && o42 <= a48 || r53 <= u52 && u52 <= x27 && y34 <= o42 && o42 <= a48 || r53 <= h35 && h35 <= x27 && y34 <= M20 && M20 <= a48 || r53 <= u52 && h35 <= x27 && y34 <= M20 && M20 <= a48 || h35 <= r53 && r53 <= u52 && o42 <= y34 && y34 <= M20 || h35 <= x27 && x27 <= u52 && o42 <= y34 && y34 <= M20 || h35 <= r53 && r53 <= u52 && o42 <= a48 && a48 <= M20 || h35 <= x27 && r53 <= u52 && o42 <= a48 && a48 <= M20;
  }
  function f12(t61) {
    var n91 = t61[1].y - t61[0].y;
    var r53 = t61[0].x - t61[1].x;
    return { A: n91, B: r53, C: l10(n91 * t61[0].x + r53 * t61[0].y) };
  }
  function l10(t61, n91) {
    n91 = n91 == null ? 3 : n91;
    return Math.floor(t61 * Math.pow(10, n91)) / Math.pow(10, n91);
  }
  function s10(t61, n91) {
    var r53 = f12(t61), x27 = f12(n91), y34 = r53.A * x27.B - x27.A * r53.B;
    if (y34 == 0) {
      return null;
    } else {
      var a48 = { x: Math.round((x27.B * r53.C - r53.B * x27.C) / y34), y: Math.round((r53.A * x27.C - x27.A * r53.C) / y34) }, h35 = Math.floor(Math.min(t61[0].x, t61[1].x)), u52 = Math.round(Math.max(t61[0].x, t61[1].x)), o42 = Math.floor(Math.min(t61[0].y, t61[1].y)), M20 = Math.round(Math.max(t61[0].y, t61[1].y)), e78 = Math.floor(Math.min(n91[0].x, n91[1].x)), i45 = Math.round(Math.max(n91[0].x, n91[1].x)), l48 = Math.floor(Math.min(n91[0].y, n91[1].y)), s40 = Math.round(Math.max(n91[0].y, n91[1].y));
      if (a48.x >= h35 && a48.x <= u52 && a48.y >= o42 && a48.y <= M20 && a48.x >= e78 && a48.x <= i45 && a48.y >= l48 && a48.y <= s40) {
        return a48;
      } else {
        return null;
      }
    }
  }
  function c10(n91, r53) {
    var x27 = [], y34 = [[{ x: r53.x, y: r53.y }, { x: r53.x + r53.w, y: r53.y }], [{ x: r53.x + r53.w, y: r53.y }, { x: r53.x + r53.w, y: r53.y + r53.h }], [{ x: r53.x, y: r53.y }, { x: r53.x, y: r53.y + r53.h }], [{ x: r53.x, y: r53.y + r53.h }, { x: r53.x + r53.w, y: r53.y + r53.h }]];
    j2(y34, function(t61) {
      var r54 = s10(n91, t61);
      if (r54 != null) {
        x27.push(r54);
      }
    });
    return x27;
  }
  function w8(t61, n91, r53) {
    var x27 = t61.x, y34 = t61.x + t61.w, a48 = t61.y, h35 = t61.y + t61.h, u52 = n91.x, o42 = n91.x + n91.w, M20 = n91.y, e78 = n91.y + n91.h, i45 = function t62(n92, x28, y35, a49) {
      return r53 ? n92 <= x28 && y35 >= a49 : n92 < x28 && y35 > a49;
    };
    return i45(x27, u52, y34, o42) && i45(a48, M20, h35, e78);
  }
  function d11(t61, x27, y34) {
    var a48 = h11(t61, x27), u52 = M6(t61, x27), o42 = y34 > 0 ? n7[u52] : r8[u52], e78 = Math.atan(a48), i45 = Math.abs(y34 * Math.sin(e78)) * o42[1], f45 = Math.abs(y34 * Math.cos(e78)) * o42[0];
    return { x: t61.x + f45, y: t61.y + i45 };
  }
  function m11(t61, n91, r53) {
    var x27 = h11(t61, n91), y34 = Math.atan(-1 / x27), a48 = r53 / 2 * Math.sin(y34), u52 = r53 / 2 * Math.cos(y34);
    return [{ x: n91.x + u52, y: n91.y + a48 }, { x: n91.x - u52, y: n91.y - a48 }];
  }
  function p10(t61, n91, r53, x27) {
    r53 = r53 == null ? n91.thresholdX == null ? n91.w / 2 : n91.thresholdX : r53;
    x27 = x27 == null ? n91.thresholdY == null ? n91.h / 2 : n91.thresholdY : x27;
    var y34 = Math.floor(t61.x / n91.w), a48 = n91.w * y34, h35 = a48 + n91.w, u52 = Math.abs(t61.x - a48) <= r53 ? a48 : Math.abs(h35 - t61.x) <= r53 ? h35 : t61.x;
    var o42 = Math.floor(t61.y / n91.h), M20 = n91.h * o42, e78 = M20 + n91.h, i45 = Math.abs(t61.y - M20) <= x27 ? M20 : Math.abs(e78 - t61.y) <= x27 ? e78 : t61.y;
    return { x: u52, y: i45 };
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui/pan-zoom.js
  var _3 = "transformOrigin";
  var k6 = "transform";
  var M7 = "translateX";
  var b10 = "translateY";
  var E5 = "scale";
  var C5 = "px";
  var P4 = "width";
  var T3 = "height";
  var Z2 = "jtk-pan-zoom";
  var A7 = "jtk-pan-zoom-canvas";
  var O8 = "left";
  var S7 = "right";
  var R4 = "top";
  var B6 = "bottom";
  var W5 = "center";
  function N5() {
  }
  function F6(t61) {
    var e78 = t61, n91 = 0, o42 = 0;
    while (e78 != null) {
      if (!isNaN(e78.scrollLeft)) {
        n91 += e78.scrollLeft;
      }
      if (!isNaN(e78.scrollTop)) {
        o42 += e78.scrollTop;
      }
      e78 = e78.parentNode;
    }
    return { x: n91, y: o42 };
  }
  var L5 = function() {
    function o42(t61) {
      var r53 = this;
      t(this, o42);
      o(this, "canvasElement", void 0);
      o(this, "viewportElement", void 0);
      o(this, "_panRepeatTimer", void 0);
      o(this, "_doWheelZoom", void 0);
      o(this, "eventManager", void 0);
      o(this, "pinchListener", void 0);
      o(this, "position", { x: 0, y: 0 });
      o(this, "zoom", void 0);
      o(this, "transformOrigin", { x: 0, y: 0 });
      o(this, "_currentCompoundZoom", void 0);
      o(this, "panning", false);
      o(this, "_panFilterFunction", void 0);
      o(this, "pinchZooming", false);
      o(this, "zooming", false);
      o(this, "zoomingWithWheel", false);
      o(this, "downAt", void 0);
      o(this, "_viewportElementSize", void 0);
      o(this, "_canvasElementSize", void 0);
      o(this, "zoomRange", void 0);
      o(this, "zoomAtZoomStart", void 0);
      o(this, "maximumZoomTravel", 150);
      o(this, "distanceAtZoomStart", void 0);
      o(this, "lastDistance", void 0);
      o(this, "canvasAtPanStart", void 0);
      o(this, "lastMouseX", -1);
      o(this, "lastMouseY", -1);
      o(this, "lastMovedAt", null);
      o(this, "lastVelocity", 0);
      o(this, "lastAcceleration", 0);
      o(this, "onZoom", void 0);
      o(this, "onMaybeZoom", void 0);
      o(this, "onPan", void 0);
      o(this, "onMouseDown", void 0);
      o(this, "onMouseUp", void 0);
      o(this, "onMouseMove", void 0);
      o(this, "onSetTransformOrigin", void 0);
      o(this, "clamp", void 0);
      o(this, "clampZoom", void 0);
      o(this, "enablePan", void 0);
      o(this, "directRender", void 0);
      o(this, "enableWheelZoom", void 0);
      o(this, "enableAnimation", void 0);
      o(this, "panWithMetaKey", void 0);
      o(this, "wheelFilter", void 0);
      o(this, "wheelZoomRequiresMetaKey", void 0);
      o(this, "wheelDirection", void 0);
      o(this, "wheelSensitivity", void 0);
      o(this, "wheelPan", void 0);
      o(this, "wheelPanAxis", void 0);
      o(this, "background", void 0);
      o(this, "fixedLayer", void 0);
      o(this, "_mouseMove", void 0);
      o(this, "_mouseMoveEnd", void 0);
      o(this, "_mouseMoveReset", void 0);
      o(this, "_mouseDown", void 0);
      o(this, "_contextMenu", void 0);
      o(this, "viewport", void 0);
      o(this, "consumeRightClick", void 0);
      o(this, "smartMinimumZoom", void 0);
      o(this, "_renderingSuspended", void 0);
      o(this, "idFunction", void 0);
      o(this, "getOffset", void 0);
      o(this, "getOffsetRelativeToRoot", void 0);
      o(this, "getSize", void 0);
      o(this, "enabled", void 0);
      o(this, "clampToBackground", void 0);
      o(this, "clampToBackgroundExtents", void 0);
      o(this, "filter", void 0);
      o(this, "_suspendMap", {});
      o(this, "handlers", o({ start: function t62(e78, n91) {
        if (r53.pinchZooming)
          return;
        var o43 = e78.srcElement || e78.target;
        if (r53.enabled && (o43 === r53.canvasElement || o43 === r53.viewportElement || o43._jtkDecoration || r53.background && r53.background.owns(o43) || r53.filter(o43, e78) === true)) {
          r53.zoomingWithWheel = false;
          r53.lastMouseX = -1;
          r53.lastMouseY = -1;
          if (e78.which === 3 && r53.enableWheelZoom !== false && (e78.mozInputSource == null || e78.mozInputSource === 1)) {
            r53.zooming = true;
            r53.downAt = q4(e78);
            r53._currentCompoundZoom = r53.getCompoundZoom();
            r53._viewportElementSize = r53._$_getViewportSize();
            r53._canvasElementSize = r53._$_getCanvasSize();
            r53._setTransformOriginToEvent(e78);
            r53.canvasAtPanStart = u2({}, r53.position);
            r53.zoomAtZoomStart = r53.zoom;
          } else if (n91.length <= 1) {
            if (r53._canStartPanning(e78)) {
              r53._viewportElementSize = r53._$_getViewportSize();
              r53._canvasElementSize = r53._$_getCanvasSize();
              r53.panning = true;
              r53._currentCompoundZoom = r53.getCompoundZoom();
              r53.downAt = q4(e78);
              r53.canvasAtPanStart = u2({}, r53.position);
              i5(e78);
            }
          }
        }
        r53.onMouseDown(e78, r53);
      }, move: function t62(e78, n91) {
        var o43, i45, a48;
        r53.zoomingWithWheel = false;
        if (r53.pinchZooming) {
          return;
        }
        if (r53.zooming) {
          a48 = q4(e78);
          o43 = a48.x - r53.downAt.x;
          i45 = a48.y - r53.downAt.y;
          r53._zoomBy(o43, i45, e78);
        } else if (r53.panning && r53.enablePan && r53.downAt != null) {
          i5(e78);
          a48 = q4(e78);
          o43 = (a48.x - r53.downAt.x) / r53._currentCompoundZoom;
          i45 = (a48.y - r53.downAt.y) / r53._currentCompoundZoom;
          var s40 = r53._setCanvasPosition({ x: r53.canvasAtPanStart.x + o43, y: r53.canvasAtPanStart.y + i45, animate: false });
          r53.onPan(s40.x, s40.y, r53.zoom, r53.zoom, e78);
          r53.background && r53.background.pan();
          r53.fixedLayer.pan();
          i5(e78);
        }
        r53.onMouseMove(e78, r53);
      }, end: function t62(e78, n91) {
        if (r53.pinchZooming) {
          return;
        }
        r53.zooming = false;
        r53.downAt = null;
        r53.panning = false;
        r53._currentCompoundZoom = 1;
        r53._viewportElementSize = null;
        r53._canvasElementSize = null;
        r53.zoomingWithWheel = false;
        r53.eventManager.off(document, m10, r53._mouseMove);
        r53.eventManager.off(document, u11, r53._mouseMoveEnd);
        r53.eventManager.on(document, m10, r53._mouseMoveReset);
        r53.onMouseUp(e78, r53);
      } }, o11, function(t62) {
      }));
      t61.events = t61.events || {};
      this.zoom = t61.zoom || 1;
      this.zoomRange = t61.zoomRange || [0.05, 3];
      this.fixedLayer = new p8(this);
      this.eventManager = new oe();
      this.viewport = t61.viewport;
      this.canvasElement = t61.canvasElement;
      this._setCanvasPosition({ x: 0, y: 0, animate: false });
      this.viewportElement = t61.viewportElement;
      h5(this.viewportElement, Z2);
      h5(this.canvasElement, A7);
      this.idFunction = t61.idFunction;
      this.getOffset = t61.getOffset;
      this.getOffsetRelativeToRoot = t61.getOffsetRelativeToRoot;
      this.getSize = t61.getSize;
      this.onZoom = t61.events.zoom || N5;
      this.onMaybeZoom = t61.events.maybeZoom || function() {
        return true;
      };
      this.onPan = t61.events.pan || N5;
      this.onMouseDown = t61.events.mousedown || N5;
      this.onMouseUp = t61.events.mouseup || N5;
      this.onMouseMove = t61.events.mousemove || N5;
      this.onSetTransformOrigin = t61.events.transformOrigin || N5;
      this.clamp = !(t61.clamp === false);
      this.clampZoom = t61.clampZoom !== false;
      this.panWithMetaKey = t61.panWithMetaKey === true;
      this.enablePan = t61.enablePan !== false;
      this._panFilterFunction = t61.panFilter && typeof t61.panFilter === "function" ? t61.panFilter : null;
      this.directRender = t61.directRender === true;
      this.enableAnimation = t61.enableAnimation !== false;
      var v41 = t61.wheel || {};
      this.enableWheelZoom = v41.zoom !== false;
      this.wheelFilter = v41.filter || function() {
        return true;
      };
      this.wheelZoomRequiresMetaKey = v41.useMetaKey === true;
      this.wheelDirection = v41.reverse === true ? -1 : 1;
      this.wheelSensitivity = this.wheelDirection * (v41.sensitivity || 10);
      this.wheelPan = v41.pan === true;
      this.wheelPanAxis = v41.axis || o10.both;
      this.consumeRightClick = t61.consumeRightClick !== false;
      this.smartMinimumZoom = t61.smartMinimumZoom;
      this._renderingSuspended = false;
      this._mouseMove = function(t62) {
        this._call("move", t62);
      }.bind(this);
      this._mouseMoveEnd = function(t62) {
        this._call("end", t62);
      }.bind(this);
      this._mouseMoveReset = function(t62) {
        this.zoomingWithWheel = false;
      }.bind(this);
      this.enabled = !(t61.enabled === false);
      this.clampToBackground = t61.clampToBackground;
      this.clampToBackgroundExtents = t61.clampToBackgroundExtents;
      this.filter = t61.filter || function() {
        return false;
      };
      if (this.enableWheelZoom || this.wheelPan) {
        this._doWheelZoom = function(t62, e78, n91, o43) {
          return r53.wheelPanOrZoom(t62, e78, n91, o43);
        };
        O3(this.viewportElement, this._doWheelZoom, true, this.wheelZoomRequiresMetaKey);
      }
      this.pinchListener = new v10({ el: this.viewportElement, enableWheelZoom: this.enableWheelZoom, onPinch: function t62(e78, n91, o43, i45) {
        r53._zoom(i45 * r53.zoomAtZoomStart);
        var a48 = e78.x - r53.downAt.x, s40 = e78.y - r53.downAt.y;
        r53._setCanvasPosition({ x: r53.canvasAtPanStart.x + a48, y: r53.canvasAtPanStart.y + s40, animate: false });
      }, onPinchStart: function t62(e78, n91) {
        r53.pinchZooming = true;
        r53.downAt = e78;
        r53.distanceAtZoomStart = r53.lastDistance = n91;
        r53.zoomAtZoomStart = r53.zoom;
        r53._setTransformOriginToPageLocation(r53.downAt.x, r53.downAt.y);
        r53.canvasAtPanStart = u2({}, r53.position);
      }, onPinchEnd: function t62() {
        r53.pinchZooming = false;
        r53.downAt = null;
      } });
      this._zoom(this.zoom, null, false, false, true);
      this._writeTransformOrigin();
      this.background = new I5();
      if (t61.background) {
        this.background.addBackground(t61.background);
      }
      this._mouseDown = function(t62) {
        r53.start(t62);
      };
      this.eventManager.on(this.viewportElement, t4, this._mouseDown);
      this.eventManager.on(document, m10, this._mouseMoveReset);
      this._contextMenu = function(t62) {
        r53._call(o11, t62);
      };
      this.eventManager.on(this.viewportElement, o11, this._contextMenu);
    }
    n(o42, [{ key: "_$_getViewportSize", value: function t61() {
      return this.getSize(this.viewportElement);
    } }, { key: "_$_getCanvasSize", value: function t61() {
      return this.getSize(this.canvasElement);
    } }, { key: "_animateToCanvasPosition", value: function t61(e78, n91, o43, i45) {
      var a48 = this;
      i45 = i45 || 150;
      var s40 = this.position, r53 = s40.x, h35 = s40.y;
      var l48 = this.zoom;
      var u52 = e78 - l48, m44 = n91 - r53, v41 = o43 - h35;
      var c47 = null;
      var f45 = function t62(s41) {
        if (!c47) {
          c47 = s41;
        }
        var f46 = s41 - c47;
        var d32 = f46 / i45;
        var p49 = l48 + d32 * u52, y34 = r53 + d32 * m44, g31 = h35 + d32 * v41;
        a48.canvasElement.style.transform = "scale(".concat(p49, ") translateX(").concat(y34 / p49, "px) translateY(").concat(g31 / p49, "px)");
        if (f46 < i45) {
          requestAnimationFrame(t62);
        } else {
          a48.zoom = e78;
          a48.position = { x: n91, y: o43 };
          a48.onPan(n91, o43, a48.zoom, a48.zoom);
        }
      };
      requestAnimationFrame(f45);
    } }, { key: "_setCanvasPosition", value: function t61(e78) {
      var n91 = this._clamp(e78.x, e78.y);
      if (this.enableAnimation && e78.animate) {
        if (e78.zoom != null) {
          var o43 = this._constrainZoom(e78.zoom);
          this._animateToCanvasPosition(o43, n91.x, n91.y, e78.animationDuration);
        } else {
          this.position = n91;
          this._animateTransform(null, e78.onComplete);
        }
      } else {
        this.position = n91;
        this._writeTransform();
        e78.onComplete && e78.onComplete(this.position);
      }
      return this.position;
    } }, { key: "_moveCanvas", value: function t61(e78, n91, o43, i45, a48) {
      var s40 = this.position;
      return this._setCanvasPosition({ x: s40.x + e78, y: s40.y + n91, animate: o43, onComplete: i45, animationDuration: a48 });
    } }, { key: "_wheelPan", value: function t61(e78, n91, o43, i45) {
      if (!i45) {
        this.pan(-n91 * 100, -o43 * 100);
      }
    } }, { key: "_wheelZoom", value: function t61(e78, n91, o43, i45) {
      this.zoomAtZoomStart = this.zoom;
      if (!this.zoomingWithWheel) {
        this._setTransformOriginToEvent(e78);
        this.zoomingWithWheel = true;
      }
      this._zoomBy(0, e78.normalizedWheelDelta * this.wheelSensitivity, e78, true);
    } }, { key: "wheelPanOrZoom", value: function t61(e78, n91, o43, a48) {
      if (this.wheelFilter(e78)) {
        e78.preventDefault && e78.preventDefault();
        e78.stopPropagation && e78.stopPropagation();
        if (!this.wheelPan || a48) {
          this._wheelZoom(e78, n91, o43, a48);
        } else {
          n91 = this.wheelPanAxis === o10.both || this.wheelPanAxis === o10.x ? n91 : 0;
          o43 = this.wheelPanAxis === o10.both || this.wheelPanAxis === o10.y ? o43 : 0;
          this._wheelPan(e78, n91, o43, a48);
        }
      }
    } }, { key: "setSuspendRendering", value: function t61(e78) {
      this._renderingSuspended = e78;
    } }, { key: "_cssAnimation", value: function t61(e78, n91, o43) {
      var i45 = this;
      this.canvasElement.animate(e78, { duration: n91 || 250 }).finished.then(function() {
        for (var t62 in e78) {
          i45.canvasElement.style[t62] = e78[t62];
        }
        if (o43) {
          o43(i45.position);
        }
      });
    } }, { key: "_constructTransformProperty", value: function t61() {
      return "".concat(E5, "(").concat(this.zoom, ") ").concat(M7, "(").concat(this.position.x / this.zoom).concat(C5, ") ").concat(b10, "(").concat(this.position.y / this.zoom).concat(C5, ")");
    } }, { key: "_writeTransform", value: function t61() {
      this.canvasElement.style[k6] = this._constructTransformProperty();
    } }, { key: "_animateTransform", value: function t61(e78, o43) {
      if (this.canvasElement.animate != null) {
        var i45 = o({}, k6, this._constructTransformProperty());
        this._cssAnimation(i45, e78, o43);
      } else {
        this._writeTransform();
      }
    } }, { key: "_constructTransformOriginProperty", value: function t61() {
      return this.transformOrigin.x + "% " + this.transformOrigin.y + "%";
    } }, { key: "_writeTransformOrigin", value: function t61() {
      this.canvasElement.style[_3] = this._constructTransformOriginProperty();
    } }, { key: "_originHelper", value: function t61(e78, n91, o43) {
      var i45 = o43 ? { x: e78, y: n91 } : this.fromPageLocation(e78, n91), a48 = this._canvasElementSize || this._$_getCanvasSize();
      return { w: a48.w, h: a48.h, xy: i45, xScale: i45.x / a48.w, yScale: i45.y / a48.h, o: { x: i45.x / a48.w * 100, y: i45.y / a48.h * 100 } };
    } }, { key: "_setTransformHelper", value: function t61(e78, n91, o43) {
      var i45, a48, s40, r53, h35 = this.transformOrigin.x / 100 * n91, l48 = this.transformOrigin.y / 100 * o43;
      i45 = -(h35 * (1 - this.zoom));
      a48 = -(l48 * (1 - this.zoom));
      this.transformOrigin = e78;
      this._writeTransformOrigin();
      h35 = this.transformOrigin.x / 100 * n91;
      l48 = this.transformOrigin.y / 100 * o43;
      s40 = -(h35 * (1 - this.zoom));
      r53 = -(l48 * (1 - this.zoom));
      var u52 = this._moveCanvas(s40 - i45, r53 - a48, false);
      this.onSetTransformOrigin && this.onSetTransformOrigin(this.transformOrigin, u52);
    } }, { key: "_setTransformOriginToPageLocation", value: function t61(e78, n91) {
      var o43 = this._originHelper(e78, n91, false);
      this._setTransformHelper(o43.o, o43.w, o43.h);
    } }, { key: "_setTransformOriginToEvent", value: function t61(e78) {
      var n91 = q4(e78);
      this._setTransformOriginToPageLocation(n91.x, n91.y);
    } }, { key: "_setTransformOriginToCanvasPoint", value: function t61(e78, n91) {
      var o43 = this._originHelper(e78, n91, true);
      this._setTransformHelper(o43.o, o43.w, o43.h);
    } }, { key: "_constrainZoom", value: function t61(e78) {
      var n91 = this.zoomRange[0];
      if (this.smartMinimumZoom) {
        n91 = 0.5;
        var o43 = this.getBoundsInfo().z, i45 = e78 / o43;
        if (i45 < n91)
          e78 = o43 * n91;
      } else {
        if (e78 < n91) {
          e78 = n91;
        }
      }
      if (e78 > this.zoomRange[1]) {
        e78 = this.zoomRange[1];
      }
      return e78;
    } }, { key: "_zoom", value: function t61(e78, n91, o43, i45, a48) {
      var s40 = this;
      if (this.directRender) {
        return;
      }
      if (e78 == null || isNaN(e78) || e78 < 0)
        return;
      e78 = this._constrainZoom(e78);
      var r53 = this.zoom;
      var h35 = function t62(i46) {
        if (!a48) {
          s40.onZoom(0, 0, e78, r53, n91, o43);
        }
        if (s40.background != null) {
          s40.background.setZoom(e78);
        }
        s40.fixedLayer.pan();
        if (s40.clampZoom) {
          var h36 = s40.position;
          var l49 = s40._clamp(h36.x, h36.y);
          if (l49.x != h36.x || l49.y != h36.y) {
            s40._setCanvasPosition({ x: l49.x, y: l49.y, animate: false });
          }
        }
      };
      if (i45) {
        var l48 = this.getViewportCenter();
        this._setTransformOriginToCanvasPoint(l48.x, l48.y);
        this.zoom = e78;
        this._animateTransform(null, h35);
      } else {
        this.zoom = e78;
        this._writeTransform();
        h35(this.position);
      }
      return this.zoom;
    } }, { key: "_zoomBy", value: function t61(e78, n91, o43, i45) {
      if (n91 < -this.maximumZoomTravel)
        n91 = -this.maximumZoomTravel;
      if (n91 > this.maximumZoomTravel)
        n91 = this.maximumZoomTravel;
      this._zoomWithMappedRange(this.zoomAtZoomStart, n91, -this.maximumZoomTravel, this.maximumZoomTravel, o43, i45);
    } }, { key: "_zoomWithMappedRange", value: function t61(e78, n91, o43, i45, a48, s40) {
      var r53 = n91 / (n91 >= 0 ? i45 : o43), h35 = n91 >= 0 ? 1 : 0, l48 = e78 + r53 * (this.zoomRange[h35] - e78);
      this._zoom(l48, a48, s40);
    } }, { key: "_clamp", value: function t61(e78, n91, o43) {
      if (!this.clamp && !this.clampToBackground && !this.clampToBackgroundExtents) {
        return { x: e78, y: n91 };
      } else {
        var i45 = this._viewportElementSize || this._$_getViewportSize();
        var a48 = this._apparentOffset(), s40 = e78, r53 = n91, h35 = this.clamp ? this.getBoundsInfo() : { x: 0, y: 0, w: 0, h: 0, vw: i45.w, vh: i45.h, padding: o43, z: 1 };
        o43 = (o43 || 20) * this.zoom;
        if ((this.clampToBackground || this.clampToBackgroundExtents) && this.background != null) {
          var l48 = this.background.getWidth(), u52 = this.background.getHeight(), m44 = Math.max(h35.x + h35.w, l48), v41 = Math.max(h35.y + h35.h, u52);
          h35.w = m44 - h35.w;
          h35.h = v41 - h35.h;
          var c47 = h35.vw / h35.w, f45 = h35.vh / h35.h;
          h35.z = Math.min(c47, f45);
          if (this.clampToBackgroundExtents)
            o43 = Math.max(h35.vw, h35.vh);
        }
        var d32 = [h35.x + h35.w, h35.y + h35.h];
        if (this.background) {
          d32[0] = Math.max(d32[0], this.background.getWidth());
          d32[1] = Math.max(d32[1], this.background.getHeight());
        }
        var p49 = e78 + a48.x + d32[0] * this.zoom - o43, y34 = n91 + a48.y + d32[1] * this.zoom - o43, g31 = e78 + a48.x + h35.x * this.zoom + o43, x27 = n91 + a48.y + h35.y * this.zoom + o43;
        if (p49 < 0)
          s40 -= p49;
        if (g31 > h35.vw)
          s40 -= g31 - h35.vw;
        if (y34 < 0)
          r53 -= y34;
        if (x27 > h35.vh)
          r53 -= x27 - h35.vh;
        return { x: s40, y: r53 };
      }
    } }, { key: "_getPosition", value: function t61(e78) {
      var n91 = e78;
      return { x: parseInt(n91.style.left, 10) || 0, y: parseInt(n91.style.top, 10) || 0 };
    } }, { key: "_apparentOffset", value: function t61() {
      var e78 = this._canvasElementSize || this._$_getCanvasSize(), n91 = this.transformOrigin.x / 100 * e78.w, o43 = this.transformOrigin.y / 100 * e78.h;
      return { x: n91 * (1 - this.zoom), y: o43 * (1 - this.zoom) };
    } }, { key: "_canStartPanning", value: function t61(e78) {
      var n91 = e78.srcElement || e78.target;
      var o43 = this.panWithMetaKey && !(e78.metaKey || e78.ctrlKey);
      if (o43) {
        return false;
      } else {
        if (this._panFilterFunction != null) {
          return this._panFilterFunction(n91) !== false;
        } else {
          return true;
        }
      }
    } }, { key: "_call", value: function t61(e78, n91) {
      if (e78 === o11 && this.consumeRightClick) {
        n91.preventDefault && n91.preventDefault();
      }
      var o43 = G4(n91);
      this.handlers[e78](n91, o43);
    } }, { key: "start", value: function t61(e78) {
      if (this.enabled && e78 != null) {
        this.eventManager.off(document, m10, this._mouseMoveReset);
        this.eventManager.on(document, m10, this._mouseMove);
        this.eventManager.on(document, u11, this._mouseMoveEnd);
        this.handlers["start"](e78, G4(e78));
      }
    } }, { key: "getBoundsInfo", value: function t61(e78, n91) {
      var o43 = this._viewportElementSize || this._$_getViewportSize();
      if (this.viewport.isEmpty()) {
        return { w: 0, h: 0, x: 0, y: 0, vw: o43.w, vh: o43.h, padding: e78, z: 1, zoom: 1 };
      }
      e78 = e78 || 0;
      n91 = n91 || 0.9;
      var i45 = this.viewport.getBoundsWidth(), a48 = this.viewport.getBoundsHeight(), s40 = o43.w / ((i45 + e78 * 2) / n91), r53 = o43.h / ((a48 + e78 * 2) / n91), h35 = Math.min(s40, r53);
      return { w: i45, h: a48, x: this.viewport.getX(), y: this.viewport.getY(), vw: o43.w, vh: o43.h, padding: e78, z: h35, zoom: this.zoom };
    } }, { key: "isPinchZooming", value: function t61() {
      return this.pinchZooming;
    } }, { key: "add", value: function t61(e78, n91) {
      if (n91) {
        e78._jtkDecoration = true;
      }
    } }, { key: "suspend", value: function t61(e78) {
      var n91 = typeof e78 === "string" ? e78 : this.idFunction(e78);
      this._suspendMap[n91] = true;
    } }, { key: "isSuspended", value: function t61(e78) {
      var n91 = typeof e78 === "string" ? e78 : this.idFunction(e78);
      return this._suspendMap[n91] === true;
    } }, { key: "restore", value: function t61(e78) {
      var n91 = typeof e78 === "string" ? e78 : this.idFunction(e78);
      delete this._suspendMap[n91];
    } }, { key: "remove", value: function t61(e78) {
      var n91 = this.idFunction(e78);
      delete this._suspendMap[n91];
    } }, { key: "reset", value: function t61() {
      this._suspendMap = {};
      this._setCanvasPosition({ x: 0, y: 0, animate: false });
    } }, { key: "zoomToFit", value: function t61(e78) {
      e78 = e78 || {};
      var n91 = this.getBoundsInfo(e78.padding, e78.fill);
      if (!(e78.doNotZoomIfVisible && n91.z > this.zoom)) {
        this._zoom(n91.z);
      }
      this.alignContent({ bounds: n91, padding: e78.padding, doNotAnimate: e78.doNotAnimate !== false, onComplete: e78.onComplete, doNotFirePanEvent: e78.doNotFirePanEvent, alignX: e78.alignX || W5, alignY: e78.alignY || W5 });
    } }, { key: "zoomToFitIfNecessary", value: function t61(e78) {
      var n91 = u2(e78 || {}, {});
      n91.doNotZoomIfVisible = true;
      this.zoomToFit(n91);
    } }, { key: "zoomToElements", value: function t61(e78) {
      var n91 = this._$_getViewportSize();
      var o43 = { x: Infinity, y: Infinity, xMax: -Infinity, yMax: -Infinity, z: 1, vw: n91.w, vh: n91.h };
      for (var i45 = 0; i45 < e78.elements.length; i45++) {
        var a48 = e78.elements[i45], s40 = this.viewport.getPosition(this.idFunction(a48));
        if (s40) {
          o43.x = Math.min(o43.x, s40.x);
          o43.y = Math.min(o43.y, s40.y);
          o43.xMax = Math.max(o43.xMax, s40.x2);
          o43.yMax = Math.max(o43.yMax, s40.y2);
        }
      }
      var r53 = e78.fill || 0.9;
      o43.w = o43.xMax - o43.x;
      o43.h = o43.yMax - o43.y;
      o43.z = r53 * Math.min(o43.vw / o43.w, o43.vh / o43.h);
      if (!(e78.doNotZoomIfVisible && o43.z > this.zoom)) {
        this._zoom(o43.z);
      }
      this.centerContent({ bounds: o43, doNotAnimate: e78.doNotAnimate !== false, onComplete: e78.onComplete, doNotFirePanEvent: e78.doNotFirePanEvent });
    } }, { key: "zoomToBackground", value: function t61(e78) {
      e78 = e78 || {};
      if (this.background != null) {
        var n91 = this.background.getWidth(), o43 = this.background.getHeight(), i45 = this._$_getViewportSize(), a48 = i45.w / n91, s40 = i45.h / o43, r53 = Math.min(a48, s40), h35 = { w: n91, h: o43, x: 0, y: 0, vw: i45.w, vh: i45.h, padding: 0, z: r53, zoom: r53 };
        this._zoom(h35.z);
        this.centerContent({ bounds: h35, doNotAnimate: e78.doNotAnimate, onComplete: e78.onComplete });
      }
    } }, { key: "zoomToExtents", value: function t61(e78) {
      var n91 = Array.isArray(e78.extents) ? e78.extents : [e78.extents];
      if (n91.length > 0) {
        var o43 = this._$_getViewportSize();
        var i45 = { x: Infinity, y: Infinity, xMax: -Infinity, yMax: -Infinity, z: 1, vw: o43.w, vh: o43.h };
        n91.forEach(function(t62) {
          i45.x = Math.min(i45.x, t62.x);
          i45.y = Math.min(i45.y, t62.y);
          i45.xMax = Math.max(i45.xMax, t62.x + t62.w);
          i45.yMax = Math.max(i45.yMax, t62.y + t62.h);
        });
        var a48 = e78.fill || 0.9;
        i45.w = i45.xMax - i45.x;
        i45.h = i45.yMax - i45.y;
        i45.z = a48 * Math.min(i45.vw / i45.w, i45.vh / i45.h);
        if (!(e78.doNotZoomIfVisible && i45.z > this.zoom)) {
          this._zoom(i45.z);
        }
        this.centerContent({ bounds: i45, doNotAnimate: e78.doNotAnimate !== false, onComplete: e78.onComplete, doNotFirePanEvent: e78.doNotFirePanEvent });
      }
    } }, { key: "setFilter", value: function t61(e78) {
      this.filter = e78 || function() {
        return false;
      };
    } }, { key: "centerBackground", value: function t61(e78) {
      if (this.background != null) {
        var n91 = u2({}, this.getBoundsInfo());
        n91.x = this.background.getWidth() / 2;
        n91.y = this.background.getHeight() / 2;
        n91.w = 1;
        n91.h = 1;
        this.centerContent({ bounds: n91, doNotAnimate: e78.doNotAnimate, onComplete: e78.onComplete, vertical: true, horizontal: true });
      }
    } }, { key: "alignBackground", value: function t61(e78, n91) {
      if (this.background != null) {
        var o43 = e78.split(" "), i45 = o43[0] || "left", a48 = o43[1] || "top", s40 = this.getBoundsInfo(), r53 = i45 === "left" ? 0 : s40.vw - this.background.getWidth() * this.zoom, h35 = a48 === "top" ? 0 : s40.vh - this.background.getHeight() * this.zoom, l48 = this._apparentOffset();
        this._setCanvasPosition({ x: r53 - l48.x, y: h35 - l48.y, animate: true, animationDuration: n91 });
        this.background.pan();
        this.fixedLayer.pan();
      }
    } }, { key: "positionElementAt", value: function t61(e78, n91, o43, i45, a48, s40) {
      i45 = i45 || 0;
      a48 = a48 || 0;
      var r53 = this._apparentOffset(), h35 = this.position, l48 = e78.parentNode, u52 = this.getOffset(l48), m44 = this.getOffset(this.viewportElement), v41 = m44.x - u52.x + (h35.x + r53.x) + n91 * this.zoom + i45, c47 = m44.y - u52.y + (h35.y + r53.y) + o43 * this.zoom + a48;
      if (s40 && v41 < 0)
        v41 = 0;
      if (s40 && c47 < 0)
        c47 = 0;
      e78.style.left = v41 + "px";
      e78.style.top = c47 + "px";
    } }, { key: "positionElementAtPageLocation", value: function t61(e78, n91, o43, i45, a48) {
      var s40 = this.fromPageLocation(n91, o43);
      this.positionElementAt(e78, s40.x, s40.y, i45, a48);
    } }, { key: "positionElementAtEventLocation", value: function t61(e78, n91, o43, i45) {
      var a48 = this.mapEventLocation(n91);
      this.positionElementAt(e78, a48.x, a48.y, o43, i45);
    } }, { key: "zoomToEvent", value: function t61(e78, n91) {
      this._setTransformOriginToEvent(e78);
      this._zoom(this.zoom + n91, e78);
    } }, { key: "relayout", value: function t61(e78) {
      if (this.enablePan === false) {
        var n91 = e78.xmax - e78.xmin, o43 = e78.ymax - e78.ymin, i45 = window.getComputedStyle(this.viewportElement), a48 = parseInt(i45.getPropertyValue(P4), 10), s40 = parseInt(i45.getPropertyValue(T3), 10), r53 = a48 / n91, h35 = s40 / o43;
        var l48 = Math.min(r53, h35);
        this.canvasElement.style.width = a48 + C5;
        this.canvasElement.style.height = s40 + C5;
        this.canvasElement.style.left = "0";
        this.canvasElement.style.top = "0";
        var u52 = -e78.xmin, m44 = -e78.ymin;
        this.canvasElement.style.transform = "".concat(M7, "(").concat(u52 * l48).concat(C5, ") ").concat(b10, "(").concat(m44 * l48).concat(C5, ") ").concat(E5, "(").concat(l48, ")");
        this.setTransformOrigin(0, 0);
      }
    } }, { key: "nudgeZoom", value: function t61(e78, n91) {
      var o43 = this.getOffsetRelativeToRoot(this.viewportElement), i45 = this._$_getViewportSize(), a48 = o43.x + i45.w / 2, s40 = o43.y + i45.h / 2;
      this._setTransformOriginToPageLocation(a48, s40);
      return this._zoom(this.zoom + e78, n91);
    } }, { key: "nudgeWheelZoom", value: function t61(e78, n91) {
      this.zoomAtZoomStart = this.zoom;
      this._zoomBy(0, e78, n91, true);
    } }, { key: "alignContent", value: function t61(e78) {
      var n91 = this;
      if (this.directRender)
        return;
      e78 = e78 || {};
      var o43 = e78.bounds || this.getBoundsInfo(), i45 = this.position;
      var a48 = this._$_getCanvasSize(), s40 = (1 - 1 / this.zoom) * a48.h, r53 = (1 - 1 / this.zoom) * a48.w, h35 = this._apparentOffset(), l48 = o43.x * this.zoom + o43.w * this.zoom / 2, u52 = o43.y * this.zoom + o43.h * this.zoom / 2, m44 = o43.vw / 2 - l48, v41 = o43.vh / 2 - u52;
      var c47 = e78.padding || 10;
      var f45 = this.position.x, d32 = this.position.y, p49 = s40 * this.transformOrigin.y / 100 - o43.y + c47 / this.zoom, y34 = (p49 - o43.h - 2 * c47 + o43.vh / this.zoom) * this.zoom, g31 = e78.alignY == null ? d32 : e78.alignY === B6 ? y34 : e78.alignY === W5 ? v41 - h35.y : p49 * this.zoom, x27 = r53 * this.transformOrigin.x / 100 - o43.x + c47 / this.zoom, w23 = (x27 - o43.w - 2 * c47 + o43.vw / this.zoom) * this.zoom, z16 = e78.alignX == null ? f45 : e78.alignX === S7 ? w23 : e78.alignX === W5 ? m44 - h35.x : x27 * this.zoom;
      this._setCanvasPosition({ x: z16, y: g31, animate: !e78.doNotAnimate, animationDuration: e78.animationDuration, onComplete: function t62() {
        if (!e78.doNotFirePanEvent) {
          n91.onPan(z16 - i45.x, g31 - i45.y, n91.zoom, n91.zoom);
        }
        n91.background && n91.background.pan();
        n91.fixedLayer.pan();
        if (e78.onComplete) {
          e78.onComplete({ x: z16, y: g31 });
        }
      } });
    } }, { key: "alignContentTop", value: function t61(e78) {
      e78 = e78 || {};
      e78.alignY = R4;
      this.alignContent(e78);
    } }, { key: "alignContentBottom", value: function t61(e78) {
      e78 = e78 || {};
      e78.alignY = B6;
      this.alignContent(e78);
    } }, { key: "alignContentLeft", value: function t61(e78) {
      e78 = e78 || {};
      e78.alignX = O8;
      this.alignContent(e78);
    } }, { key: "alignContentRight", value: function t61(e78) {
      e78 = e78 || {};
      e78.alignX = S7;
      this.alignContent(e78);
    } }, { key: "centerContent", value: function t61(e78) {
      e78 = e78 || {};
      e78.alignX = e78.horizontal === false ? null : W5;
      e78.alignY = e78.vertical === false ? null : W5;
      this.alignContent(e78);
    } }, { key: "centerContentHorizontally", value: function t61(e78) {
      this.centerContent(u2({ horizontal: true, vertical: false }, e78));
    } }, { key: "centerContentVertically", value: function t61(e78) {
      this.centerContent(u2({ vertical: true, horizontal: false }, e78));
    } }, { key: "centerOn", value: function t61(e78) {
      var n91 = this;
      var o43 = Object.assign({}, this.getBoundsInfo());
      Object.assign(o43, e78.bounds);
      var i45 = function t62() {
        n91._setTransformOriginToCanvasPoint(o43.x + o43.w / 2, o43.y + o43.h / 2);
        e78.onComplete && e78.onComplete(o43);
      };
      this.centerContent({ bounds: o43, doNotAnimate: e78.doNotAnimate, onComplete: i45, vertical: e78.vertical !== false, horizontal: e78.horizontal !== false, zoom: e78.zoom });
    } }, { key: "centerOnHorizontally", value: function t61(e78) {
      this.centerOn({ vertical: false, doNotAnimate: e78.doNotAnimate, onComplete: e78.onComplete, bounds: e78.bounds });
    } }, { key: "centerOnVertically", value: function t61(e78) {
      this.centerOn({ bounds: e78.bounds, horizontal: false, doNotAnimate: e78.doNotAnimate, onComplete: e78.onComplete });
    } }, { key: "centerOnAndZoom", value: function t61(e78) {
      var n91 = e78.fillRatio || 0.6;
      var o43 = e78.bounds, i45 = this.getBoundsInfo(), a48 = i45.vw < i45.vh ? [i45.vw, "w"] : [i45.vh, "h"], s40 = n91 * a48[0], r53 = s40 / o43[a48[1]];
      if (r53 < this.zoomRange[0]) {
        r53 = this.zoomRange[0];
      }
      if (r53 > this.zoomRange[1]) {
        r53 = this.zoomRange[1];
      }
      this._setTransformOriginToCanvasPoint(o43.x + o43.w / 2, o43.y + o43.h / 2);
      this.centerOn({ bounds: o43, zoom: r53 });
    } }, { key: "getViewportCenter", value: function t61() {
      var e78 = u2({}, this.getBoundsInfo()), n91 = this._apparentOffset(), o43 = this.position, i45 = { x: e78.vw / 2, y: e78.vh / 2 };
      return { x: (i45.x - (o43.x + n91.x)) / this.zoom, y: (i45.y - (o43.y + n91.y)) / this.zoom };
    } }, { key: "setViewportCenter", value: function t61(e78) {
      var n91 = u2({}, this.getBoundsInfo()), o43 = this._apparentOffset(), i45 = { x: n91.vw / 2, y: n91.vh / 2 };
      var a48 = { x: -(e78.x * this.zoom - i45.x + o43.x), y: -(e78.y * this.zoom - i45.y + o43.y) };
      this._setCanvasPosition({ x: a48.x, y: a48.y, animate: false });
    } }, { key: "setClamping", value: function t61(e78) {
      this.clamp = e78;
    } }, { key: "isClamping", value: function t61() {
      return this.clamp;
    } }, { key: "setZoom", value: function t61(e78, n91) {
      return this._zoom(e78, null, null, n91);
    } }, { key: "setZoomRange", value: function t61(e78, n91) {
      if (e78 != null && e78.length === 2 && e78[0] < e78[1] && e78[0] != null && e78[1] != null && e78[0] > 0 && e78[1] > 0) {
        this.zoomRange = e78;
        if (!n91) {
          if (this.zoom < this.zoomRange[0] || this.zoom > this.zoomRange[1])
            this._zoom(this.zoom);
        }
      }
      return this.zoomRange;
    } }, { key: "getZoomRange", value: function t61() {
      return this.zoomRange;
    } }, { key: "getZoom", value: function t61() {
      return this.zoom;
    } }, { key: "getCompoundZoom", value: function t61() {
      var e78 = this._$_getViewportSize();
      var n91 = this.viewportElement.getBoundingClientRect();
      var o43 = n91.width / e78.w;
      return o43;
    } }, { key: "getPan", value: function t61() {
      return u2({}, this.position);
    } }, { key: "pan", value: function t61(e78, n91, o43, i45) {
      var a48 = this;
      this._moveCanvas(e78, n91, o43, function(t62) {
        a48.onPan(t62.x, t62.y, a48.zoom, a48.zoom);
        a48.background && a48.background.pan();
        a48.fixedLayer.pan();
        i45 && i45(t62);
      });
    } }, { key: "startPanRepeat", value: function t61(e78, n91, o43, i45, a48, s40) {
      var r53 = this;
      this.stopPanRepeat();
      var h35 = function t62() {
        var a49 = e78 * o43;
        var h36 = n91 * i45;
        s40 && s40({ x: a49, y: h36 });
        r53.pan(a49, h36, false);
      };
      h35();
      this._panRepeatTimer = window.setInterval(function() {
        return h35();
      }, a48);
    } }, { key: "stopPanRepeat", value: function t61() {
      window.clearTimeout(this._panRepeatTimer);
    } }, { key: "setPan", value: function t61(e78, n91, o43, i45) {
      return this._setCanvasPosition({ x: e78, y: n91, animate: o43, onComplete: i45 });
    } }, { key: "setTransformOrigin", value: function t61(e78, n91) {
      this.transformOrigin = { x: e78, y: n91 };
      this._writeTransformOrigin();
    } }, { key: "_calculateCumulativeScroll", value: function t61() {
      return F6(this.viewportElement);
    } }, { key: "fromPageLocation", value: function t61(e78, n91) {
      var o43 = this._apparentOffset(), i45 = this.position, a48 = F6(this.viewportElement), s40 = this.viewportElement.getBoundingClientRect();
      var r53 = this.getCompoundZoom();
      var h35 = { x: ((e78 - (s40.x + a48.x)) / r53 - (i45.x + o43.x)) / this.zoom, y: ((n91 - (s40.y + a48.y)) / r53 - (i45.y + o43.y)) / this.zoom };
      return h35;
    } }, { key: "toPageLocation", value: function t61(e78, n91) {
      var o43 = this._apparentOffset(), i45 = this.position, a48 = F6(this.viewportElement), s40 = this.viewportElement.getBoundingClientRect();
      var r53 = this.getCompoundZoom();
      var h35 = r53 * (this.zoom * e78 + (i45.x + o43.x)) + (s40.x + a48.x);
      var l48 = r53 * (this.zoom * n91 + (i45.y + o43.y)) + (s40.y + a48.y);
      return { x: h35, y: l48 };
    } }, { key: "mapEventLocation", value: function t61(e78) {
      var n91 = q4(e78);
      return this.fromPageLocation(n91.x, n91.y);
    } }, { key: "setEnabled", value: function t61(e78) {
      this.enabled = e78;
    } }, { key: "showElementAt", value: function t61(e78, n91, o43) {
      var i45 = e78.parentNode, a48 = this.getOffset(i45), s40 = this.getOffset(this.viewportElement), r53 = this._apparentOffset(), h35 = a48.x - s40.x + r53.x + n91, l48 = a48.y - s40.y + r53.y + o43;
      e78.style.left = h35 + "px";
      e78.style.top = l48 + "px";
    } }, { key: "getApparentCanvasLocation", value: function t61() {
      var e78 = this._apparentOffset(), n91 = this.position;
      return { x: n91.x + e78.x, y: n91.y + e78.y };
    } }, { key: "setApparentCanvasLocation", value: function t61(e78, n91) {
      var o43 = this._apparentOffset();
      var i45 = this._setCanvasPosition({ x: e78 - o43.x, y: n91 - o43.y, animate: false });
      this.background && this.background.pan();
      this.fixedLayer.pan();
      return i45;
    } }, { key: "floatElement", value: function t61(e78, n91) {
      if (e78 == null)
        return;
      var o43 = e78;
      o43.style.position = "absolute";
      o43.style.left = n91.x + "px";
      o43.style.top = n91.y + "px";
      this.viewportElement.appendChild(e78);
    } }, { key: "fixElement", value: function t61(e78, n91, o43, i45) {
      return this.fixedLayer.append(e78, n91, o43, i45);
    } }, { key: "unfixElement", value: function t61(e78) {
      this.fixedLayer.remove(e78);
    } }, { key: "findIntersectingElements", value: function t61(e78, n91, o43, i45, a48) {
      var s40 = this;
      var r53 = this.getApparentCanvasLocation(), h35 = this.getOffset(this.viewportElement), l48 = this.viewportElement.scrollLeft, u52 = this.viewportElement.scrollTop, m44 = [], v41 = { x: e78.x, y: e78.y, w: n91.w, h: n91.h }, c47 = function t62(e79, n92) {
        if (o43) {
          return w8(e79, n92);
        } else {
          return i9(e79, n92);
        }
      };
      var f45 = { x: h35.x + r53.x - l48, y: h35.y + r53.y - u52 };
      var d32 = this.viewport.getElements();
      d32.forEach(function(t62, e79) {
        if (a48 === true || !s40._suspendMap[e79]) {
          var n92 = { x: f45.x + t62.x * s40.zoom, y: f45.y + t62.y * s40.zoom, w: t62.w * s40.zoom, h: t62.h * s40.zoom };
          if (c47(v41, n92) && (i45 == null || i45(t62, n92, e79))) {
            m44.push({ id: e79, r: n92 });
          }
        }
      });
      return m44;
    } }, { key: "findNearbyElements", value: function t61(e78, n91, o43, i45) {
      var a48 = [];
      if (!o43 || this.isInViewport(e78.x, e78.y)) {
        a48 = this.findIntersectingElements({ x: e78.x - n91, y: e78.y - n91 }, { w: n91 * 2, h: n91 * 2 }, false, i45);
        var s40 = this.fromPageLocation(e78.x, e78.y);
        a48.sort(function(t62, e79) {
          var n92 = { x: t62.x + t62.w / 2, y: t62.y + t62.h / 2 }, o44 = { x: e79.x + e79.w / 2, y: e79.y + e79.h / 2 }, i46 = o13({ x: s40.x, y: s40.y }, n92), a49 = o13({ x: s40.x, y: s40.y }, o44);
          return i46 < a49 ? -1 : i46 > a49 ? 1 : 0;
        });
      }
      return a48;
    } }, { key: "isInViewport", value: function t61(e78, n91) {
      var o43 = this.viewportElement.getBoundingClientRect();
      return o43.x <= e78 && e78 <= o43.x + o43.width && o43.y <= n91 && n91 <= o43.y + o43.height;
    } }, { key: "setWheelFilter", value: function t61(e78) {
      this.wheelFilter = e78 || function(t62) {
        return true;
      };
    } }, { key: "addBackground", value: function t61(e78) {
      this.background.addBackground(e78);
    } }, { key: "removeBackground", value: function t61(e78) {
      this.background.removeBackground(e78);
    } }, { key: "destroy", value: function t61() {
      if (this._doWheelZoom != null) {
        P2(this.viewportElement, this._doWheelZoom);
      }
      this.pinchListener.destroy();
      this.fixedLayer.destroy();
      this.background.destroy();
      this.pinchListener = null;
      this.fixedLayer = null;
      this.background = null;
      this.eventManager.off(document, m10, this._mouseMoveReset);
      this.eventManager.off(this.viewportElement, t4, this._mouseDown);
      this.eventManager.off(this.viewportElement, o11, this._contextMenu);
      delete this.onMaybeZoom;
      delete this.onPan;
      delete this.onMouseDown;
      delete this.onMouseUp;
      delete this.onMouseMove;
      delete this.onSetTransformOrigin;
    } }]);
    return o42;
  }();
  var I5 = function() {
    function i45() {
      t(this, i45);
      o(this, "backgrounds", []);
    }
    n(i45, [{ key: "addBackground", value: function t61(e78) {
      this.backgrounds.push(e78);
    } }, { key: "removeBackground", value: function t61(e78) {
      this.backgrounds = this.backgrounds.filter(function(t62) {
        return t62 !== e78;
      });
    } }, { key: "getWidth", value: function t61() {
      return Math.max.apply(Math, h(this.backgrounds.map(function(t62) {
        return t62.getWidth();
      })));
    } }, { key: "getHeight", value: function t61() {
      return Math.max.apply(Math, h(this.backgrounds.map(function(t62) {
        return t62.getHeight();
      })));
    } }, { key: "setZoom", value: function t61(e78, n91) {
      this.backgrounds.forEach(function(t62) {
        return t62.setZoom(e78, n91);
      });
    } }, { key: "owns", value: function t61(e78) {
      return this.backgrounds.find(function(t62) {
        return t62.owns(e78);
      }) != null;
    } }, { key: "pan", value: function t61() {
      this.backgrounds.forEach(function(t62) {
        return t62.pan();
      });
    } }, { key: "destroy", value: function t61() {
      this.backgrounds.forEach(function(t62) {
        return t62.destroy();
      });
      this.backgrounds.length = 0;
    } }, { key: "_setVisible", value: function t61(e78) {
      this.backgrounds.forEach(function(t62) {
        return t62._setVisible(e78);
      });
    } }]);
    return i45;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/io.js
  var a13;
  var u14;
  var i10;
  var f13 = function r9(e78, o42, d32) {
    var a48 = e78.nodes || [], u52 = e78.edges || [], i45 = e78.groups || [];
    var f45 = /* @__PURE__ */ new Map();
    var p49 = o42.getGroups().map(function(r53) {
      return r53.id;
    });
    var s40 = function r53(e79) {
      var d33 = f45.get(e79);
      if (d33 != null) {
        j2(d33, function(r54) {
          p49.push(o42.addGroup(r54).id);
        });
      }
      f45.delete(e79);
      j2(d33, function(e80) {
        r53(e80.id);
      });
    };
    for (var g31 = 0; g31 < i45.length; g31++) {
      var v41 = i45[g31];
      if (v41.group != null && p49.indexOf(v41.group) === -1) {
        var c47 = f3(f45, v41.group, function() {
          return [];
        });
        c47.push(v41);
      } else {
        var l48 = o42.addGroup(v41);
        p49.push(l48.id);
        s40(l48.id);
      }
    }
    f45.forEach(function(r53, e79) {
      if (p49.indexOf(e79) === -1) {
        throw new Error("Parent group [" + e79 + "] not found");
      } else {
        j2(r53, function(r54) {
          return p49.push(o42.addGroup(r54).id);
        });
      }
    });
    for (var h35 = 0; h35 < a48.length; h35++) {
      o42.addNode(a48[h35]);
    }
    for (var m44 = 0; m44 < u52.length; m44++) {
      var G17 = { source: u52[m44].source, target: u52[m44].target, cost: u52[m44].cost || 1, directed: u52[m44].directed, data: u52[m44].data };
      if (u52[m44].geometry) {
        G17.geometry = u52[m44].geometry;
      }
      o42.addEdge(G17);
    }
  };
  var p11 = function r10(e78, a48, u52) {
    var i45 = e78.nodes || [], f45 = e78.edges || [], p49 = e78.ports || [], s40 = e78.groups || [];
    var g31 = /* @__PURE__ */ new Map();
    var v41 = a48.getGroups().map(function(r53) {
      return r53.id;
    });
    var c47 = function r53(e79) {
      var o42 = g31.get(e79);
      if (o42 != null) {
        j2(o42, function(r54) {
          v41.push(a48.addGroup(r54).id);
        });
      }
      g31.delete(e79);
      j2(o42, function(e80) {
        r53(e80.id);
      });
    };
    for (var l48 = 0; l48 < s40.length; l48++) {
      var h35 = s40[l48];
      if (h35.group != null && v41.indexOf(h35.group) === -1) {
        var m44 = f3(g31, h35.group, function() {
          return [];
        });
        m44.push(h35);
      } else {
        var G17 = a48.addGroup(h35);
        v41.push(G17.id);
        c47(G17.id);
      }
    }
    g31.forEach(function(r53, e79) {
      if (v41.indexOf(e79) === -1) {
        throw new Error("Parent group [" + e79 + "] not found");
      } else {
        j2(r53, function(r54) {
          return v41.push(a48.addGroup(r54).id);
        });
      }
    });
    for (var E17 = 0; E17 < i45.length; E17++) {
      a48.addNode(i45[E17]);
    }
    for (var P18 = 0; P18 < p49.length; P18++) {
      if (p49[P18].nodeId) {
        var w23 = a48.getNode(p49[P18].nodeId);
        if (w23 == null)
          throw new Error("Unknown node [" + p49[P18].nodeId + "]");
        w23.addPort(p49[P18]);
      } else if (p49[P18].id) {
        var y34 = a48.getGraph().getVertexByPortId(p49[P18].id);
        if (y34) {
          var N15 = u2(p49[P18], {});
          N15.id = a48.getGraph().splitPortId(p49[P18].id)[1];
          y34.addPort(N15);
        }
      } else {
        Q("could not add port with definition " + p49[P18] + "; no nodeId or id found");
      }
    }
    for (var I17 = 0; I17 < f45.length; I17++) {
      var j26 = { source: f45[I17].source, target: f45[I17].target, cost: f45[I17].cost || 1, directed: f45[I17].directed, data: f45[I17].data };
      if (f45[I17].geometry) {
        j26.geometry = f45[I17].geometry;
      }
      a48.addEdge(j26);
    }
  };
  var s11 = function r11(e78, o42) {
    return e78.getGraph().serialize();
  };
  var g9 = function r12(e78, o42) {
    return e78.getGraph().legacySerialize();
  };
  var v11 = function r13(e78, o42, t61) {
    var d32 = function r53(e79) {
      var t62 = o42.addNode(e79);
      if (e79.children) {
        for (var d33 = 0; d33 < e79.children.length; d33++) {
          var n91 = o42.addNode(e79.children[d33]);
          o42.addEdge({ source: t62, target: n91 });
          r53(e79.children[d33]);
        }
      }
    };
    d32(e78);
  };
  var c11 = "json";
  var l11 = "hierarchical-json";
  var h12 = "legacy-json";
  var m12 = (a13 = {}, o(a13, c11, s11), o(a13, h12, g9), a13);
  var G5 = (u14 = {}, o(u14, c11, f13), o(u14, l11, v11), o(u14, h12, p11), u14);
  var w9;
  (function(r53) {
    r53["removeGroup"] = "removeGroup";
    r53["removeNode"] = "removeNode";
    r53["removePort"] = "removePort";
    r53["removeEdge"] = "removeEdge";
    r53["addNode"] = "addNode";
    r53["addGroup"] = "addGroup";
    r53["addEdge"] = "addEdge";
    r53["addPort"] = "addPort";
  })(w9 || (w9 = {}));
  var y9 = o({}, c11, (i10 = {}, o(i10, w9.removeNode, function(r53, o42, t61) {
    var d32 = t61(o42.data);
    E(r53.nodes, function(r54) {
      return r54.id === d32;
    });
  }), o(i10, w9.removeGroup, function(r53, o42, t61) {
    var d32 = t61(o42.data);
    E(r53.groups, function(r54) {
      return r54.id === d32;
    });
  }), o(i10, w9.removeEdge, function(r53, o42, t61) {
    var d32 = t61(o42.data);
    E(r53.edges, function(r54) {
      return r54.data && r54.data.id === d32;
    });
  }), o(i10, w9.addNode, function(r53, e78, o42) {
    r53.nodes = r53.nodes || [];
    r53.nodes.push(e78.data);
  }), o(i10, w9.addGroup, function(r53, e78, o42) {
    r53.groups = r53.groups || [];
    r53.groups.push(e78.data);
  }), o(i10, w9.addEdge, function(r53, e78, o42) {
    var t61 = { source: e78.source.getFullId(), target: e78.target.getFullId(), data: e78.data || {} };
    r53.edges = r53.edges || [];
    r53.edges.push(t61);
  }), o(i10, w9.addPort, function(r53, e78, t61) {
    r53.ports = r53.ports || [];
    var d32 = u2({}, e78.port.data || {});
    d32.id = e78.port.getFullId();
    r53.ports.push(d32);
  }), o(i10, w9.removePort, function(r53, o42, t61) {
    var d32 = o42.port.getFullId();
    E(r53.ports, function(r54) {
      return r54.id === d32;
    });
  }), i10));
  function N6(r53, e78, o42, t61) {
    var d32 = G5[r53];
    if (d32 == null)
      throw new Error("jsPlumb Toolkit - parse - [" + r53 + "] is an unsupported type");
    else
      return d32(e78, o42, t61);
  }
  function I6(r53, e78, o42) {
    var t61 = m12[r53];
    if (t61 === null)
      throw new Error("jsPlumb Toolkit - exportData - [" + r53 + "]  is an unsupported type");
    else
      return t61(e78, o42);
  }
  function j7(r53, e78, o42, t61, d32, n91) {
    if (y9[o42] && y9[o42][r53]) {
      y9[o42][r53](e78, t61, d32);
    }
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui/browser-util.js
  var n8 = function() {
    function r53() {
      t(this, r53);
    }
    n(r53, null, [{ key: "setNodeText", value: function e78(t61, r54) {
      t61.text = r54;
      try {
        t61.textContent = r54;
      } catch (e79) {
      }
    } }, { key: "getNodeText", value: function e78(t61) {
      return t61 != null ? t61.text || t61.textContent : "";
    } }, { key: "getChild", value: function e78(t61, r54) {
      var n91 = null;
      for (var o42 = 0; o42 < t61.childNodes.length; o42++) {
        if (t61.childNodes[o42].nodeType === 1 && t61.childNodes[o42].nodeName === r54) {
          n91 = t61.childNodes[o42];
          break;
        }
      }
      return n91;
    } }, { key: "getChildren", value: function e78(t61, r54) {
      var n91 = [];
      for (var o42 = 0; o42 < t61.childNodes.length; o42++) {
        if (t61.childNodes[o42].nodeType === 1 && t61.childNodes[o42].nodeName === r54) {
          n91.push(t61.childNodes[o42]);
        }
      }
      return n91;
    } }, { key: "xmlToString", value: function e78(t61) {
      try {
        return new XMLSerializer().serializeToString(t61).replace(/\s*xmlns=\"http\:\/\/www.w3.org\/1999\/xhtml\"/g, "");
      } catch (e79) {
        try {
          return t61.xml;
        } catch (e80) {
          throw new Error("Cannot serialize XML " + e80);
        }
      }
    } }, { key: "createElement", value: function e78(t61, n91, o42) {
      var a48;
      try {
        a48 = new ActiveXObject("Microsoft.XMLDOM").createNode(1, t61, "");
      } catch (e79) {
        a48 = document.createElement(t61);
      }
      if (o42) {
        r53.setNodeText(a48, o42);
      }
      if (n91) {
        for (var i45 in n91) {
          a48.setAttribute(i45, n91[i45]);
        }
      }
      return a48;
    } }]);
    return r53;
  }();
  function o14(e78, t61) {
    t61 = t61 || 150;
    var r53 = null;
    return function() {
      window.clearTimeout(r53);
      r53 = window.setTimeout(e78, t61);
    };
  }
  function a14(e78) {
    var t61 = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
    var n91 = e78.type || "GET";
    if (t61) {
      var o42 = e78.dataType === c11 ? function(e79) {
        return JSON.parse(e79);
      } : function(e79) {
        return e79;
      };
      t61.open(n91, e78.url, true);
      var a48 = e78.headers || {};
      for (var i45 in a48) {
        t61.setRequestHeader(i45, a48[i45]);
      }
      t61.onreadystatechange = function() {
        if (t61.readyState === 4) {
          if (("" + t61.status)[0] === "2") {
            e78.success(o42(t61.responseText));
          } else {
            e78.error && e78.error(t61.responseText, t61.status);
          }
        }
      };
      t61.send(e78.data ? JSON.stringify(e78.data) : null);
    } else {
      e78.error && e78.error("ajax not supported");
    }
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/model/djikstra.js
  function t5(t61) {
    var n91 = t61.graph, r53 = t61.source, o42 = t61.target, i45 = t61.nodeFilter, l48 = t61.edgeFilter, u52 = {}, c47 = {}, a48 = {}, d32 = { dist: u52, previous: c47, edges: a48, path: [] }, f45 = t61.processAll, g31 = {}, p49 = {}, s40 = !(t61.strict === false), v41 = function e78(t62) {
      return t62.getFullId ? t62.getFullId() : t62.id;
    }, h35 = [], y34 = function e78(t62) {
      var n92 = p49[t62.getFullId()];
      return g31[n92.v.id];
    }, b28 = function t62(n92, r54) {
      var o43, i46;
      if (n92.objectType === x8.objectType) {
        u52[n92.getFullId()] = r54;
        o43 = y34(n92);
        for (i46 = 0; i46 < o43.length; i46++) {
          if (o43[i46].p != n92) {
            u52[o43[i46].p.getFullId()] = r54 + n92.getParent().getInternalEdge(n92, o43[i46].p).cost;
          }
        }
        if (!s40) {
          u52[n92.getParent().id] = r54;
        }
      } else {
        u52[n92.id] = r54;
        o43 = g31[n92.id];
        for (i46 = 0; i46 < o43.length; i46++) {
          u52[o43[i46].p.getFullId()] = r54;
        }
      }
    }, j26 = function e78(t62) {
      if (i45 && !i45(t62))
        return Infinity;
      return u52[v41(t62)];
    }, T18 = function t62(n92, r54, o43) {
      if (n92.objectType === x8.objectType) {
        var i46 = y34(n92);
        for (var l49 = 0; l49 < i46.length; l49++) {
          c47[i46[l49].p.getFullId()] = o43.node;
        }
        if (!s40)
          c47[n92.getParent().id] = o43.node;
      }
      c47[r54] = o43.node;
    }, I17 = function t62(n92, r54, o43) {
      if (n92.objectType === x8.objectType) {
        var i46 = y34(n92);
        for (var l49 = 0; l49 < i46.length; l49++) {
          a48[i46[l49].p.getFullId()] = o43;
        }
        if (!s40)
          a48[n92.getParent().id] = o43;
      }
      a48[r54] = o43;
    }, F17 = function t62(n92, r54, o43, i46, l49) {
      var u53 = -1, c48 = null, a49 = Infinity;
      for (var d33 = 0; d33 < n92.length; d33++) {
        if (!r54[d33]) {
          var f46 = l49(n92[d33]);
          if (f46 < a49) {
            a49 = f46;
            u53 = d33;
            c48 = n92[d33];
          } else if (f46 === a49) {
            if (n92[d33].objectType === x8.objectType && n92[d33].getParent() === c48) {
              u53 = d33;
              c48 = n92[d33];
            }
          }
        }
      }
      return { node: c48, index: u53 };
    }, P18 = function e78(t62, n92) {
      var r54 = n92.getFullId(), o43 = t62[r54];
      if (o43 == null) {
        r54 = n92.getParent ? n92.getParent().id : n92.id;
        o43 = t62[r54];
      }
      return o43 == null ? null : { p: o43, id: r54 };
    }, x27 = function e78(t62, n92, r54, o43, i46, l49) {
      var u53 = [], c48 = o43;
      var a49 = P18(n92, c48);
      while (a49 != null) {
        u53.splice(0, 0, { vertex: c48, cost: t62[a49.id], edge: r54[a49.id] });
        c48 = a49.p;
        a49 = P18(n92, c48);
      }
      u53.splice(0, 0, { vertex: c48, cost: 0, edge: null });
      return u53;
    };
    var k20 = function e78(t62) {
      for (var n92 = 0; n92 < t62.length; n92++) {
        var r54 = t62[n92], o43 = r54.getPorts();
        h35.push(r54);
        var i46 = { v: r54, i: h35.length - 1 };
        g31[r54.id] = [];
        b28(r54, Infinity);
        for (var l49 = 0; l49 < o43.length; l49++) {
          h35.push(o43[l49]);
          p49[o43[l49].getFullId()] = i46;
          g31[r54.id].push({ p: o43[l49], i: h35.length - 1 });
          b28(o43[l49], Infinity);
        }
      }
    };
    k20(n91.nodes);
    k20(n91.groups);
    if (r53 == null) {
      r53 = n91.getVertex(t61.sourceId);
    }
    if (o42 == null) {
      o42 = n91.getVertex(t61.targetId);
    }
    if (r53 == null || o42 == null) {
      return d32;
    }
    b28(r53, 0);
    var C19 = new Array(n91.nodes.length), w23 = 0, A19 = function e78(t62, n92, r54, o43) {
      for (var i46 = 0; i46 < n92.length; i46++) {
        var l49 = n92[i46];
        if (r54(l49)) {
          var u53 = o43(l49), c48 = u53.tp || u53.tn, a49 = v41(c48);
          var d33 = j26(t62.node) + l49.getCost(), f46 = j26(c48);
          if (d33 < f46) {
            b28(c48, d33);
            T18(c48, a49, t62);
            I17(c48, a49, l49);
          }
        }
      }
    };
    var O22 = function t62() {
      var n92 = F17(h35, C19, u52, v41, j26), r54 = n92.node ? v41(n92.node) : null;
      if (!n92.node || j26(n92.node) == Infinity)
        return "break";
      if (o42 && (r54 == v41(o42) || !s40 && n92.node.objectType === x8.objectType && n92.node.isChildOf(o42))) {
        d32.path = x27(u52, c47, a48, o42);
        d32.pathDistance = d32.path[d32.path.length - 1].cost;
        if (!f45)
          return "break";
      }
      C19[n92.index] = true;
      w23 = w23 + 1;
      A19(n92, n92.node.getAllEdges(), function(t63) {
        if (l48 && !l48(t63))
          return false;
        return !t63.isDirected() || n92.node == t63.source || !s40 && t63.source.objectType === x8.objectType && t63.source.isChildOf(n92.node);
      }, function(t63) {
        var r55 = t63.source.objectType === x8.objectType ? t63.source.getParent() : t63.source, o43 = t63.source.objectType === x8.objectType ? t63.source : null, i46 = t63.target.objectType === x8.objectType ? t63.target.getParent() : t63.target, l49 = t63.target.objectType === x8.objectType ? t63.target : null;
        return t63.source == n92.node || !s40 && t63.source.objectType === x8.objectType && t63.source.isChildOf(n92.node) ? { tn: i46, tp: l49 } : { tn: r55, tp: o43 };
      });
    };
    while (w23 < h35.length) {
      var m44 = O22();
      if (m44 === "break")
        break;
    }
    return d32;
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/model/floyd-warshall.js
  function i11(i45) {
    var e78 = i45.graph, t61 = e78.getVertexCount(), r53 = {}, d32 = {}, f45, o42, g31;
    for (f45 = 0; f45 < t61; f45++) {
      var s40 = e78.getVertexAt(f45);
      if (!r53[s40.id])
        r53[s40.id] = {};
      if (!d32[s40.id])
        d32[s40.id] = {};
      r53[s40.id][s40.id] = 0;
      for (o42 = 0; o42 < t61; o42++) {
        if (f45 != o42) {
          var n91 = e78.getVertexAt(o42);
          if (!r53[s40.id][n91.id])
            r53[s40.id][n91.id] = Infinity;
          if (!d32[s40.id][n91.id])
            d32[s40.id][n91.id] = [];
        }
      }
      var a48 = s40.getEdges();
      for (g31 = 0; g31 < a48.length; g31++) {
        if (a48[g31].source == s40) {
          r53[s40.id][a48[g31].target.id] = a48[g31].getCost();
        } else {
          if (!r53[a48[g31].source.id]) {
            r53[a48[g31].source.id] = {};
            d32[a48[g31].source.id] = {};
          }
          r53[s40.id][a48[g31].source.id] = a48[g31].getCost();
        }
      }
    }
    for (g31 = 0; g31 < t61; g31++) {
      for (f45 = 0; f45 < t61; f45++) {
        for (o42 = 0; o42 < t61; o42++) {
          if (f45 != o42 && o42 != g31 && f45 != g31) {
            var u52 = e78.getVertexAt(f45).id, x27 = e78.getVertexAt(o42).id, V13 = e78.getVertexAt(g31).id;
            if (r53[u52][V13] + r53[V13][x27] <= r53[u52][x27] && r53[u52][V13] + r53[V13][x27] != Infinity) {
              r53[u52][x27] = r53[u52][V13] + r53[V13][x27];
              if (!d32[u52][x27])
                d32[u52][x27] = [];
              d32[u52][x27].unshift([e78.getVertexAt(g31), r53[u52][x27]]);
            }
          }
        }
      }
    }
    return { paths: r53, parents: d32 };
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/model/cluster.js
  var r14 = function() {
    function r53(e78) {
      t(this, r53);
      o(this, "vertices", void 0);
      this.vertices = [e78];
    }
    n(r53, [{ key: "addVertex", value: function e78(s40) {
      this.vertices.push(s40);
    } }]);
    return r53;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/model/graph.js
  function h13(e78) {
    return b11(e78) ? e78.getParent().id : e78.getFullId();
  }
  function p12(e78) {
    return b11(e78) ? e78.getParent() : e78;
  }
  function c12(e78) {
    return b11(e78) ? e78.id : null;
  }
  function f14(e78) {
    return e78 != null && e78.objectType === j8.objectType;
  }
  function v12(e78) {
    return f14(e78) && e78.group != null;
  }
  function y10(e78) {
    return e78 != null && e78.objectType === V6.objectType;
  }
  function k7(e78) {
    return y10(e78) && e78.group != null;
  }
  function m13(e78) {
    return e78 != null && e78.objectType === S8.objectType;
  }
  function b11(e78) {
    return e78 != null && e78.objectType === x8.objectType;
  }
  function I7(e78) {
    return e78.id;
  }
  var M8 = ".";
  var C6 = function() {
    function t61(e78) {
      t(this, t61);
      o(this, "nodes", []);
      o(this, "id", void 0);
      o(this, "edges", []);
      o(this, "groups", []);
      o(this, "_nodeMap", /* @__PURE__ */ new Map());
      o(this, "_edgeMap", /* @__PURE__ */ new Map());
      o(this, "_groupMap", /* @__PURE__ */ new Map());
      o(this, "defaultDirected", void 0);
      o(this, "defaultCost", void 0);
      o(this, "_defaultIdFunction", void 0);
      o(this, "typeFunction", void 0);
      o(this, "enableSubgraphs", void 0);
      o(this, "portSeparator", void 0);
      o(this, "_topLevelCache", {});
      e78 = e78 || {};
      this.nodes = [];
      this.edges = [];
      this.groups = [];
      this.id = e78.id;
      this.defaultDirected = !(e78.defaultDirected === false);
      this.defaultCost = e78.defaultCost || 1;
      this._defaultIdFunction = e78.defaultIdFunction || I7;
      this.typeFunction = e78.typeFunction || function(e79) {
        return e79.type || "default";
      };
      this.enableSubgraphs = e78.enableSubgraphs === true;
      this.portSeparator = e78.portSeparator || M8;
    }
    n(t61, [{ key: "_removeFromTopLevelCache", value: function e78(t62) {
      delete this._topLevelCache[t62.id];
    } }, { key: "_addToTopLevelCache", value: function e78(t62) {
      this._topLevelCache[t62.id] = t62;
    } }, { key: "_clearTopLevelCache", value: function e78() {
      this._topLevelCache = {};
    } }, { key: "getIdFunction", value: function e78() {
      return this._defaultIdFunction;
    } }, { key: "setIdFunction", value: function e78(t62) {
      this._defaultIdFunction = t62;
    } }, { key: "setTypeFunction", value: function e78(t62) {
      this.typeFunction = t62;
    } }, { key: "getType", value: function e78(t62) {
      return this.typeFunction(t62);
    } }, { key: "getId", value: function e78(t62, r53) {
      if (t62 == null) {
        return $();
      } else if (typeof t62 === "string") {
        return t62;
      } else {
        var n91 = r53 || this.getIdFunction();
        return n91(t62) || $();
      }
    } }, { key: "getTopLevelElements", value: function e78() {
      return this._topLevelCache;
    } }, { key: "setEnableSubgraphs", value: function e78(t62) {
      this.enableSubgraphs = t62;
    } }, { key: "setPortSeparator", value: function e78(t62) {
      this.portSeparator = t62;
    } }, { key: "getPortSeparator", value: function e78() {
      return this.portSeparator;
    } }, { key: "splitPortId", value: function e78(t62) {
      return t62 != null ? t62.split(this.portSeparator) : [];
    } }, { key: "getVertexByPortId", value: function e78(t62) {
      var r53 = this.splitPortId(t62);
      if (r53.length === 2) {
        return this._nodeMap.get(r53[0]) || this._groupMap.get(r53[0]);
      }
    } }, { key: "getVertex", value: function e78(t62, r53) {
      var n91 = this;
      if (t62 == null)
        return null;
      var i45;
      if (typeof t62 != "string") {
        if (t62.constructor === x8 || t62.constructor === j8 || t62.constructor === V6)
          return t62;
        var s40 = t62;
        i45 = this._defaultIdFunction(t62);
        if (typeof i45 != "string") {
          return s40;
        }
      }
      i45 = t62;
      var u52 = this.enableSubgraphs ? i45.split("/") : [i45], o42 = function e79(t63) {
        if (n91._nodeMap.has(t63)) {
          return n91._nodeMap.get(t63);
        }
        if (n91._groupMap.has(t63)) {
          return n91._groupMap.get(t63);
        }
        var i46 = t63.split(n91.portSeparator), s41 = i46[0], u53 = n91._nodeMap.get(s41) || n91._groupMap.get(s41);
        if (i46.length === 2 && u53 != null) {
          var o43 = u53.getPort(i46[1]);
          if (o43 == null && r53)
            o43 = u53.addPort(i46[1]);
          return o43;
        } else
          return u53;
      };
      if (u52.length == 1)
        return o42(u52[0]);
      else if (u52.length > 1 && u52.length % 2 == 0)
        throw "Subgraph path format error.";
      else {
        var a48 = null, l48 = null;
        for (var g31 = 0; g31 < u52.length - 1; g31 += 2) {
          a48 = o42(u52[g31]);
          l48 = a48.getGraph(u52[g31 + 1]);
        }
        return l48.getVertex(u52[u52.length - 1]);
      }
    } }, { key: "clear", value: function e78() {
      this.nodes.length = 0;
      this.groups.length = 0;
      this._nodeMap.clear();
      this._edgeMap.clear();
      this._groupMap.clear();
      this._clearTopLevelCache();
    } }, { key: "getVertices", value: function e78() {
      return this.nodes;
    } }, { key: "getVertexCount", value: function e78() {
      return this.nodes.length;
    } }, { key: "getVertexAt", value: function e78(t62) {
      return this.nodes[t62];
    } }, { key: "getEdgeCount", value: function e78() {
      return this._edgeMap.size;
    } }, { key: "addEdge", value: function e78(t62, r53, n91) {
      var i45 = t62.directed == null ? this.defaultDirected === true : !(t62.directed === false), s40 = t62.cost || this.defaultCost, u52 = this.getId(t62.data, r53), o42 = this.getVertex(t62.source, true), a48 = this.getVertex(t62.target, true);
      if (o42 == null || o42.objectType == null)
        throw new TypeError("Unknown source node [" + t62.source + "]");
      if (a48 == null || a48.objectType == null)
        throw new TypeError("Unknown target node [" + t62.target + "]");
      if (n91 && !n91(o42, a48)) {
        return null;
      }
      var l48 = new S8({ source: o42, target: a48, cost: s40, directed: i45, data: t62.data || {}, id: u52, graph: this });
      l48.source.addEdge(l48);
      if (l48.source !== l48.target) {
        l48.target.addEdge(l48);
      }
      this._edgeMap.set(u52, l48);
      if (t62.geometry != null) {
        l48.geometry = t62.geometry;
      }
      return l48;
    } }, { key: "addNode", value: function e78(t62, r53) {
      var n91 = new j8(this, t62 || {}, r53 || this._defaultIdFunction);
      if (!this._nodeMap.has(n91.id)) {
        this.nodes.push(n91);
        this._nodeMap.set(n91.id, n91);
        this._addToTopLevelCache(n91);
        return n91;
      }
      return null;
    } }, { key: "addNodes", value: function e78(t62, r53) {
      for (var n91 = 0; n91 < t62.length; n91++) {
        this.addNode(t62[n91], r53 || this._defaultIdFunction);
      }
    } }, { key: "addGroup", value: function e78(t62, r53) {
      var n91 = new V6(this, t62, r53 || this._defaultIdFunction);
      if (!this._groupMap.has(n91.id)) {
        this.groups.push(n91);
        this._groupMap.set(n91.id, n91);
        this._addToTopLevelCache(n91);
        return n91;
      }
      return this._groupMap.get(n91.id);
    } }, { key: "getGroupCount", value: function e78() {
      return this.groups.length;
    } }, { key: "getGroupAt", value: function e78(t62) {
      return this.groups[t62];
    } }, { key: "getGroups", value: function e78() {
      return this.groups;
    } }, { key: "addMemberToGroup", value: function e78(t62, r53) {
      var n91 = typeof r53 === "string" ? this._groupMap.get(r53) : r53;
      var i45 = this.getVertex(t62);
      if (i45 && n91) {
        n91.addMember(i45);
        this._removeFromTopLevelCache(i45);
      }
    } }, { key: "addMembersToGroup", value: function e78(t62, r53) {
      for (var n91 = 0; n91 < t62.length; n91++) {
        this.addMemberToGroup(t62[n91], r53);
      }
    } }, { key: "removeMemberFromGroup", value: function e78(t62) {
      var r53 = this.getVertex(t62);
      if (r53 && r53.group) {
        r53.group.removeMember(r53);
        this._addToTopLevelCache(r53);
      }
    } }, { key: "removeMembersFromGroup", value: function e78(t62) {
      for (var r53 = 0; r53 < t62.length; r53++) {
        this.removeMemberFromGroup(t62[r53]);
      }
    } }, { key: "getGroup", value: function e78(t62) {
      return typeof t62 === "string" ? this._groupMap.get(t62) : t62;
    } }, { key: "deleteGroup", value: function e78(t62, r53) {
      var n91 = this;
      var i45 = { group: typeof t62 === "string" ? this._groupMap.get(t62) : t62, edges: [], nodes: [], nestedGroups: [], children: [] };
      if (i45.group) {
        i45.parentGroup = i45.group.group;
        i45.children = i45.group.members.slice();
        var s40;
        if (r53) {
          var u52 = e3(i45.group.getMembers(), function(e79) {
            return y10(e79);
          }), o42 = u52.left, a48 = u52.right;
          o42.forEach(function(e79) {
            i45.nestedGroups.push(n91.deleteGroup(e79, true));
          });
          a48.forEach(function(e79) {
            i45.nodes.push(n91.deleteNode(e79));
          });
        } else {
          i45.group.getMembers().forEach(function(e79) {
            return delete e79.group;
          });
        }
        i45.group.members.length = 0;
        i45.edges = i45.group.getAllDirectEdges().slice();
        var g31 = i45.edges.length;
        for (s40 = 0; s40 < g31; s40++) {
          this.deleteEdge(i45.edges[s40]);
        }
        var d32 = i45.group.getPorts();
        for (var h35 = 0; h35 < d32.length; h35++) {
          this.deletePort(d32[h35]);
        }
        this._groupMap.delete(i45.group.id);
        var p49 = -1;
        for (var c47 = 0; c47 < this.groups.length; c47++) {
          if (this.groups[c47].id === i45.group.id) {
            p49 = c47;
            break;
          }
        }
        if (p49 > -1) {
          this.groups.splice(p49, 1);
        }
        if (i45.group.group != null) {
          i45.group.group.removeMember(t62);
        }
        this._removeFromTopLevelCache(i45.group);
      }
      return i45;
    } }, { key: "deletePort", value: function e78(t62) {
      var r53 = t62.getEdges();
      for (var n91 = 0; n91 < r53.length; n91++) {
        this.deleteEdge(r53[n91]);
      }
      return r53;
    } }, { key: "deleteNode", value: function e78(t62) {
      var r53 = this.getVertex(t62), n91 = { node: null, edges: [], parentGroup: null };
      if (r53) {
        n91.node = r53;
        n91.parentGroup = r53.group;
        var i45 = r53.getPorts();
        for (var s40 = 0; s40 < i45.length; s40++) {
          this.deletePort(i45[s40]);
        }
        var u52 = r53;
        var o42 = -1;
        for (var a48 = 0; a48 < this.nodes.length; a48++) {
          if (this.nodes[a48].id === r53.id) {
            o42 = a48;
            break;
          }
        }
        if (o42 > -1) {
          this.nodes.splice(o42, 1);
          if (u52.group != null) {
            u52.group.removeMember(u52);
          }
        }
        n91.edges = r53.getEdges().slice();
        for (var l48 = 0; l48 < n91.edges.length; l48++) {
          this.deleteEdge(n91.edges[l48]);
        }
        this._nodeMap.delete(r53.getFullId());
        this._removeFromTopLevelCache(r53);
      }
      return n91;
    } }, { key: "deleteEdge", value: function e78(t62) {
      t62 = this.getEdge(t62);
      if (t62 == null)
        return;
      var r53 = this.getVertex(t62.source);
      if (r53) {
        r53.deleteEdge(t62);
      }
      var n91 = this.getVertex(t62.target);
      if (n91) {
        n91.deleteEdge(t62);
      }
      this._edgeMap.delete(t62.getId());
    } }, { key: "getEdge", value: function e78(t62) {
      if (t62 == null)
        return;
      if (typeof t62 !== "string") {
        if (t62.constructor === S8) {
          return t62;
        }
        var r53 = t62;
        t62 = this._defaultIdFunction(t62);
        if (typeof t62 !== "string") {
          return r53;
        }
      }
      return this._edgeMap.get(t62);
    } }, { key: "getEdges", value: function e78(t62) {
      t62 = t62 || {};
      var r53 = t62.source != null, n91 = t62.target != null, i45 = t62.node ? this.getVertex(t62.node) : null, s40 = t62.filter || function() {
        return true;
      }, u52 = function e79(s41) {
        return (!r53 || (t62.source === true ? s41.source === i45 : s41.source !== i45)) && (!n91 || (t62.target === true ? s41.target === i45 : s41.target !== i45));
      }, o42 = [], a48 = function e79(t63) {
        if (s40(t63) && u52(t63)) {
          o42.push(t63);
        }
      }, l48;
      if (t62.node) {
        var g31 = this.getVertex(t62.node);
        var d32 = g31.getAllEdges();
        for (l48 = 0; l48 < d32.length; l48++) {
          a48(d32[l48]);
        }
      } else {
        this._edgeMap.forEach(function(e79, t63) {
          return a48(e79);
        });
      }
      return o42;
    } }, { key: "getAllEdges", value: function e78() {
      var t62 = [];
      this._edgeMap.forEach(function(e79, r53) {
        return t62.push(e79);
      });
      return t62;
    } }, { key: "renamePort", value: function e78(t62, r53) {
      if (t62.getParent().renamePort(t62, r53)) {
        t62.id = r53;
        return true;
      } else {
        return false;
      }
    } }, { key: "getAncestors", value: function e78(t62) {
      var r53 = p12(t62);
      var n91 = [];
      var i45 = r53.group;
      while (i45 != null) {
        n91.push(i45);
        i45 = i45.group;
      }
      return n91;
    } }, { key: "isAncestor", value: function e78(t62, r53) {
      if (t62 == null || r53 == null) {
        return false;
      }
      return this.getAncestors(t62).indexOf(r53) !== -1;
    } }, { key: "findPath", value: function e78(t62, r53, n91, i45, s40) {
      var o42 = this.getVertex(t62);
      var a48 = this.getVertex(r53);
      return t5({ graph: this, source: o42, target: a48, strict: !(n91 === false), nodeFilter: i45, edgeFilter: s40 });
    } }, { key: "getDistance", value: function e78(t62, r53, n91) {
      var i45 = this.findPath(t62, r53, n91);
      return i45.pathDistance;
    } }, { key: "setTarget", value: function e78(t62, r53) {
      var n91 = this.getVertex(r53);
      if (n91 == null)
        return { success: false };
      var i45 = t62.target;
      t62.target.deleteEdge(t62);
      t62.target = n91;
      n91.addEdge(t62);
      return { old: i45, edge: t62, new: n91, success: true };
    } }, { key: "setSource", value: function e78(t62, r53) {
      var n91 = this.getVertex(r53);
      if (n91 == null)
        return { success: false };
      var i45 = t62.source;
      t62.source.deleteEdge(t62);
      t62.source = n91;
      n91.addEdge(t62);
      return { old: i45, edge: t62, new: n91, success: true };
    } }, { key: "printPath", value: function e78(t62, r53) {
      var n91 = this.getVertex(t62);
      var i45 = this.getVertex(r53);
      var s40 = this.findPath(n91, i45).path;
      var u52 = "[" + n91.id + " - " + i45.id + "] : ";
      for (var o42 = 0; o42 < s40.length; o42++) {
        u52 = u52 + "{ vertex:" + s40[o42].vertex.id + ", cost:" + s40[o42].cost + ", edge: " + (s40[o42].edge && s40[o42].edge.getId()) + " } ";
      }
      return u52;
    } }, { key: "getDiameter", value: function e78(t62) {
      var r53 = 0;
      for (var n91 = 0; n91 < this.nodes.length; n91++) {
        for (var i45 = 0; i45 < this.nodes.length; i45++) {
          if (i45 != n91) {
            var s40 = t5({ graph: this, source: this.nodes[n91], target: this.nodes[i45] });
            if (s40.path == null || s40.path.length == 0) {
              if (!t62)
                return Infinity;
            } else
              r53 = Math.max(r53, s40.pathDistance);
          }
        }
      }
      return r53;
    } }, { key: "getCentrality", value: function e78(t62) {
      var r53 = this.getVertex(t62);
      return (r53.getIndegreeCentrality() + r53.getOutdegreeCentrality()) / (this.getVertexCount() - 1);
    } }, { key: "getIndegreeCentrality", value: function e78(t62) {
      var r53 = this.getVertex(t62);
      return r53.getIndegreeCentrality() / (this.getVertexCount() - 1);
    } }, { key: "getOutdegreeCentrality", value: function e78(t62) {
      var r53 = this.getVertex(t62);
      return r53.getOutdegreeCentrality() / (this.getVertexCount() - 1);
    } }, { key: "getCloseness", value: function e78(t62) {
      return 1 / this.getFarness(t62);
    } }, { key: "getFarness", value: function e78(t62) {
      var r53 = this.getVertex(t62);
      var n91 = t5({ graph: this, source: r53, target: r53, processAll: true });
      var i45 = 0;
      for (var s40 in n91.dist) {
        i45 += n91.dist[s40];
      }
      return i45 / (this.getVertexCount() - 1);
    } }, { key: "getBetweenness", value: function e78(t62) {
      var r53 = this.getVertexCount(), n91 = (r53 - 1) * (r53 - 2) / 2, i45 = 0, s40 = function e79(t63, r54, n92, i46, s41) {
        var u53 = n92.parents[t63][r54];
        if (u53.length == 0) {
          var o42 = i46.slice();
          o42.unshift(t63);
          s41.push(o42);
        } else {
          for (var a49 = 0; a49 < u53.length; a49++) {
            if (i46.indexOf(u53[a49][0].id) == -1) {
              var l49 = i46.slice();
              l49.unshift(u53[a49][0].id);
              e79(t63, u53[a49][0].id, n92, l49, s41);
            }
          }
        }
      };
      var u52 = this.getVertex(t62);
      var a48 = i11({ graph: this, focus: u52 });
      for (var l48 in a48.paths) {
        for (var g31 in a48.paths[l48]) {
          if (l48 != g31) {
            var d32 = [];
            var h35 = 0;
            s40(l48, g31, a48, [g31], d32);
            for (var p49 = 0; p49 < d32.length; p49++) {
              var c47 = d32[p49].indexOf(u52.id);
              if (c47 > 0 && c47 < d32[p49].length - 1) {
                h35++;
              }
            }
            i45 += h35 / d32.length;
          }
        }
      }
      return i45 / n91;
    } }, { key: "inspect", value: function e78() {
      var t62 = "";
      for (var r53 = 0; r53 < this.nodes.length; r53++) {
        t62 += this.nodes[r53].inspect() + "\n";
      }
      return t62;
    } }, { key: "serialize", value: function e78() {
      var t62 = { nodes: [], edges: [], groups: [] }, r53, n91, i45;
      for (var s40 = 0; s40 < this.nodes.length; s40++) {
        r53 = this.nodes[s40];
        if (r53.transient) {
          continue;
        }
        t62.nodes.push(u2({}, r53.data));
        n91 = r53.getAllEdges();
        for (var u52 = 0; u52 < n91.length; u52++) {
          if (n91[u52].source == r53 || n91[u52].source.objectType === x8.objectType && n91[u52].source.getParent() == r53) {
            var o42 = { source: n91[u52].source.getFullId(), target: n91[u52].target.getFullId() };
            if (n91[u52].data) {
              o42.data = u2({}, n91[u52].data);
            }
            if (n91[u52].geometry) {
              o42.geometry = u2({}, n91[u52].geometry);
            }
            t62.edges.push(o42);
          }
        }
      }
      for (var a48 = 0; a48 < this.groups.length; a48++) {
        i45 = this.groups[a48];
        t62.groups.push(u2({}, i45.data));
        n91 = i45.getEdges();
        for (var l48 = 0; l48 < n91.length; l48++) {
          if (n91[l48].source === i45) {
            var g31 = { source: i45.getFullId(), target: n91[l48].target.getFullId() };
            if (n91[l48].data) {
              g31.data = u2({}, n91[l48].data);
            }
            if (n91[l48].geometry) {
              g31.geometry = u2({}, n91[l48].geometry);
            }
            t62.edges.push(g31);
          }
        }
      }
      return t62;
    } }, { key: "legacySerialize", value: function e78() {
      var t62 = { nodes: [], edges: [], ports: [], groups: [] }, r53, n91, i45, s40;
      for (var u52 = 0; u52 < this.nodes.length; u52++) {
        r53 = this.nodes[u52];
        t62.nodes.push(u2({}, r53.data));
        n91 = r53.getAllEdges();
        i45 = r53.getPorts();
        for (var o42 = 0; o42 < n91.length; o42++) {
          if (n91[o42].source == r53 || n91[o42].source.objectType === x8.objectType && n91[o42].source.getParent() == r53) {
            var a48 = { source: n91[o42].source.getFullId(), target: n91[o42].target.getFullId() };
            if (n91[o42].data) {
              a48.data = u2({}, n91[o42].data);
            }
            if (n91[o42].geometry) {
              a48.geometry = u2({}, n91[o42].geometry);
            }
            t62.edges.push(a48);
          }
        }
        for (var l48 = 0; l48 < i45.length; l48++) {
          var g31 = {};
          for (var h35 in i45[l48].data) {
            g31[h35] = i45[l48].data[h35];
          }
          g31.id = i45[l48].getFullId();
          t62.ports.push(g31);
        }
      }
      for (var p49 = 0; p49 < this.groups.length; p49++) {
        s40 = this.groups[p49];
        t62.groups.push(u2({}, s40.data));
        n91 = s40.getEdges();
        for (var c47 = 0; c47 < n91.length; c47++) {
          if (n91[c47].source === s40) {
            var f45 = { source: s40.getFullId(), target: n91[c47].target.getFullId() };
            if (n91[c47].data) {
              f45.data = u2({}, n91[c47].data);
            }
            if (n91[c47].geometry) {
              f45.geometry = u2({}, n91[c47].geometry);
            }
            t62.edges.push(f45);
          }
        }
      }
      return t62;
    } }, { key: "getClusters", value: function e78() {
      var t62 = [], r53 = {}, n91;
      var i45 = function e79(n92, i46) {
        if (n92 == null || r53[n92.id])
          return;
        if (i46 == null) {
          i46 = new r14(n92);
          t62.push(i46);
        } else {
          i46.addVertex(n92);
        }
        r53[n92.id] = true;
        var s40 = n92.getAllEdges();
        for (var u52 = 0; u52 < s40.length; u52++) {
          var o42 = s40[u52].source === n92 ? s40[u52].target : s40[u52].source;
          e79(o42, i46);
        }
      };
      for (n91 = 0; n91 < this.nodes.length; n91++) {
        i45(this.nodes[n91]);
      }
      for (n91 = 0; n91 < this.groups.length; n91++) {
        i45(this.groups[n91]);
      }
      return t62;
    } }]);
    return t61;
  }();
  var F7 = function() {
    function t61(e78) {
      var r53 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      t(this, t61);
      o(this, "atts", /* @__PURE__ */ new Map());
      o(this, "type", void 0);
      o(this, "objectType", void 0);
      o(this, "data", void 0);
      o(this, "graph", void 0);
      this.graph = e78;
      this.data = r53 || {};
      this.type = e78.getType(this.data);
    }
    n(t61, [{ key: "setAttribute", value: function e78(t62, r53) {
      this.atts.set(t62, r53);
    } }, { key: "getAttribute", value: function e78(t62) {
      return this.atts.get(t62);
    } }, { key: "getType", value: function e78() {
      return this.type;
    } }, { key: "setType", value: function e78(t62) {
      this.type = t62;
    } }]);
    return t61;
  }();
  var P5 = function(u52) {
    a(a48, u52);
    var o42 = s(a48);
    function a48(e78, t61, r53) {
      var u53;
      t(this, a48);
      u53 = o42.call(this, e78, t61);
      u53.graph = e78;
      u53.idFunction = r53;
      o(l(u53), "id", void 0);
      o(l(u53), "transient", void 0);
      o(l(u53), "edges", []);
      o(l(u53), "indegreeCentrality", 0);
      o(l(u53), "outdegreeCentrality", 0);
      o(l(u53), "nestedGraphs", []);
      o(l(u53), "graphs", []);
      u53.id = e78.getId(t61, r53);
      u53.data = typeof t61 === "string" ? { id: t61 } : t61;
      return u53;
    }
    n(a48, [{ key: "getIndegreeCentrality", value: function e78() {
      return this.indegreeCentrality;
    } }, { key: "getOutdegreeCentrality", value: function e78() {
      return this.outdegreeCentrality;
    } }, { key: "addGraph", value: function e78(t61) {
      t61 = typeof t61 === "string" ? new C6({ id: t61 }) : t61;
      this.graphs.push(t61);
      if (!t61.id)
        t61.id = "" + this.graphs.length;
      return t61;
    } }, { key: "getGraph", value: function e78(t61) {
      for (var r53 = 0; r53 < this.graphs.length; r53++) {
        if (this.graphs[r53].id === t61)
          return this.graphs[r53];
      }
    } }, { key: "getFullId", value: function e78() {
      return this.id;
    } }, { key: "getEdges", value: function e78(t61) {
      if (t61 == null || t61.filter == null)
        return this.edges;
      else {
        var r53 = [];
        for (var n91 = 0; n91 < this.edges.length; n91++) {
          if (t61.filter(this.edges[n91])) {
            r53.push(this.edges[n91]);
          }
        }
        return r53;
      }
    } }, { key: "getSourceEdges", value: function e78() {
      var t61 = this;
      return this.getEdges({ filter: function e79(r53) {
        return r53.source == t61;
      } });
    } }, { key: "getTargetEdges", value: function e78() {
      var t61 = this;
      return this.getEdges({ filter: function e79(r53) {
        return r53.target == t61;
      } });
    } }, { key: "addEdge", value: function e78(t61) {
      this.edges.push(t61);
      if (t61.source === this || !t61.isDirected()) {
        this.outdegreeCentrality++;
      }
      if (t61.target === this || !t61.isDirected()) {
        this.indegreeCentrality++;
      }
    } }, { key: "deleteEdge", value: function e78(t61) {
      var r53 = -1;
      for (var n91 = 0; n91 < this.edges.length; n91++) {
        if (this.edges[n91].getId() === t61.getId()) {
          r53 = n91;
          break;
        }
      }
      if (r53 > -1) {
        this.edges.splice(r53, 1);
        if (t61.source === this || !t61.isDirected()) {
          this.outdegreeCentrality--;
        }
        if (t61.target === this || !t61.isDirected()) {
          this.indegreeCentrality--;
        }
        return true;
      }
      return false;
    } }, { key: "inspect", value: function e78() {
      var t61 = "{ id:" + this.id + ", edges:[\n";
      for (var r53 = 0; r53 < this.edges.length; r53++) {
        t61 += this.edges[r53].inspect() + "\n";
      }
      t61 += "]}";
      return t61;
    } }, { key: "isChildOf", value: function e78(t61) {
      return false;
    } }]);
    return a48;
  }(F7);
  var j8 = function(u52) {
    a(a48, u52);
    var o42 = s(a48);
    function a48(e78, t61, r53) {
      var u53;
      t(this, a48);
      u53 = o42.call(this, e78, t61, r53);
      o(l(u53), "objectType", a48.objectType);
      o(l(u53), "ports", []);
      o(l(u53), "group", void 0);
      o(l(u53), "portMap", {});
      o(l(u53), "defaultInternalCost", 0);
      o(l(u53), "internalEdges", {});
      return u53;
    }
    n(a48, [{ key: "getAllEdges", value: function e78(t61) {
      var r53 = this.getEdges(t61).slice(0);
      for (var n91 = 0; n91 < this.ports.length; n91++) {
        r53.push.apply(r53, this.ports[n91].getEdges(t61));
      }
      return r53;
    } }, { key: "getAllSourceEdges", value: function e78() {
      var t61 = this.getSourceEdges().slice(0);
      for (var r53 = 0; r53 < this.ports.length; r53++) {
        t61.push.apply(t61, this.ports[r53].getSourceEdges());
      }
      return t61;
    } }, { key: "getAllTargetEdges", value: function e78() {
      var t61 = this.getTargetEdges().slice(0);
      for (var r53 = 0; r53 < this.ports.length; r53++) {
        t61.push.apply(t61, this.ports[r53].getTargetEdges());
      }
      return t61;
    } }, { key: "getDirectEdges", value: function e78(t61) {
      return this.getEdges(t61);
    } }, { key: "getDirectSourceEdges", value: function e78() {
      return this.getSourceEdges();
    } }, { key: "getDirectTargetEdges", value: function e78() {
      return this.getTargetEdges();
    } }, { key: "getPortEdges", value: function e78(t61) {
      var r53 = [];
      for (var n91 = 0; n91 < this.ports.length; n91++) {
        r53.push.apply(r53, this.ports[n91].getEdges(t61));
      }
      return r53;
    } }, { key: "getPortSourceEdges", value: function e78() {
      var t61 = [];
      for (var r53 = 0; r53 < this.ports.length; r53++) {
        t61.push.apply(t61, this.ports[r53].getSourceEdges());
      }
      return t61;
    } }, { key: "getPortTargetEdges", value: function e78() {
      var t61 = [];
      for (var r53 = 0; r53 < this.ports.length; r53++) {
        t61.push.apply(t61, this.ports[r53].getTargetEdges());
      }
      return t61;
    } }, { key: "getIndegreeCentrality", value: function e78() {
      var t61 = 0;
      for (var r53 = 0; r53 < this.ports.length; r53++) {
        t61 += this.ports[r53].getIndegreeCentrality();
      }
      return this.indegreeCentrality + t61;
    } }, { key: "getOutdegreeCentrality", value: function e78() {
      var t61 = 0;
      for (var r53 = 0; r53 < this.ports.length; r53++) {
        t61 += this.ports[r53].getOutdegreeCentrality();
      }
      return this.outdegreeCentrality + t61;
    } }, { key: "getPorts", value: function e78() {
      return this.ports;
    } }, { key: "addPort", value: function e78(t61, r53) {
      var n91 = this.graph.getId(t61, r53), i45 = this.getPort(n91);
      if (i45 == null) {
        i45 = new x8(this, t61, r53);
        this.ports.push(i45);
        this.portMap[i45.id] = i45;
      }
      return i45;
    } }, { key: "setPort", value: function e78(t61, r53) {
      var n91 = this.getPort(t61);
      if (!n91) {
        n91 = this.addPort({ id: t61 });
      }
      n91.data = r53;
      n91.setType(this.graph.getType(r53));
      return n91;
    } }, { key: "getPort", value: function e78(t61) {
      return this.portMap[t61];
    } }, { key: "_portId", value: function e78(t61) {
      return t61 instanceof x8 ? t61.id : t61;
    } }, { key: "renamePort", value: function e78(t61, r53) {
      if (this.portMap[t61.id]) {
        this.portMap[r53] = this.portMap[t61.id];
        delete this.portMap[t61.id];
        return true;
      } else {
        return false;
      }
    } }, { key: "removePort", value: function e78(t61) {
      var r53 = false;
      if (t61) {
        var n91 = this._portId(t61), i45 = -1;
        for (var s40 = 0; s40 < this.ports.length; s40++) {
          if (this.ports[s40].id === n91) {
            i45 = s40;
            break;
          }
        }
        if (i45 != -1) {
          var u53 = this.ports[i45];
          this.graph.deletePort(u53);
          this.ports.splice(i45, 1);
          r53 = true;
        }
        delete this.portMap[n91];
      }
      return r53;
    } }, { key: "setDefaultInternalCost", value: function e78(t61) {
      this.defaultInternalCost = t61;
    } }, { key: "getInternalEdge", value: function e78(t61, r53) {
      var n91 = this._portId(t61), i45 = this._portId(r53), s40 = { source: this.portMap[n91], target: this.portMap[i45], cost: Infinity };
      if (s40.source && s40.target) {
        var u53 = this.internalEdges[n91 + "-" + i45] || { cost: this.defaultInternalCost, directed: false };
        for (var o43 in u53) {
          s40[o43] = u53[o43];
        }
      }
      return s40;
    } }, { key: "setInternalEdge", value: function e78(t61, r53, n91, i45) {
      var s40 = this._portId(t61), u53 = this._portId(r53);
      this.internalEdges[s40 + "-" + u53] = { cost: n91 || this.defaultInternalCost, directed: i45 };
      return this.getInternalEdge(t61, r53);
    } }]);
    return a48;
  }(P5);
  o(j8, "objectType", "Node");
  var x8 = function(u52) {
    a(a48, u52);
    var o42 = s(a48);
    function a48(e78, t61, r53) {
      var u53;
      t(this, a48);
      u53 = o42.call(this, e78.graph, t61, r53);
      u53.parent = e78;
      o(l(u53), "objectType", a48.objectType);
      return u53;
    }
    n(a48, [{ key: "getParent", value: function e78() {
      return this.parent;
    } }, { key: "getFullId", value: function e78() {
      return this.parent.id + this.graph.getPortSeparator() + this.id;
    } }, { key: "isChildOf", value: function e78(t61) {
      return this.parent === t61;
    } }, { key: "getAllEdges", value: function e78(t61) {
      return this.getEdges(t61);
    } }]);
    return a48;
  }(P5);
  o(x8, "objectType", "Port");
  var V6 = function(u52) {
    a(a48, u52);
    var o42 = s(a48);
    function a48(e78, t61, r53) {
      var u53;
      t(this, a48);
      u53 = o42.call(this, e78, t61, r53);
      o(l(u53), "objectType", a48.objectType);
      o(l(u53), "members", []);
      o(l(u53), "_memberMap", {});
      return u53;
    }
    n(a48, [{ key: "addMember", value: function e78(t61) {
      if (this._memberMap[t61.id] != null) {
        return false;
      } else {
        this.members.push(t61);
        this._memberMap[t61.id] = t61;
        t61.group = this;
        return true;
      }
    } }, { key: "getMemberCount", value: function e78() {
      return this.members.length;
    } }, { key: "getMembers", value: function e78() {
      return this.members;
    } }, { key: "removeMember", value: function e78(t61) {
      var r53 = typeof t61 === "string" ? this._memberMap[t61] : t61;
      if (r53) {
        var n91 = this.members.indexOf(r53);
        if (n91 != -1) {
          this.members.splice(n91, 1);
          delete this._memberMap[r53.id];
        }
        if (r53.group && r53.group.id === this.id) {
          delete r53.group;
        }
        return true;
      } else {
        return false;
      }
    } }, { key: "getAllDirectEdges", value: function e78(t61) {
      var r53 = [], n91;
      r53.push.apply(r53, this.getEdges(t61).slice(0));
      var i45 = this.getPorts();
      for (n91 = 0; n91 < i45.length; n91++) {
        r53.push.apply(r53, i45[n91].getEdges(t61));
      }
      return r53;
    } }, { key: "getInternalEdges", value: function e78(t61) {
      var r53 = [], n91 = {};
      for (var i45 = 0; i45 < this.members.length; i45++) {
        Array.prototype.push.apply(r53, this.members[i45].getAllEdges(t61).filter(function(e79) {
          var t62 = e79.getId(), r54 = n91[t62] == null;
          n91[t62] = true;
          return r54;
        }));
      }
      return r53;
    } }]);
    return a48;
  }(j8);
  o(V6, "objectType", "Group");
  var S8 = function(u52) {
    a(a48, u52);
    var o42 = s(a48);
    function a48(e78) {
      var t61;
      t(this, a48);
      t61 = o42.call(this, e78.graph, e78.data);
      o(l(t61), "objectType", a48.objectType);
      o(l(t61), "source", void 0);
      o(l(t61), "target", void 0);
      o(l(t61), "cost", void 0);
      o(l(t61), "directed", void 0);
      o(l(t61), "id", void 0);
      o(l(t61), "geometry", void 0);
      t61.source = e78.source;
      t61.target = e78.target;
      t61.cost = e78.cost || 1;
      t61.directed = !(e78.directed === false);
      t61.id = e78.id;
      return t61;
    }
    n(a48, [{ key: "getCost", value: function e78() {
      return this.cost;
    } }, { key: "setCost", value: function e78(t61) {
      this.cost = t61;
    } }, { key: "getId", value: function e78() {
      return this.id == null ? this.source.id + "_" + this.target.id : this.id;
    } }, { key: "getFullId", value: function e78() {
      return this.getId();
    } }, { key: "setId", value: function e78(t61) {
      this.id = t61;
    } }, { key: "isDirected", value: function e78() {
      return this.directed;
    } }, { key: "setDirected", value: function e78(t61) {
      this.directed = t61;
    } }, { key: "inspect", value: function e78() {
      if (this.id != null)
        return "{ id:" + this.id + ", cost:" + this.cost + ", directed:" + this.directed + ", source:" + this.source.id + ", target:" + this.target.id + "}";
    } }]);
    return a48;
  }(F7);
  o(S8, "objectType", "Edge");

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/constants.js
  var e14 = "dataLoadStart";
  var a15 = "dataAppendStart";
  var r15 = "dataLoadEnd";
  var d12 = "dataAppendEnd";
  var v13 = "dataUpdated";
  var t6 = "destroy";
  var o15 = "graphClearStart";
  var p13 = "graphCleared";
  var n9 = "graphChanged";
  var g10 = "group:updated";
  var h14 = "node:updated";
  var u15 = "port:updated";
  var s12 = "edge:updated";
  var m14 = "edge:added";
  var C7 = "node:added";
  var l12 = "edge:removed";
  var y11 = "node:removed";
  var c13 = "port:added";
  var T4 = "port:removed";
  var z6 = "edge:target";
  var E6 = "edge:source";
  var S9 = "select";
  var A8 = "deselect";
  var L6 = "selection:cleared";
  var R5 = "edge:pathRestored";
  var U4 = "edge:pathEdited";
  var w10 = "edge:typeChanged";
  var x9 = "node:typeChanged";
  var b12 = "port:typeChanged";
  var f15 = "group:typeChanged";
  var k8 = "group:move";
  var q5 = "group:move:end";
  var B7 = "internal:group:sizeChanged";
  var D6 = "internal:group:sizeChangedRedo";
  var F8 = "internal:group:sizeChangedUndo";
  var G6 = "node:move:start";
  var H4 = "node:move";
  var I8 = "node:move:end";
  var J3 = "renderer:added";
  var K4 = "undoredo:update";
  var M9 = { portType: "portType", edgeType: "edgeType" };
  var N7 = "width";
  var O9 = "height";

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/autosaver.js
  var l13 = ["node", "port", "edge", "group"];
  var c14 = [":added", ":removed", ":updated", ":moved"];
  var f16 = ["edge"];
  var v14 = [":source", ":target"];
  var d13 = function e15(t61, n91, r53, i45) {
    for (var o42 = 0; o42 < n91.length; o42++) {
      for (var a48 = 0; a48 < r53.length; a48++) {
        h15(t61, n91[o42] + r53[a48], i45);
      }
    }
  };
  var h15 = function e16(t61, n91, r53) {
    t61.instance.bind(n91, r53);
    t61.bindings.push([n91, r53]);
  };
  var m15 = function() {
    function s40(e78, m44) {
      var p49 = this;
      t(this, s40);
      this.instance = e78;
      o(this, "bindings", []);
      o(this, "timer", null);
      if (m44.saveUrl == null) {
        if (m44.autoSaveHandler == null) {
          throw new Error("JSPLUMB autosave: neither saveUrl nor autoSaveHandler was specified");
        }
      }
      function b28(e79) {
        return function() {
          e79 && e79.apply(e79, arguments);
          m44.onAfterAutoSave && m44.onAfterAutoSave();
        };
      }
      var g31 = false;
      var S20 = function t61() {
        if (!g31) {
          try {
            m44.onBeforeAutoSave && m44.onBeforeAutoSave();
          } catch (e79) {
          }
          if (m44.autoSaveHandler != null) {
            m44.autoSaveHandler(e78);
          } else {
            e78.save({ type: m44.type || c11, url: m44.saveUrl, success: b28(m44.onAutoSaveSuccess), error: b28(m44.onAutoSaveError), headers: m44.saveHeaders });
          }
        }
      };
      var A19 = function e79() {
        if (m44.autoSaveDebounceTimeout == null) {
          S20();
        } else {
          if (p49.timer == null) {
            p49.timer = setTimeout(S20, m44.autoSaveDebounceTimeout);
          } else {
            clearTimeout(p49.timer);
            p49.timer = setTimeout(S20, m44.autoSaveDebounceTimeout);
          }
        }
      };
      h15(this, e14, function() {
        g31 = true;
      });
      h15(this, r15, function() {
        g31 = false;
      });
      h15(this, o15, function() {
        g31 = true;
      });
      h15(this, p13, function() {
        g31 = false;
      });
      d13(this, l13, c14, A19);
      d13(this, f16, v14, A19);
      d13(this, ["group:"], ["member:added", "member:removed"], A19);
    }
    n(s40, [{ key: "discard", value: function e78() {
      var t61 = this;
      this.bindings.forEach(function(e79) {
        return t61.instance.unbind(e79[0], e79[1]);
      });
      this.bindings.length = 0;
    } }]);
    return s40;
  }();
  var p14 = function e17(r53) {
    t(this, e17);
    this.instance = r53;
    o(this, "bindings", []);
    var i45 = function e78() {
      r53.fire(v13);
    };
    d13(this, l13, c14, i45);
    d13(this, f16, v14, i45);
    d13(this, ["group:"], ["member:added", "member:removed"], i45);
  };

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/model/path.js
  var l14 = function() {
    function l48(t61, i45) {
      t(this, l48);
      this.toolkit = t61;
      o(this, "result", void 0);
      o(this, "vertices", []);
      o(this, "vertexMap", {});
      this.result = t61.getGraph().findPath(i45.source, i45.target, i45.strict, i45.nodeFilter, i45.edgeFilter);
      for (var s40 = 0; s40 < this.result.path.length; s40++) {
        this.vertices.push(this.result.path[s40].vertex);
        this.vertexMap[this.result.path[s40].vertex.getFullId()] = [this.result.path[s40].vertex, s40];
      }
    }
    n(l48, [{ key: "deleteEdges", value: function t61() {
      for (var e78 = 0; e78 < this.result.path.length; e78++) {
        if (this.result.path[e78].edge) {
          this.toolkit.removeEdge(this.result.path[e78].edge);
        }
      }
      return this;
    } }, { key: "deleteVertices", value: function t61() {
      for (var e78 = 0; e78 < this.result.path.length; e78++) {
        this.toolkit.removeNode(this.result.path[e78].vertex);
      }
      return this;
    } }, { key: "contains", value: function t61(e78, r53) {
      var s40 = this.toolkit.findGraphObject(e78), h35 = false;
      if (s40) {
        for (var u52 = 0; u52 < this.result.path.length; u52++) {
          if (this.result.path[u52].vertex == s40 || this.result.path[u52].edge == s40 || !r53 && this.result.path[u52].vertex.objectType == x8.objectType && this.result.path[u52].vertex.isChildOf(s40)) {
            h35 = true;
            break;
          }
        }
      }
      return h35;
    } }, { key: "getVertices", value: function t61() {
      return this.vertices;
    } }, { key: "getVertex", value: function t61(e78) {
      return this.vertexMap[typeof e78 === "string" ? e78 : e78.id][0];
    } }, { key: "getAllEdgesFor", value: function t61(e78) {
      var r53 = this.vertexMap[e78.id][1];
      if (r53 < this.result.path.length - 1) {
        return [this.result.path[r53 + 1].edge];
      } else
        return [];
    } }, { key: "filter", value: function t61(e78, r53) {
      Q("not implemented.");
    } }, { key: "_each", value: function t61(e78, r53) {
      for (var i45 = r53 || 0; i45 < this.result.path.length; i45++) {
        try {
          e78(i45, this.result.path[i45]);
        } catch (t62) {
          Q("Path iterator function failed", t62);
        }
      }
    } }, { key: "each", value: function t61(e78) {
      this._each(function(t62, r53) {
        e78(t62, r53);
      });
    } }, { key: "eachVertex", value: function t61(e78) {
      this._each(function(t62, r53) {
        e78(t62, r53.vertex);
      });
    } }, { key: "eachEdge", value: function t61(e78) {
      this._each(function(t62, r53) {
        e78(t62, r53.edge);
      }, 1);
    } }, { key: "eachNode", value: function t61(e78) {
      this._each(function(t62, r53) {
        if (f14(r53.vertex)) {
          e78(t62, r53.vertex);
        }
      });
    } }, { key: "eachGroup", value: function t61(e78) {
      this._each(function(t62, r53) {
        if (y10(r53.vertex)) {
          e78(t62, r53.vertex);
        }
      });
    } }, { key: "getVertexCount", value: function t61() {
      return this.result.path.length;
    } }, { key: "getNodeAt", value: function t61(e78) {
      return this.result.path[e78].vertex;
    } }, { key: "getEdgeCount", value: function t61() {
      return this.result.path.length == 0 ? 0 : this.result.path.length - 1;
    } }, { key: "getEdgeAt", value: function t61(e78) {
      if (e78 < 0)
        e78 = this.result.path.length - 1 + e78;
      return this.result.path.length > e78 + 1 ? this.result.path[e78 + 1].edge : null;
    } }, { key: "deleteAll", value: function t61() {
      this.deleteVertices();
    } }, { key: "isEmpty", value: function t61() {
      return this.result.path.length == 0;
    } }, { key: "getCost", value: function t61() {
      return this.result.pathDistance;
    } }, { key: "exists", value: function t61() {
      return this.result.pathDistance != null;
    } }]);
    return l48;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/event-constants.js
  var r16 = "connection";
  var n10 = "internal.connection";
  var a16 = "connection:detach";
  var o16 = "connection:move";
  var d14 = "endpoint:replaced";
  var v15 = "internal.endpoint:unregistered";
  var c15 = "internal.connection:detached";
  var t7 = "group:added";
  var p15 = "group:collapse";
  var i12 = "group:expand";
  var g11 = "group:member:added";
  var m16 = "group:member:removed";
  var u16 = "group:removed";
  var s13 = "group:nested:added";
  var h16 = "group:nested:removed";
  var x10 = "zoom";

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/util/event-generator.js
  var a17 = function() {
    function t61() {
      t(this, t61);
      o(this, "_listeners", {});
      o(this, "eventsSuspended", false);
      o(this, "tick", false);
      o(this, "eventsToDieOn", { ready: true });
      o(this, "queue", []);
    }
    n(t61, [{ key: "fire", value: function e78(t62, s40, i45) {
      var n91 = null;
      if (!this.tick) {
        this.tick = true;
        if (!this.eventsSuspended && this._listeners[t62]) {
          var u52 = this._listeners[t62].length, l48 = 0, h35 = false;
          if (!this.shouldFireEvent || this.shouldFireEvent(t62, s40, i45)) {
            while (!h35 && l48 < u52 && n91 !== false) {
              if (this.eventsToDieOn[t62]) {
                this._listeners[t62][l48](s40, i45);
              } else {
                try {
                  n91 = this._listeners[t62][l48](s40, i45);
                } catch (e79) {
                  Q("jsPlumb: fire failed for event " + t62 + " : " + (e79.message || e79));
                }
              }
              l48++;
              if (this._listeners == null || this._listeners[t62] == null) {
                h35 = true;
              }
            }
          }
        }
        this.tick = false;
        this._drain();
      } else {
        this.queue.unshift(arguments);
      }
      return n91;
    } }, { key: "_drain", value: function e78() {
      var t62 = this.queue.pop();
      if (t62) {
        this.fire.apply(this, t62);
      }
    } }, { key: "unbind", value: function e78(t62, s40) {
      if (arguments.length === 0) {
        this._listeners = {};
      } else if (arguments.length === 1) {
        if (typeof t62 === "string") {
          delete this._listeners[t62];
        } else if (t62.__jsPlumb) {
          var i45;
          for (var n91 in t62.__jsPlumb) {
            i45 = t62.__jsPlumb[n91];
            D(this._listeners[i45] || [], t62);
          }
        }
      } else if (arguments.length === 2) {
        D(this._listeners[t62] || [], s40);
      }
      return this;
    } }, { key: "getListener", value: function e78(t62) {
      return this._listeners[t62] || [];
    } }, { key: "isSuspendEvents", value: function e78() {
      return this.eventsSuspended;
    } }, { key: "setSuspendEvents", value: function e78(t62) {
      this.eventsSuspended = t62;
    } }, { key: "bind", value: function e78(t62, s40, i45) {
      var n91 = this;
      var r53 = function e79(t63) {
        _(n91._listeners, t63, s40, i45);
        s40.__jsPlumb = s40.__jsPlumb || {};
        s40.__jsPlumb[$()] = t63;
      };
      r53(t62);
      return this;
    } }, { key: "silently", value: function e78(t62) {
      this.setSuspendEvents(true);
      try {
        t62();
      } catch (e79) {
        Q("Cannot execute silent function " + e79);
      }
      this.setSuspendEvents(false);
    } }]);
    return t61;
  }();
  var f17 = function(n91) {
    a(u52, n91);
    var r53 = s(u52);
    function u52() {
      t(this, u52);
      return r53.apply(this, arguments);
    }
    n(u52, [{ key: "shouldFireEvent", value: function e78(t61, s40, i45) {
      return true;
    } }]);
    return u52;
  }(a17);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/selection.js
  var F9;
  (function(e78) {
    e78["mixed"] = "mixed";
    e78["isolated"] = "isolated";
    e78["nodesOnly"] = "nodesOnly";
    e78["groupsOnly"] = "groupsOnly";
    e78["edgesOnly"] = "edgesOnly";
  })(F9 || (F9 = {}));
  var N8 = function(x27) {
    a(C19, x27);
    var N15 = s(C19);
    function C19(e78, t61) {
      var r53;
      t(this, C19);
      r53 = N15.call(this);
      r53.toolkit = e78;
      o(l(r53), "maxNodes", Infinity);
      o(l(r53), "maxEdges", Infinity);
      o(l(r53), "maxGroups", Infinity);
      o(l(r53), "_nodes", []);
      o(l(r53), "_groups", []);
      o(l(r53), "_edges", []);
      o(l(r53), "capacityPolicy", void 0);
      o(l(r53), "generator", void 0);
      o(l(r53), "onReload", void 0);
      o(l(r53), "onBeforeReload", void 0);
      o(l(r53), "onClear", void 0);
      o(l(r53), "autoFill", void 0);
      o(l(r53), "dataSource", void 0);
      o(l(r53), "_$_objMap", {});
      o(l(r53), "_mode", void 0);
      o(l(r53), "_loading", false);
      o(l(r53), "edgeFactory", void 0);
      t61 = t61 || {};
      r53.edgeFactory = e78.edgeFactory;
      r53.generator = t61.generator;
      r53.onReload = t61.onReload;
      r53.onBeforeReload = t61.onBeforeReload;
      r53.autoFill = t61.autoFill === true;
      r53.onClear = t61.onClear || function() {
      };
      r53._mode = t61.mode || F9.mixed;
      r53.toolkit.bind(y11, function(e79) {
        r53._removeOne(e79.node);
      });
      r53.toolkit.bind(u16, function(e79) {
        r53._removeOne(e79.group);
      });
      r53.toolkit.bind(T4, function(e79) {
        r53._removeOne(e79.port);
      });
      r53.toolkit.bind(l12, function(e79) {
        r53._removeOne(e79.edge);
      });
      r53.toolkit.bind(z6, function(e79) {
        if (r53._$_objMap[e79.edge.getFullId()]) {
          r53.fire(z6, e79);
        }
      });
      r53.toolkit.bind(E6, function(e79) {
        if (r53._$_objMap[e79.edge.getFullId()]) {
          r53.fire(E6, e79);
        }
      });
      r53.toolkit.bind(C7, function(e79) {
        if (r53.generator && r53.autoFill && !r53._loading) {
          r53.reload();
        }
      });
      r53.toolkit.bind(t7, function(e79) {
        if (r53.generator && r53.autoFill && !r53._loading) {
          r53.reload();
        }
      });
      r53.toolkit.bind(h14, function(e79) {
        if (r53._$_objMap[e79.vertex.getFullId()]) {
          r53.fire(h14, e79);
        }
      });
      r53.toolkit.bind(g10, function(e79) {
        if (r53._$_objMap[e79.vertex.getFullId()]) {
          r53.fire(g10, e79);
        }
      });
      r53.toolkit.bind(s12, function(e79) {
        if (r53._$_objMap[e79.edge.getFullId()]) {
          r53.fire(s12, e79);
        }
      });
      r53.toolkit.bind(u15, function(e79) {
        if (e79.port != null && r53._$_objMap[e79.port.getFullId()]) {
          r53.fire(u15, e79);
        }
      });
      r53.toolkit.bind(p13, function() {
        r53.clear();
      });
      r53.toolkit.bind(r15, function() {
        r53.reload();
      });
      r53.setCapacityPolicy(C19.DISCARD_EXISTING);
      if (t61.lazy !== true) {
        r53.reload();
      }
      return r53;
    }
    n(C19, [{ key: "_getList", value: function e78(t61) {
      return t61.objectType === S8.objectType ? this._edges : t61.objectType === j8.objectType ? this._nodes : this._groups;
    } }, { key: "setMode", value: function e78(t61) {
      this._mode = t61;
      if (t61 === F9.isolated) {
        this._clearAll();
      } else if (t61 === F9.edgesOnly) {
        this._clearVertices();
      } else if (t61 === F9.nodesOnly) {
        this._clearEdges();
        this._clearGroups();
      } else if (t61 === F9.groupsOnly) {
        this._clearEdges();
        this._clearNodes();
      }
    } }, { key: "_pushToList", value: function e78(t61) {
      var o42 = [];
      var i45 = this._getList(t61), n91 = t61.objectType === S8.objectType ? this.maxEdges : t61.objectType === j8.objectType ? this.maxNodes : this.maxGroups;
      if (i45.length >= n91) {
        if (this.capacityPolicy === C19.DISCARD_NEW) {
          return false;
        } else {
          o42 = i45.splice(0, 1);
          this._fireListEvent(o42[0], ":removed");
          delete this._$_objMap[o42[0].getFullId()];
        }
      }
      i45.push(t61);
      this._fireListEvent(t61, ":added");
      return o42;
    } }, { key: "_fireListEvent", value: function e78(t61, o42) {
      var i45 = t61.objectType.toLowerCase() + o42, n91 = { Group: function e79(t62) {
        return { data: t62.data, group: t62 };
      }, Node: function e79(t62) {
        return { data: t62.data, node: t62 };
      }, Port: function(e79) {
        function t62(t63) {
          return e79.apply(this, arguments);
        }
        t62.toString = function() {
          return e79.toString();
        };
        return t62;
      }(function(e79) {
        return { data: e79.data, node: e79.getParent(), port: e79 };
      }), Edge: function e79(t62) {
        return { data: t62.data, edge: t62 };
      } };
      this.fire(i45, n91[t61.objectType](t61));
    } }, { key: "_addOne", value: function e78(t61, o42) {
      if (this._modePermitsAddition(t61) && !this._$_objMap[t61.getFullId()]) {
        var i45 = this._pushToList(t61);
        if (i45 === false) {
          return [[], []];
        } else {
          this._$_objMap[t61.getFullId()] = t61;
          if (o42)
            o42(t61, true);
          return [[t61], i45];
        }
      }
      return [[], []];
    } }, { key: "_modePermitsAddition", value: function e78(t61) {
      if (this._mode === F9.mixed) {
        return true;
      } else if (this._mode === F9.nodesOnly && t61.objectType === j8.objectType) {
        return true;
      } else if (this._mode === F9.groupsOnly && t61.objectType === V6.objectType) {
        return true;
      } else if (this._mode === F9.edgesOnly && t61.objectType === S8.objectType) {
        return true;
      } else if (this._mode === F9.isolated) {
        if (t61.objectType === S8.objectType) {
          return this._nodes.length === 0 && this._groups.length === 0;
        } else {
          return this._edges.length === 0;
        }
      } else {
        return false;
      }
    } }, { key: "_removeOne", value: function e78(t61, o42, i45) {
      var n91 = t61.getFullId();
      var r53 = E(this._getList(t61), function(e79) {
        return e79.getFullId() == n91;
      });
      if (r53) {
        this._fireListEvent(t61, ":removed");
      }
      delete this._$_objMap[t61.getFullId()];
      if (o42) {
        o42(t61, false);
      }
      return [[], []];
    } }, { key: "_toggle", value: function e78(t61, o42) {
      if (this._$_objMap[t61.getFullId()])
        return this._removeOne(t61, o42);
      else
        return this._addOne(t61, o42);
    } }, { key: "_makeSenseOf", value: function e78(t61, o42, i45) {
      var n91 = this;
      var r53 = [], u52 = [], l48;
      if (t61 == null)
        return r53;
      var s40 = function e79(t62) {
        var s41;
        if (l2(t62)) {
          s41 = n91.toolkit.getNode(t62) || n91.toolkit.getEdge(t62) || n91.toolkit.getGroup(t62);
          if (s41 != null) {
            l48 = o42(s41, i45);
            r53.push.apply(r53, l48[0]);
            u52.push.apply(u52, l48[1]);
          }
        } else if (t62.eachVertex && t62.eachEdge) {
          t62.eachVertex(function(t63, o43) {
            e79(o43);
          });
          t62.eachEdge(function(t63, o43) {
            e79(o43);
          });
        } else if (t62.each) {
          t62.each(function(t63, o43) {
            e79(o43.vertex || o43);
          });
        } else if (t62.length != null) {
          for (var a48 = 0; a48 < t62.length; a48++) {
            e79(t62[a48]);
          }
        } else {
          l48 = o42(t62, i45);
          r53.push.apply(r53, l48[0]);
          u52.push.apply(u52, l48[1]);
        }
      };
      s40(t61);
      return [r53, u52];
    } }, { key: "remove", value: function e78(t61, o42) {
      return this._makeSenseOf(t61, this._removeOne.bind(this), o42);
    } }, { key: "append", value: function e78(t61, o42) {
      return this._makeSenseOf(t61, this._addOne.bind(this), o42);
    } }, { key: "toggle", value: function e78(t61, o42) {
      return this._makeSenseOf(t61, this._toggle.bind(this), o42);
    } }, { key: "setMaxNodes", value: function e78(t61) {
      this.maxNodes = t61;
    } }, { key: "setMaxGroups", value: function e78(t61) {
      this.maxGroups = t61;
    } }, { key: "setMaxEdges", value: function e78(t61) {
      this.maxEdges = t61;
    } }, { key: "setCapacityPolicy", value: function e78(t61) {
      this.capacityPolicy = t61;
    } }, { key: "_clearEdges", value: function e78() {
      for (var t61 = this._edges.length, o42 = 0; o42 < t61; o42++) {
        this._removeOne(this._edges[0]);
      }
    } }, { key: "_clearNodes", value: function e78() {
      for (var t61 = this._nodes.length, o42 = 0; o42 < t61; o42++) {
        this._removeOne(this._nodes[0]);
      }
    } }, { key: "_clearGroups", value: function e78() {
      for (var t61 = this._groups.length, o42 = 0; o42 < t61; o42++) {
        this._removeOne(this._groups[0]);
      }
    } }, { key: "_clearVertices", value: function e78() {
      this._clearNodes();
      this._clearGroups();
    } }, { key: "_clearAll", value: function e78() {
      this._clearVertices();
      this._clearEdges();
    } }, { key: "clear", value: function e78(t61) {
      this._nodes.length = 0;
      this._edges.length = 0;
      this._groups.length = 0;
      this._$_objMap = {};
      this.fire(o15);
      if (!t61) {
        this.onClear(this);
      }
    } }, { key: "_filterEdgeList", value: function e78(t61) {
      var o42 = [];
      for (var i45 = 0; i45 < t61.length; i45++) {
        if (this._$_objMap[t61[i45].getId()] != null)
          o42.push(t61[i45]);
      }
      return o42;
    } }, { key: "reload", value: function e78() {
      if (this.generator != null) {
        this.onBeforeReload && this.onBeforeReload();
        this.clear();
        this._loading = true;
        this.fire(e14);
        this.generator(this, this.toolkit);
        this.fire(r15);
        this.onReload && this.onReload();
        this._loading = false;
      }
    } }, { key: "each", value: function e78(t61, o42) {
      var i45 = o42 === S8.objectType ? this._edges : o42 === V6.objectType ? this._groups : this._nodes;
      for (var n91 = 0; n91 < i45.length; n91++) {
        try {
          t61(n91, i45[n91]);
        } catch (e79) {
        }
      }
    } }, { key: "eachNode", value: function e78(t61) {
      this.each(t61, j8.objectType);
    } }, { key: "eachGroup", value: function e78(t61) {
      this.each(t61, V6.objectType);
    } }, { key: "eachVertex", value: function e78(t61) {
      this.each(t61, j8.objectType);
      this.each(t61, V6.objectType);
    } }, { key: "eachEdge", value: function e78(t61) {
      this.each(t61, S8.objectType);
    } }, { key: "getNodeCount", value: function e78() {
      return this._nodes.length;
    } }, { key: "getNodeAt", value: function e78(t61) {
      return this._nodes[t61];
    } }, { key: "getNodes", value: function e78() {
      return this._nodes;
    } }, { key: "getNode", value: function e78(t61) {
      var o42 = O2(this._nodes, function(e79) {
        return e79.id === t61;
      });
      return o42 === -1 ? null : this._nodes[o42];
    } }, { key: "getGroupAt", value: function e78(t61) {
      return this._groups[t61];
    } }, { key: "getGroups", value: function e78() {
      return this._groups;
    } }, { key: "getGroup", value: function e78(t61) {
      var o42 = O2(this._groups, function(e79) {
        return e79.id === t61;
      });
      return o42 === -1 ? null : this._groups[o42];
    } }, { key: "getGroupCount", value: function e78() {
      return this._groups.length;
    } }, { key: "getAll", value: function e78() {
      var t61 = [];
      Array.prototype.push.apply(t61, this._nodes);
      Array.prototype.push.apply(t61, this._edges);
      Array.prototype.push.apply(t61, this._groups);
      return t61;
    } }, { key: "getAllEdgesFor", value: function e78(t61, o42) {
      return this._filterEdgeList(t61.getAllEdges({ filter: o42 }));
    } }, { key: "getSourceEdgesFor", value: function e78(t61) {
      return this._filterEdgeList(t61.getSourceEdges());
    } }, { key: "getEdgeCount", value: function e78() {
      return this._edges.length;
    } }, { key: "getEdgeAt", value: function e78(t61) {
      return this._edges[t61];
    } }, { key: "getEdges", value: function e78() {
      return this._edges;
    } }, { key: "shouldFireEvent", value: function e78(t61, o42, i45) {
      return true;
    } }, { key: "getGroupType", value: function e78(t61) {
      return this.toolkit.getGroupType(t61);
    } }, { key: "getNodeType", value: function e78(t61) {
      return this.toolkit.getNodeType(t61);
    } }, { key: "getModel", value: function e78() {
      return this.toolkit.getModel();
    } }, { key: "getGraph", value: function e78() {
      return this.toolkit.getGraph();
    } }, { key: "setSuspendGraph", value: function e78(t61) {
      this.toolkit.setSuspendGraph(t61);
    } }, { key: "getNodeId", value: function e78(t61) {
      return this.toolkit.getNodeId(t61);
    } }, { key: "getGroupId", value: function e78(t61) {
      return this.toolkit.getGroupId(t61);
    } }, { key: "getPortType", value: function e78(t61) {
      return this.toolkit.getPortType(t61);
    } }, { key: "addPort", value: function e78(t61, o42, i45) {
      return this.toolkit.addPort(t61, o42, i45);
    } }, { key: "getPortId", value: function e78(t61) {
      return this.toolkit.getPortId(t61);
    } }, { key: "getEdge", value: function e78(t61) {
      return this.toolkit.getEdge(t61);
    } }, { key: "addEdge", value: function e78(t61, o42, i45) {
      return this.toolkit.addEdge(t61, o42, i45);
    } }, { key: "edgeMoved", value: function e78(t61, o42, i45) {
      this.toolkit.edgeMoved(t61, o42, i45);
    } }, { key: "removeEdge", value: function e78(t61) {
      this.toolkit.removeEdge(t61);
    } }, { key: "setEdgeGeometry", value: function e78(t61, o42, i45) {
      this.toolkit.setEdgeGeometry(t61, o42, i45);
    } }, { key: "getEdgeType", value: function e78(t61) {
      return this.toolkit.getEdgeType(t61);
    } }, { key: "addToGroup", value: function e78(t61, o42, i45, n91) {
      return this.toolkit.addToGroup(t61, o42, n91);
    } }, { key: "removeFromGroup", value: function e78(t61, o42, i45, n91) {
      return this.toolkit.removeFromGroup(t61, o42, i45, n91);
    } }, { key: "getVertex", value: function e78(t61) {
      return this.getNode(t61) || this.getGroup(t61);
    } }, { key: "containsVertex", value: function e78(t61) {
      return this.getVertex(t61) != null;
    } }, { key: "getObjectInfo", value: function e78(t61) {
      return this.toolkit.getObjectInfo(t61);
    } }, { key: "beforeConnect", value: function e78(t61, o42, i45) {
      return this.toolkit.beforeConnect(t61, o42, i45);
    } }, { key: "beforeMoveConnection", value: function e78(t61, o42, i45) {
      return this.toolkit.beforeMoveConnection(t61, o42, i45);
    } }, { key: "beforeStartConnect", value: function e78(t61, o42) {
      return this.toolkit.beforeStartConnect(t61, o42);
    } }, { key: "beforeDetach", value: function e78(t61, o42, i45) {
      return this.toolkit.beforeDetach(t61, o42, i45);
    } }, { key: "beforeStartDetach", value: function e78(t61, o42) {
      return this.toolkit.beforeStartDetach(t61, o42);
    } }, { key: "debugEnabled", get: function e78() {
      return this.toolkit.debugEnabled;
    } }, { key: "batch", value: function e78(t61) {
      this.toolkit.batch(t61);
    } }, { key: "_createSelection", value: function e78(t61) {
      return new C19(this.toolkit, { onClear: t61 || function() {
      } });
    } }, { key: "filter", value: function e78(t61, o42) {
      var i45 = typeof t61 === "function" ? t61 : function(e79) {
        var i46 = e79.data, n92 = false;
        for (var r53 in t61) {
          var u52 = t61[r53] === i46[r53];
          if (!u52 && !o42)
            return false;
          n92 = n92 || u52;
        }
        return n92;
      }, n91 = this._createSelection();
      this.eachNode(function(e79, t62) {
        if (i45(t62))
          n91.append(t62);
        var o43 = t62.getPorts();
        for (var r53 = 0; r53 < o43.length; r53++) {
          if (i45(o43[r53]))
            n91.append(o43[r53]);
        }
      });
      this.eachEdge(function(e79, t62) {
        if (i45(t62))
          n91.append(t62);
      });
      this.eachGroup(function(e79, t62) {
        if (i45(t62))
          n91.append(t62);
      });
      return n91;
    } }]);
    return C19;
  }(a17);
  o(N8, "DISCARD_EXISTING", "discardExisting");
  o(N8, "DISCARD_NEW", "discardNew");

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/datamodel/data-model.js
  var e18 = function() {
    function e78(i45, o42) {
      t(this, e78);
      this.toolkit = i45;
      o(this, "nodeDefinitions", /* @__PURE__ */ new Map());
      o(this, "groupDefinitions", /* @__PURE__ */ new Map());
      o(this, "portDefinitions", /* @__PURE__ */ new Map());
      if (o42 != null) {
        var r53 = o42.nodes || {};
        for (var s40 in r53) {
          this.nodeDefinitions.set(s40, r53[s40]);
        }
        var f45 = o42.groups || {};
        for (var a48 in f45) {
          this.groupDefinitions.set(a48, f45[a48]);
        }
        var u52 = o42.ports || {};
        for (var p49 in u52) {
          this.portDefinitions.set(p49, u52[p49]);
        }
      }
    }
    n(e78, [{ key: "getNodeDefinition", value: function i45(t61) {
      return this.nodeDefinitions.get(t61) || {};
    } }, { key: "getGroupDefinition", value: function i45(t61) {
      return this.groupDefinitions.get(t61) || {};
    } }, { key: "getPortDefinition", value: function i45(t61) {
      return this.portDefinitions.get(t61) || {};
    } }]);
    return e78;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/undo-redo/edge-action.js
  var a18 = function() {
    function e78(t61, r53, a48) {
      t(this, e78);
      this.obj = t61;
      this.toolkit = r53;
      this.manager = a48;
      o(this, "source", void 0);
      o(this, "target", void 0);
      o(this, "edgeId", void 0);
      o(this, "sourcePort", void 0);
      o(this, "targetPort", void 0);
      o(this, "geometry", void 0);
      this.source = t61.source.getFullId();
      this.target = t61.target.getFullId();
      if (b11(t61.source)) {
        this.sourcePort = t61.source.id;
        this.source = t61.source.getParent().getFullId();
      }
      if (b11(t61.target)) {
        this.targetPort = t61.target.id;
        this.target = t61.target.getParent().getFullId();
      }
      this.edgeId = t61.getId();
      this.geometry = t61.geometry;
    }
    n(e78, [{ key: "generateSourceId", value: function t61() {
      return this.sourcePort == null ? this.source : this.source + this.toolkit.getGraph().getPortSeparator() + this.sourcePort;
    } }, { key: "generateTargetId", value: function t61() {
      return this.targetPort == null ? this.target : this.target + this.toolkit.getGraph().getPortSeparator() + this.targetPort;
    } }, { key: "_add", value: function t61() {
      var e79 = { source: this.generateSourceId(), target: this.generateTargetId(), data: this.obj.data, geometry: this.geometry, addedByMouse: false };
      var r53 = this.toolkit.addEdge(e79);
      this.manager.edgeChange(this.edgeId, r53);
    } }, { key: "_remove", value: function t61() {
      this.toolkit.removeEdge(this.obj);
    } }, { key: "edgeChange", value: function t61(e79) {
      this.obj = e79;
      this.edgeId = this.obj.getId();
    } }]);
    return e78;
  }();
  var u17 = function(i45) {
    a(a48, i45);
    var s40 = s(a48);
    function a48() {
      t(this, a48);
      return s40.apply(this, arguments);
    }
    n(a48, [{ key: "undo", value: function t61() {
      this._remove();
    } }, { key: "redo", value: function t61() {
      this._add();
    } }, { key: "hasDeltas", value: function t61() {
      return this.obj != null;
    } }]);
    return a48;
  }(a18);
  var n11 = function(i45) {
    a(a48, i45);
    var s40 = s(a48);
    function a48() {
      t(this, a48);
      return s40.apply(this, arguments);
    }
    n(a48, [{ key: "undo", value: function t61() {
      this._add();
    } }, { key: "redo", value: function t61() {
      this._remove();
    } }, { key: "hasDeltas", value: function t61() {
      return this.obj != null;
    } }]);
    return a48;
  }(a18);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/undo-redo/compound-action.js
  var o17 = function() {
    function o42(e78) {
      t(this, o42);
      this.actions = e78;
      if (this.actions == null) {
        this.actions = [];
      }
    }
    n(o42, [{ key: "addAction", value: function e78(i45, n91) {
      if (n91) {
        this.actions.unshift(i45);
      } else {
        this.actions.push(i45);
      }
    } }, { key: "undo", value: function e78() {
      this.actions.slice().reverse().forEach(function(e79) {
        return e79.undo();
      });
    } }, { key: "redo", value: function e78() {
      this.actions.forEach(function(e79) {
        return e79.redo();
      });
    } }, { key: "edgeChange", value: function e78(i45, n91) {
      this.actions.forEach(function(e79) {
        if (e79 instanceof a18 && e79.edgeId === i45) {
          e79.edgeChange(n91);
        }
      });
    } }, { key: "hasDeltas", value: function e78() {
      for (var i45 = 0; i45 < this.actions.length; i45++) {
        if (this.actions[i45].hasDeltas()) {
          return true;
        }
      }
      return false;
    } }, { key: "compress", value: function e78() {
      var i45 = new o42();
      var s40 = {};
      var a48 = {};
      for (var r53 = 0; r53 < this.actions.length; r53++) {
        var c47 = this.actions[r53];
        if (tt(c47)) {
          if (s40[c47.obj.id] != null) {
            Object.assign(s40[c47.obj.id].newData, c47.newData);
          } else {
            s40[c47.obj.id] = c47;
            i45.addAction(c47);
          }
        } else if (nt(c47)) {
          if (a48[c47.obj.id] != null) {
            Object.assign(a48[c47.obj.id].pos, c47.pos);
          } else {
            a48[c47.obj.id] = c47;
            i45.addAction(c47);
          }
        } else {
          i45.addAction(c47);
        }
      }
      return i45;
    } }]);
    return o42;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/undo-redo/move-action.js
  var s14 = function() {
    function s40(i45, o42, e78, r53) {
      t(this, s40);
      this.obj = i45;
      this.originalPosition = o42;
      this.pos = e78;
      this.renderer = r53;
    }
    n(s40, [{ key: "redo", value: function i45() {
      this.renderer.setPosition(this.obj, this.pos.x, this.pos.y, true, true);
    } }, { key: "undo", value: function i45() {
      this.renderer.setPosition(this.obj, this.originalPosition.x, this.originalPosition.y, true, true);
    } }, { key: "hasDeltas", value: function i45() {
      return this.pos.x !== this.originalPosition.x || this.pos.y !== this.originalPosition.y;
    } }]);
    return s40;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/undo-redo/node-group-action.js
  var c16 = function() {
    function t61(e78, i45) {
      t(this, t61);
      this.obj = e78;
      this.toolkit = i45;
    }
    n(t61, [{ key: "_add", value: function e78() {
      if (this.obj.objectType === j8.objectType) {
        this.obj = this.toolkit.addNode(this.obj.data);
      } else if (this.obj.objectType === V6.objectType) {
        this.obj = this.toolkit.addGroup(this.obj.data);
      }
    } }, { key: "_remove", value: function e78() {
      this.toolkit.remove(this.obj);
    } }, { key: "getTerminusId", value: function e78() {
      return this.obj.getFullId();
    } }, { key: "hasDeltas", value: function e78() {
      return this.obj != null;
    } }]);
    return t61;
  }();
  var p16 = function(r53) {
    a(u52, r53);
    var n91 = s(u52);
    function u52() {
      t(this, u52);
      return n91.apply(this, arguments);
    }
    n(u52, [{ key: "undo", value: function e78() {
      this._remove();
    } }, { key: "redo", value: function e78() {
      this._add();
    } }]);
    return u52;
  }(c16);
  var f18 = function(r53) {
    a(u52, r53);
    var n91 = s(u52);
    function u52() {
      t(this, u52);
      return n91.apply(this, arguments);
    }
    n(u52, [{ key: "undo", value: function e78() {
      this._add();
    } }, { key: "redo", value: function e78() {
      this._remove();
    } }, { key: "isConnectedTo", value: function e78(t61) {
      var i45 = this.getTerminusId();
      return t61.source === i45 || t61.target === i45;
    } }]);
    return u52;
  }(c16);
  var v16 = function(a48) {
    a(l48, a48);
    var h35 = s(l48);
    function l48(e78, t61) {
      var i45;
      t(this, l48);
      i45 = h35.call(this, e78.group, t61);
      i45.params = e78;
      o(l(i45), "childrenRemoved", void 0);
      o(l(i45), "orphanedChildren", void 0);
      i45.childrenRemoved = e78.removeChildren;
      i45.orphanedChildren = e78.children.map(function(e79) {
        return e79.data;
      });
      return i45;
    }
    n(l48, [{ key: "_add", value: function e78() {
      var t61 = this;
      p(u(l48.prototype), "_add", this).call(this);
      if (!this.childrenRemoved) {
        this.orphanedChildren.forEach(function(e79) {
          return t61.toolkit.addToGroup(e79, t61.obj);
        });
      }
    } }]);
    return l48;
  }(f18);
  var y12 = function() {
    function t61(e78, i45, r53, n91, u52) {
      t(this, t61);
      this.group = e78;
      this.originalGroupSize = i45;
      this.newGroupSize = r53;
      this.toolkit = n91;
      this.source = u52;
    }
    n(t61, [{ key: "hasDeltas", value: function e78() {
      return this.originalGroupSize.w !== this.newGroupSize.w || this.originalGroupSize.h !== this.newGroupSize.h;
    } }, { key: "redo", value: function e78() {
      this._fire(D6);
    } }, { key: "undo", value: function e78() {
      this._fire(F8);
    } }, { key: "_fire", value: function e78(t62) {
      this.toolkit.fire(t62, { group: this.group, originalGroupSize: this.originalGroupSize, newGroupSize: this.newGroupSize, source: this.source });
    } }]);
    return t61;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/undo-redo/update-action.js
  var s15 = function() {
    function s40(t61, o42, n91) {
      t(this, s40);
      this.obj = t61;
      this.toolkit = n91;
      o(this, "newData", void 0);
      o(this, "originalData", void 0);
      this.newData = u2({}, t61.data);
      this.originalData = u2({}, o42);
    }
    n(s40, [{ key: "_getMethod", value: function t61() {
      return "update" + this.obj.objectType;
    } }, { key: "undo", value: function t61() {
      this.toolkit[this._getMethod()](this.obj, this.originalData);
    } }, { key: "redo", value: function t61() {
      this.toolkit[this._getMethod()](this.obj, this.newData);
    } }, { key: "hasDeltas", value: function t61() {
      return !A(this.newData, this.originalData);
    } }]);
    return s40;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/undo-redo/port-action.js
  var i13 = function() {
    function e78(t61, n91, i45) {
      t(this, e78);
      this.obj = t61;
      this.parent = n91;
      this.toolkit = i45;
    }
    n(e78, [{ key: "_add", value: function t61() {
      this.toolkit.addPort(this.parent, this.obj.data);
    } }, { key: "_remove", value: function t61() {
      this.toolkit.removePort(this.parent, this.obj.id);
    } }, { key: "getTerminusId", value: function t61() {
      return this.obj.getFullId();
    } }]);
    return e78;
  }();
  var u18 = function(i45) {
    a(a48, i45);
    var u52 = s(a48);
    function a48() {
      t(this, a48);
      return u52.apply(this, arguments);
    }
    n(a48, [{ key: "undo", value: function t61() {
      this._remove();
    } }, { key: "redo", value: function t61() {
      this._add();
    } }, { key: "hasDeltas", value: function t61() {
      return this.obj != null;
    } }]);
    return a48;
  }(i13);
  var a19 = function(i45) {
    a(a48, i45);
    var u52 = s(a48);
    function a48() {
      t(this, a48);
      return u52.apply(this, arguments);
    }
    n(a48, [{ key: "undo", value: function t61() {
      this._add();
    } }, { key: "redo", value: function t61() {
      this._remove();
    } }, { key: "isConnectedTo", value: function t61(e78) {
      var n91 = this.getTerminusId();
      return e78.generateSourceId() === n91 || e78.generateTargetId() === n91;
    } }, { key: "hasDeltas", value: function t61() {
      return this.obj != null;
    } }]);
    return a48;
  }(i13);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/undo-redo/group-action.js
  var n12 = function() {
    function t61(e78, o42, n91) {
      t(this, t61);
      this.node = e78;
      this.group = o42;
      this.toolkit = n91;
    }
    n(t61, [{ key: "hasDeltas", value: function t62() {
      return this.node != null;
    } }]);
    return t61;
  }();
  var u19 = function(n91) {
    a(i45, n91);
    var u52 = s(i45);
    function i45() {
      t(this, i45);
      return u52.apply(this, arguments);
    }
    n(i45, [{ key: "redo", value: function t61() {
      this.toolkit.addToGroup(this.node, this.group);
    } }, { key: "undo", value: function t61() {
      this.toolkit.removeFromGroup(this.node);
    } }]);
    return i45;
  }(n12);
  var i14 = function(n91) {
    a(i45, n91);
    var u52 = s(i45);
    function i45() {
      t(this, i45);
      return u52.apply(this, arguments);
    }
    n(i45, [{ key: "redo", value: function t61() {
      this.toolkit.removeFromGroup(this.node);
    } }, { key: "undo", value: function t61() {
      this.toolkit.addToGroup(this.node, this.group);
    } }]);
    return i45;
  }(n12);
  var s16 = function() {
    function t61(e78, o42) {
      t(this, t61);
      this.group = e78;
      this.renderer = o42;
    }
    n(t61, [{ key: "redo", value: function t62() {
      this.renderer.collapseGroup(this.group);
    } }, { key: "undo", value: function t62() {
      this.renderer.expandGroup(this.group);
    } }, { key: "hasDeltas", value: function t62() {
      return this.group != null;
    } }]);
    return t61;
  }();
  var a20 = function() {
    function t61(e78, o42) {
      t(this, t61);
      this.group = e78;
      this.renderer = o42;
    }
    n(t61, [{ key: "redo", value: function t62() {
      this.renderer.expandGroup(this.group);
    } }, { key: "undo", value: function t62() {
      this.renderer.collapseGroup(this.group);
    } }, { key: "hasDeltas", value: function t62() {
      return this.group != null;
    } }]);
    return t61;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/undo-redo/renderer-vertex-removed-action.js
  var s17 = function() {
    function s40(e78, r53, i45) {
      t(this, s40);
      this.renderer = e78;
      this.vertex = r53;
      this.pos = i45;
    }
    n(s40, [{ key: "redo", value: function e78() {
    } }, { key: "undo", value: function e78() {
      this.renderer.setPosition(this.vertex, this.pos.x, this.pos.y);
    } }, { key: "hasDeltas", value: function e78() {
      return this.vertex != null;
    } }]);
    return s40;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/undo-redo/undo-redo.js
  var O10 = function() {
    function i45(t61, e78, o42, r53, a48) {
      t(this, i45);
      this.toolkit = t61;
      this.edge = e78;
      this.originalGeometry = o42;
      this.geometry = r53;
      this.renderer = a48;
    }
    n(i45, [{ key: "_apply", value: function t61(n91) {
      this.toolkit.fire(R5, { edge: this.edge, geometry: n91, renderer: this.renderer });
    } }, { key: "undo", value: function t61() {
      this._apply(this.originalGeometry);
    } }, { key: "redo", value: function t61() {
      this._apply(this.geometry);
    } }, { key: "hasDeltas", value: function t61() {
      return !A(this.originalGeometry, this.geometry);
    } }]);
    return i45;
  }();
  var Q4 = 50;
  var R6 = "Cannot start a new transaction while one is active. Either commit/rollback the current transaction before creating a new one, or pass a cleanup flag in to this method";
  var V7 = "Cannot rollback transaction from here; it has been appended to. Close all transaction appenders before attempting to rollback the transaction.";
  var W6 = function() {
    function g31(t61) {
      t(this, g31);
      o(this, "toolkit", void 0);
      o(this, "maximumSize", void 0);
      o(this, "suspend", void 0);
      o(this, "onChange", void 0);
      o(this, "undoStack", void 0);
      o(this, "redoStack", void 0);
      o(this, "currentTransaction", void 0);
      o(this, "appendStack", 0);
      this.toolkit = t61.toolkit;
      this.suspend = false;
      this.undoStack = [];
      this.redoStack = [];
      this.maximumSize = t61.maximumSize || Q4;
      this.onChange = t61.onChange;
      this._bindListeners();
    }
    n(g31, [{ key: "_setSuspended", value: function t61(n91) {
      this.suspend = n91;
    } }, { key: "dataLoadStart", value: function t61() {
      this.clear();
      this._setSuspended(true);
    } }, { key: "dataLoadEnd", value: function t61() {
      this._setSuspended(false);
    } }, { key: "_bindListeners", value: function t61() {
      var n91 = this;
      this.toolkit.bind(p13, function() {
        n91.clear();
      });
      this.toolkit.bind(C7, function(t62) {
        n91.command(new p16(t62.node, n91.toolkit));
      });
      this.toolkit.bind(y11, function(t62) {
        n91.command(new f18(t62.node, n91.toolkit));
      });
      this.toolkit.bind(h14, function(t62) {
        if (!v2(t62.updates)) {
          n91.command(new s15(t62.vertex, t62.originalData, n91.toolkit));
        }
      });
      this.toolkit.bind(t7, function(t62) {
        n91.command(new p16(t62.group, n91.toolkit));
      });
      this.toolkit.bind(u16, function(t62) {
        n91.command(new v16(t62, n91.toolkit));
      });
      this.toolkit.bind(g10, function(t62) {
        if (!v2(t62.updates)) {
          n91.command(new s15(t62.vertex, t62.originalData, n91.toolkit));
        }
      });
      this.toolkit.bind(B7, function(t62) {
        var i45 = new y12(t62.group, t62.originalGroupSize, t62.newGroupSize, n91.toolkit, t62.source);
        if (i45.hasDeltas()) {
          n91.command(i45, true);
        }
      });
      this.toolkit.bind(m14, function(t62) {
        n91.command(new u17(t62.edge, n91.toolkit, n91));
      });
      this.toolkit.bind(l12, function(t62) {
        n91.command(new n11(t62.edge, n91.toolkit, n91));
      });
      this.toolkit.bind(s12, function(t62) {
        if (!v2(t62.updates)) {
          n91.command(new s15(t62.edge, t62.originalData, n91.toolkit));
        }
      });
      this.toolkit.bind(U4, function(t62) {
        n91.command(new O10(n91.toolkit, t62.edge, t62.originalGeometry, t62.geometry, t62.renderer));
      });
      this.toolkit.bind(c13, function(t62) {
        n91.command(new u18(t62.port, t62.vertex, n91.toolkit));
      });
      this.toolkit.bind(T4, function(t62) {
        n91.command(new a19(t62.port, t62.vertex, n91.toolkit));
      });
      this.toolkit.bind(u15, function(t62) {
        if (!v2(t62.updates)) {
          n91.command(new s15(t62.port, t62.originalData, n91.toolkit));
        }
      });
      this.toolkit.bind(g11, function(t62) {
        if (t62.vertexIsNew !== true) {
          n91.command(new u19(t62.vertex, t62.group, n91.toolkit));
        }
      });
      this.toolkit.bind(m16, function(t62) {
        n91.command(new i14(t62.vertex, t62.group, n91.toolkit));
      });
      this.toolkit.bind("renderer:added", function(t62) {
        t62.renderer.bind(I8, function(t63) {
          if (t63.originalPosition != null) {
            n91.command(new s14(t63.vertex, t63.originalPosition, t63.pos, t63.renderer));
          }
        });
        t62.renderer.bind(q5, function(t63) {
          if (t63.originalPosition != null) {
            n91.command(new s14(t63.vertex, t63.originalPosition, t63.pos, t63.renderer));
          }
        });
        t62.renderer.bind(p15, function(t63) {
          n91.command(new s16(t63.group, t63.renderer));
        });
        t62.renderer.bind(i12, function(t63) {
          n91.command(new a20(t63.group, t63.renderer));
        });
        t62.renderer.bind(y11, function(i45) {
          n91.command(new s17(t62.renderer, i45.vertex, i45.pos));
        });
        t62.renderer.bind(u16, function(i45) {
          n91.command(new s17(t62.renderer, i45.vertex, i45.pos));
        });
      });
    } }, { key: "_fireUpdate", value: function t61() {
      this.onChange && this.onChange(this, this.undoStack.length, this.redoStack.length);
    } }, { key: "command", value: function t61(n91, i45) {
      if (!this.suspend) {
        if (!n91.hasDeltas()) {
          return;
        }
        if ($3(n91)) {
          n91 = n91.compress();
        }
        if (this.currentTransaction != null) {
          this.currentTransaction.addAction(n91, i45);
        } else {
          this.undoStack.push(n91);
          if (this.undoStack.length > this.maximumSize) {
            this.undoStack.splice(this.undoStack.length - this.maximumSize - 1, this.undoStack.length - this.maximumSize);
          }
          this.redoStack.length = 0;
          this._fireUpdate();
        }
      }
    } }, { key: "edgeChange", value: function t61(n91, i45) {
      var e78 = function t62(e79) {
        e79.forEach(function(t63) {
          if (t63 instanceof a18 && t63.edgeId === n91) {
            t63.edgeChange(i45);
          } else if (t63 instanceof o17) {
            t63.edgeChange(n91, i45);
          }
        });
      };
      e78(this.undoStack);
      e78(this.redoStack);
    } }, { key: "undo", value: function t61() {
      var n91 = this.undoStack.pop();
      if (n91) {
        this.suspend = true;
        this.redoStack.push(n91);
        n91.undo();
        this.suspend = false;
        this._fireUpdate();
      }
    } }, { key: "redo", value: function t61() {
      var n91 = this.redoStack.pop();
      if (n91) {
        this.suspend = true;
        this.undoStack.push(n91);
        n91.redo();
        this.suspend = false;
        this._fireUpdate();
      }
    } }, { key: "clear", value: function t61() {
      this.undoStack.length = 0;
      this.redoStack.length = 0;
      this.currentTransaction = null;
      this.appendStack = 0;
      this.suspend = false;
      this._fireUpdate();
    } }, { key: "transaction", value: function t61(n91, i45) {
      var e78 = this.currentTransaction != null;
      if (e78 && i45 == null) {
        Q(R6);
        return;
      }
      this.openTransaction(i45);
      try {
        var o42 = n91();
        if (o42 !== false) {
          var r53 = this.currentTransaction;
          this.currentTransaction = null;
          this.command(r53);
          return o42;
        } else {
          this.rollbackTransaction();
        }
      } catch (t62) {
        Q("Exception thrown in transaction " + t62.message + "; rolling transaction back");
        this.rollbackTransaction();
      }
    } }, { key: "_createNewTransaction", value: function t61() {
      this.currentTransaction = new o17();
      this.appendStack = 0;
    } }, { key: "openTransaction", value: function t61(n91) {
      if (!this.suspend) {
        var i45 = true;
        if (this.currentTransaction != null) {
          if (n91 != null) {
            if (n91 === X5) {
              this.commitTransaction();
            } else if (n91 === Y5) {
              this.rollbackTransaction();
            } else if (n91 === Z3) {
              i45 = false;
              this.appendStack++;
            } else {
              throw new Error(R6);
            }
          } else {
            throw new Error(R6);
          }
        }
        if (i45) {
          this._createNewTransaction();
        }
        return i45;
      }
    } }, { key: "rollbackTransaction", value: function t61() {
      if (this.currentTransaction != null) {
        if (this.appendStack > 0) {
          this.appendStack--;
          Q(V7);
        } else {
          this.currentTransaction.undo();
          this.currentTransaction = null;
          this._fireUpdate();
        }
      }
    } }, { key: "commitTransaction", value: function t61(n91) {
      if (this.currentTransaction != null) {
        if (n91 !== true && this.appendStack > 0) {
          this.appendStack--;
        } else {
          var i45 = this.currentTransaction;
          this.currentTransaction = null;
          this.command(i45);
          this.appendStack = 0;
        }
      }
    } }, { key: "_attach", value: function t61(n91) {
      if (this.undoStack.length === 0) {
        var i45 = new o17();
        i45.addAction(n91);
        this.command(i45);
      } else {
        var e78 = this.undoStack[this.undoStack.length - 1];
        if (e78 instanceof o17) {
          e78.addAction(n91);
        } else {
          this.undoStack.pop();
          var o42 = new o17();
          o42.addAction(e78);
          o42.addAction(n91);
          this.undoStack.push(o42);
        }
      }
    } }]);
    return g31;
  }();
  var X5 = "commitCurrent";
  var Y5 = "rollbackCurrent";
  var Z3 = "appendToCurrent";
  function $3(t61) {
    return t61 instanceof o17;
  }
  function tt(t61) {
    return t61 instanceof s15;
  }
  function nt(t61) {
    return t61 instanceof s14;
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/toolkit.js
  var be = "type";
  var ke = "default";
  var Se = function e19() {
  };
  var $e = "addport";
  var Te = "addnewport";
  var je = "removeport";
  var Fe = "updateport";
  var Pe = "moved";
  var xe = "groupResized";
  var Ee = "drawingToolsResize";
  var Ae = function(ae2) {
    a(xe2, ae2);
    var Pe2 = s(xe2);
    function xe2(e78) {
      var t61;
      t(this, xe2);
      t61 = Pe2.call(this);
      o(l(t61), "graph", void 0);
      o(l(t61), "autoSaver", void 0);
      o(l(t61), "idFunction", void 0);
      o(l(t61), "typeProperty", void 0);
      o(l(t61), "edgeTypeProperty", void 0);
      o(l(t61), "portTypeProperty", void 0);
      o(l(t61), "typeFunction", void 0);
      o(l(t61), "edgeIdFunction", void 0);
      o(l(t61), "edgeTypeFunction", void 0);
      o(l(t61), "portIdFunction", void 0);
      o(l(t61), "portTypeFunction", void 0);
      o(l(t61), "portExtractor", void 0);
      o(l(t61), "portUpdater", void 0);
      o(l(t61), "portDataProperty", void 0);
      o(l(t61), "portOrderProperty", void 0);
      o(l(t61), "modelTopAttribute", void 0);
      o(l(t61), "modelLeftAttribute", void 0);
      o(l(t61), "modelWidthAttribute", void 0);
      o(l(t61), "modelHeightAttribute", void 0);
      o(l(t61), "model", void 0);
      o(l(t61), "_$_suspendGraph", void 0);
      o(l(t61), "_$_dataLoading", void 0);
      o(l(t61), "_$_originalData", void 0);
      o(l(t61), "_$_originalDataType", void 0);
      o(l(t61), "debugEnabled", void 0);
      o(l(t61), "defaultObjectFactory", void 0);
      o(l(t61), "nodeFactory", void 0);
      o(l(t61), "edgeFactory", void 0);
      o(l(t61), "portFactory", void 0);
      o(l(t61), "groupFactory", void 0);
      o(l(t61), "autoSave", void 0);
      o(l(t61), "saveUrl", void 0);
      o(l(t61), "autoSaveDebounceTimeout", void 0);
      o(l(t61), "autoSaveHandler", void 0);
      o(l(t61), "saveHeaders", void 0);
      o(l(t61), "onAutoSaveSuccess", void 0);
      o(l(t61), "onAutoSaveError", void 0);
      o(l(t61), "doNotUpdateOriginalData", void 0);
      o(l(t61), "onBeforeAutoSave", void 0);
      o(l(t61), "onAfterAutoSave", void 0);
      o(l(t61), "portSeparator", ".");
      o(l(t61), "defaultCost", void 0);
      o(l(t61), "defaultDirected", void 0);
      o(l(t61), "enableSubgraphs", void 0);
      o(l(t61), "undoRedo", void 0);
      o(l(t61), "graphParams", void 0);
      o(l(t61), "beforeConnect", void 0);
      o(l(t61), "beforeMoveConnection", void 0);
      o(l(t61), "beforeStartConnect", void 0);
      o(l(t61), "beforeDetach", void 0);
      o(l(t61), "beforeStartDetach", void 0);
      o(l(t61), "_$_currentSelection", void 0);
      o(l(t61), "_$_renderersById", /* @__PURE__ */ new Map());
      o(l(t61), "_transientVertices", {});
      o(l(t61), "_transientVerticesByRenderer", {});
      e78 = e78 || {};
      var i45 = e78.undoRedo || {};
      if (i45.enabled !== false) {
        t61.undoRedo = new W6({ toolkit: l(t61), maximumSize: i45.maximumSize, onChange: function e79(r53, o42, n91) {
          t61.fire(K4, { undoCount: o42, redoCount: n91 });
        } });
      }
      t61.idFunction = e78.idFunction || I7;
      t61.typeProperty = e78.typeProperty || be;
      t61.edgeTypeProperty = e78.edgeTypeProperty || be;
      t61.portTypeProperty = e78.portTypeProperty || be;
      t61.typeFunction = e78.typeFunction || function(e79) {
        return e79[t61.typeProperty] || ke;
      };
      t61.edgeIdFunction = e78.edgeIdFunction || t61.idFunction;
      t61.edgeTypeFunction = e78.edgeTypeFunction || function(e79) {
        return e79[t61.edgeTypeProperty] || ke;
      };
      t61.portIdFunction = e78.portIdFunction || t61.idFunction;
      t61.portTypeFunction = e78.portTypeFunction || function(e79) {
        return e79[t61.portTypeProperty] || ke;
      };
      t61.portExtractor = e78.portExtractor;
      t61.portUpdater = e78.portUpdater;
      t61.portDataProperty = e78.portDataProperty;
      t61.portOrderProperty = e78.portOrderProperty;
      t61._$_suspendGraph = false;
      t61.debugEnabled = false;
      t61.model = new e18(l(t61), e78.model);
      t61.defaultObjectFactory = function(e79, t62, r53) {
        t62 = t62 == null || !a2(t62) ? {} : t62;
        t62 = x(t62);
        t62.id = t62.id || $();
        t62.type = t62.type || (e79 == null ? null : e79.type || e79);
        r53(t62);
        return true;
      };
      t61.modelLeftAttribute = e78.modelLeftAttribute || "left";
      t61.modelTopAttribute = e78.modelTopAttribute || "top";
      t61.modelWidthAttribute = e78.modelWidthAttribute || "width";
      t61.modelHeightAttribute = e78.modelHeightAttribute || "height";
      t61.nodeFactory = e78.nodeFactory || t61.defaultObjectFactory;
      t61.edgeFactory = e78.edgeFactory || t61.defaultObjectFactory;
      t61.portFactory = e78.portFactory || t61.defaultObjectFactory;
      t61.groupFactory = e78.groupFactory || t61.defaultObjectFactory;
      t61.autoSave = e78.autoSave === true && (e78.saveUrl != null || e78.autoSaveHandler != null);
      t61.autoSaveDebounceTimeout = e78.autoSaveDebounceTimeout;
      t61.autoSaveHandler = e78.autoSaveHandler;
      t61.saveUrl = e78.saveUrl;
      t61.saveHeaders = e78.saveHeaders;
      t61.onAutoSaveSuccess = e78.onAutoSaveSuccess || Se;
      t61.onAutoSaveError = e78.onAutoSaveError || Se;
      t61.doNotUpdateOriginalData = e78.doNotUpdateOriginalData === true;
      t61.onBeforeAutoSave = e78.onBeforeAutoSave || Se;
      t61.onAfterAutoSave = e78.onAfterAutoSave || Se;
      t61.graphParams = { portSeparator: e78.portSeparator, defaultCost: e78.defaultCost, defaultDirected: e78.defaultDirected, enableSubgraphs: e78.enableSubgraphs };
      if (t61.portDataProperty != null && t61.portExtractor == null) {
        t61.portExtractor = function(e79) {
          var r53 = e79[t61.portDataProperty] || [];
          if (t61.portOrderProperty != null) {
            r53.sort(function(e80, r54) {
              var o42 = e80[t61.portOrderProperty], n91 = r54[t61.portOrderProperty], i46 = o42 == null ? Infinity : o42, a49 = n91 == null ? Infinity : n91;
              return i46 - a49;
            });
          }
          return r53;
        };
      }
      if (t61.portDataProperty != null && t61.portUpdater == null) {
        t61.portUpdater = function(e79, r53, o42) {
          var n91 = {};
          if (t61.portOrderProperty != null) {
            o42.sort(function(e80, r54) {
              var o43 = e80.data[t61.portOrderProperty], n92 = r54.data[t61.portOrderProperty], i46 = o43 == null ? Infinity : o43, a49 = n92 == null ? Infinity : n92;
              return i46 - a49;
            });
          }
          n91[t61.portDataProperty] = o42.map(function(e80) {
            return e80.data;
          });
          return u2(e79, n91);
        };
      }
      t61.graph = new C6(t61.graphParams);
      if (t61.autoSave) {
        t61.autoSaver = new m15(l(t61), { type: e78.autoSaveType, saveUrl: t61.saveUrl, saveHeaders: t61.saveHeaders, onAutoSaveSuccess: t61.onAutoSaveSuccess, onAutoSaveError: t61.onAutoSaveError, onBeforeAutoSave: t61.onBeforeAutoSave, onAfterAutoSave: t61.onAfterAutoSave, autoSaveDebounceTimeout: t61.autoSaveDebounceTimeout, autoSaveHandler: t61.autoSaveHandler });
      }
      new p14(l(t61));
      var a48 = function e79(r53, o42) {
        if (t61.model == null)
          return true;
        var n91 = t61.getType(r53), i46 = t61.getType(o42), a49 = b11(r53) ? r53.getParent() : r53, u52 = b11(o42) ? o42.getParent() : o42, d32 = b11(r53) ? t61.model.getPortDefinition(n91) : f14(r53) ? t61.model.getNodeDefinition(n91) : t61.model.getGroupDefinition(n91), c47 = b11(o42) ? t61.model.getPortDefinition(i46) : f14(o42) ? t61.model.getNodeDefinition(i46) : t61.model.getGroupDefinition(i46), f45 = f14(a49) ? t61.model.getNodeDefinition(n91) : t61.model.getGroupDefinition(n91), p49 = f14(u52) ? t61.model.getNodeDefinition(i46) : t61.model.getGroupDefinition(i46);
        if (d32.maxConnections != null && r53.getEdges().length >= d32.maxConnections) {
          return false;
        }
        if (c47.maxConnections != null && o42.getEdges().length >= c47.maxConnections) {
          return false;
        }
        if (r53 === o42) {
          return !(f45.allowLoopback === false || d32.allowLoopback === false || c47.allowLoopback === false || p49.allowLoopback === false);
        }
        if (a49 === u52) {
          return !(f45.allowVertexLoopback === false || d32.allowVertexLoopback === false || c47.allowVertexLoopback === false || p49.allowVertexLoopback === false);
        }
        return true;
      };
      t61.beforeConnect = e78.beforeConnect || a48;
      t61.beforeMoveConnection = e78.beforeMoveConnection || a48;
      t61.beforeStartConnect = e78.beforeStartConnect || function(e79, t62) {
        return {};
      };
      t61.beforeDetach = e78.beforeDetach || function(e79, t62, r53) {
        return true;
      };
      t61.beforeStartDetach = e78.beforeStartDetach || function(e79, t62) {
        return true;
      };
      t61._$_currentSelection = t61._$_createSelection(function(e79) {
        t61.fire(L6, { selection: e79 });
      });
      if (e78.selectionMode) {
        t61._$_currentSelection.setMode(e78.selectionMode);
      }
      if (e78.maxSelectedNodes) {
        t61._$_currentSelection.setMaxNodes(e78.maxSelectedNodes);
      }
      if (e78.maxSelectedGroups) {
        t61._$_currentSelection.setMaxGroups(e78.maxSelectedGroups);
      }
      if (e78.maxSelectedEdges) {
        t61._$_currentSelection.setMaxEdges(e78.maxSelectedEdges);
      }
      if (e78.selectionCapacityPolicy) {
        t61._$_currentSelection.setCapacityPolicy(e78.selectionCapacityPolicy);
      }
      if (e78.data != null) {
        t61.load({ data: e78.data });
      }
      return t61;
    }
    n(xe2, [{ key: "_$_createSelection", value: function e78(t61) {
      return new N8(this, { onClear: t61 || function() {
      } });
    } }, { key: "filter", value: function e78(t61, r53) {
      var o42 = typeof t61 === "function" ? t61 : function(e79) {
        var o43 = e79.data, n92 = false, i45 = t61;
        for (var a48 in i45) {
          var u52 = i45[a48] === o43[a48];
          if (!u52 && !r53) {
            return false;
          }
          n92 = n92 || u52;
        }
        return n92;
      }, n91 = this._$_createSelection();
      this.eachNode(function(e79, t62) {
        if (o42(t62)) {
          n91.append(t62);
        }
        var r54 = t62.getPorts();
        for (var i45 = 0; i45 < r54.length; i45++) {
          if (o42(r54[i45])) {
            n91.append(r54[i45]);
          }
        }
      });
      this.eachEdge(function(e79, t62) {
        if (o42(t62)) {
          n91.append(t62);
        }
      });
      this.eachGroup(function(e79, t62) {
        if (o42(t62)) {
          n91.append(t62);
        }
      });
      return n91;
    } }, { key: "getModel", value: function e78() {
      return this.model;
    } }, { key: "setSuspendGraph", value: function e78(t61) {
      this._$_suspendGraph = t61;
    } }, { key: "setAutoSave", value: function e78(t61) {
      if (this.autoSaver != null) {
        this.autoSaver.discard();
      }
      this.autoSaver = new m15(this, t61);
    } }, { key: "setDoNotUpdateOriginalData", value: function e78(t61) {
      this.doNotUpdateOriginalData = t61;
    } }, { key: "getTypeFunction", value: function e78() {
      return this.typeFunction;
    } }, { key: "connect", value: function e78(t61) {
      var r53;
      if (!this._$_suspendGraph) {
        var o42 = this.graph.getVertex(t61.source), n91 = this.graph.getVertex(t61.target), i45 = t61.cost, u52 = t61.directed;
        if (!o42) {
          if (!t61.doNotCreateMissingNodes) {
            o42 = this.graph.addNode(t61.source);
            this._$_notifyNodeAdded(o42);
          } else
            return;
        }
        if (!n91) {
          if (!t61.doNotCreateMissingNodes) {
            n91 = this.graph.addNode(t61.target);
            this._$_notifyNodeAdded(n91);
          } else
            return;
        }
        var d32 = t61.data || {};
        var s40 = this.beforeStartConnect(o42, this.edgeTypeFunction(d32));
        if (s40) {
          if (e(s40) === "object") {
            d32 = u2(s40, d32);
          }
          var l48 = this.beforeConnect(o42, n91, d32, false);
          if (l48 !== false) {
            r53 = this.addEdge({ source: o42, target: n91, cost: i45, directed: u52, data: d32, geometry: t61.geometry });
          }
        }
      }
      return r53;
    } }, { key: "clear", value: function e78() {
      this._$_dispatchToRenderers(function(e79) {
        return e79._graphClearStart();
      });
      this.fire(o15);
      this.graph.clear();
      this._transientVertices = {};
      this._transientVerticesByRenderer = {};
      this._$_dispatchToRenderers(function(e79) {
        return e79._graphClearEnd();
      });
      this.fire(p13);
      return this;
    } }, { key: "getGraph", value: function e78() {
      return this.graph;
    } }, { key: "getNodeCount", value: function e78() {
      return this.graph.getVertexCount();
    } }, { key: "getNodeAt", value: function e78(t61) {
      return this.graph.getVertexAt(t61);
    } }, { key: "getNodes", value: function e78() {
      return this.graph.getVertices();
    } }, { key: "eachNode", value: function e78(t61) {
      var r53;
      for (var o42 = 0, n91 = this.graph.getVertexCount(); o42 < n91; o42++) {
        r53 = this.graph.getVertexAt(o42);
        t61(o42, r53);
      }
    } }, { key: "eachGroup", value: function e78(t61) {
      var r53;
      for (var o42 = 0, n91 = this.graph.getGroupCount(); o42 < n91; o42++) {
        r53 = this.graph.getGroupAt(o42);
        t61(o42, r53);
      }
    } }, { key: "eachVertex", value: function e78(t61) {
      this.eachNode(t61);
      this.eachGroup(t61);
    } }, { key: "eachEdge", value: function e78(t61) {
      var r53 = this.graph.getEdges();
      for (var o42 = 0, n91 = r53.length; o42 < n91; o42++) {
        t61(o42, r53[o42]);
      }
    } }, { key: "getEdgeCount", value: function e78() {
      return this.graph.getEdgeCount();
    } }, { key: "getGroupCount", value: function e78() {
      return this.graph.getGroupCount();
    } }, { key: "getGroupAt", value: function e78(t61) {
      return this.graph.getGroupAt(t61);
    } }, { key: "getGroups", value: function e78() {
      return this.graph.getGroups();
    } }, { key: "getClusters", value: function e78() {
      return this.graph.getClusters();
    } }, { key: "getNodeId", value: function e78(t61) {
      return typeof t61 === "string" ? t61 : this.idFunction(t61);
    } }, { key: "getNodeType", value: function e78(t61) {
      return this.typeFunction(t61) || "default";
    } }, { key: "getGroupId", value: function e78(t61) {
      return typeof t61 === "string" ? t61 : this.idFunction(t61);
    } }, { key: "getGroupType", value: function e78(t61) {
      return this.typeFunction(t61) || "default";
    } }, { key: "getEdgeId", value: function e78(t61) {
      return this.edgeIdFunction(t61);
    } }, { key: "getEdgeType", value: function e78(t61) {
      return this.edgeTypeFunction(t61) || "default";
    } }, { key: "getPortId", value: function e78(t61) {
      return this.portIdFunction(t61);
    } }, { key: "getPortType", value: function e78(t61) {
      return this.portTypeFunction(t61) || "default";
    } }, { key: "getType", value: function e78(t61) {
      var r53 = f14(t61) ? this.typeFunction : b11(t61) ? this.portTypeFunction : this.edgeTypeFunction;
      return r53(t61.data) || "default";
    } }, { key: "setType", value: function e78(t61, r53) {
      var o42 = this.getType(t61);
      if (o42 === r53)
        return;
      var n91 = t61.objectType === j8.objectType ? this.typeProperty : t61.objectType === x8.objectType ? this.portTypeProperty : this.edgeTypeProperty;
      var i45;
      if (f14(t61)) {
        i45 = x9;
      } else if (b11(t61)) {
        i45 = b12;
      } else if (m13(t61)) {
        i45 = w10;
      } else if (y10(t61)) {
        i45 = f15;
      }
      t61.data[n91] = r53;
      if (i45 != null) {
        this.fire(i45, { obj: t61, previousType: o42, newType: r53 });
      }
    } }, { key: "addNode", value: function e78(t61, r53, o42) {
      var n91 = this.idFunction(t61);
      var i45 = null;
      if (n91 == null && typeof t61 !== "string") {
        t61.id = $();
      }
      var a48 = this.graph.addNode(t61, this.idFunction);
      if (a48 != null) {
        if (this.portExtractor != null) {
          var u52 = this.portExtractor(a48.data, a48);
          if (u52 != null) {
            for (var d32 = 0; d32 < u52.length; d32++) {
              a48.addPort(u52[d32], this.portIdFunction);
            }
          }
        }
        if (typeof t61 !== "string" && t61.group != null) {
          i45 = this.getGroup(t61.group);
          if (i45 != null) {
            i45.addMember(a48);
          } else {
            throw new Error("parent group [" + t61.group + "] not found");
          }
        }
        if (!this._$_dataLoading && !this.doNotUpdateOriginalData) {
          j7(w9.addNode, this._$_originalData, this._$_originalDataType, a48, this.idFunction || this.graph.getIdFunction());
        }
        if (!o42) {
          this._$_notifyNodeAdded(a48, i45);
        }
        if (i45 != null) {
          this.fire(g11, { group: i45, vertex: a48, vertexIsNew: true });
        }
        return a48;
      } else
        return this.graph.getVertex(n91);
    } }, { key: "_$_notifyNodeAdded", value: function e78(t61, r53) {
      var o42 = { node: t61, parentGroup: r53 };
      this._$_dispatchToRenderers(function(e79) {
        return e79._nodeAdded(o42);
      });
      this.fire(C7, o42);
    } }, { key: "_$_notifyGroupAdded", value: function e78(t61, r53) {
      var o42 = { group: t61, parentGroup: r53 };
      this._$_dispatchToRenderers(function(e79) {
        return e79._groupAdded(o42);
      });
      this.fire(t7, o42);
    } }, { key: "addFactoryNode", value: function e78(t61, r53, o42, n91) {
      var i45 = this;
      if (o42 == null) {
        if (r53 != null) {
          r53 = e(r53) === "object" ? r53 : {};
          o42 = typeof r53 === "function" ? r53 : null;
        } else {
          r53 = {};
        }
      }
      r53.type = r53.type || t61;
      try {
        this.nodeFactory(t61, r53, function(e79) {
          i45.openTransaction();
          var t62 = i45.addNode(e79);
          try {
            if (o42) {
              o42(t62);
            }
          } catch (e80) {
            Q("WARN: Factory node callback threw an error", e80);
          }
          i45.commitTransaction();
        }, function() {
          if (n91) {
            n91();
          }
        });
      } catch (e79) {
        Q("WARN: Factory node threw an error", e79);
        this.rollbackTransaction();
      }
    } }, { key: "addNodes", value: function e78(t61) {
      for (var r53 = 0; r53 < t61.length; r53++) {
        this.addNode(t61[r53]);
      }
      return this;
    } }, { key: "_getTransientVerticesForRenderer", value: function e78(t61) {
      return o3(this._transientVerticesByRenderer, t61.id, function() {
        return {};
      });
    } }, { key: "addTransientVertex", value: function e78(t61, r53) {
      var o42 = this.graph.addNode(r53);
      o42.transient = true;
      var n91 = this._getTransientVerticesForRenderer(t61);
      n91[o42.id] = o42;
      this._transientVertices[o42.id] = { renderer: t61, vertex: o42 };
      return o42;
    } }, { key: "cleanupTransientVertex", value: function e78(t61, r53) {
      var o42 = r53.getAllEdges() || [];
      this.graph.deleteNode(r53);
      for (var n91 = 0; n91 < o42.length; n91++) {
        this.graph.deleteEdge(o42[n91]);
      }
      t61._nodeRemoved({ node: r53, edges: o42, parentGroupIsBeingRemoved: false });
      var i45 = this._getTransientVerticesForRenderer(t61);
      delete i45[r53.id];
      delete this._transientVertices[r53.id];
    } }, { key: "addFactoryGroup", value: function e78(t61, r53, o42, n91) {
      var i45 = this;
      if (o42 == null) {
        if (r53 != null) {
          r53 = e(r53) === "object" ? r53 : {};
          o42 = typeof r53 === "function" ? r53 : null;
        } else if (r53 == null && o42 == null) {
          r53 = {};
        }
      }
      r53.type = r53.type || t61;
      try {
        this.groupFactory(t61, r53, function(e79) {
          i45.openTransaction();
          var t62 = i45.addGroup(e79);
          try {
            if (o42) {
              o42(t62);
            }
          } catch (e80) {
            Q("WARN: Factory group callback threw an error", e80);
          }
          i45.commitTransaction();
          i45.commitTransaction();
        }, function() {
          if (n91) {
            n91();
          }
          i45.rollbackTransaction();
        });
      } catch (e79) {
        Q("WARN: group factory threw an error", e79);
      }
    } }, { key: "addGroup", value: function e78(t61, r53, o42) {
      var n91, i45;
      var a48 = this.idFunction(t61);
      if (a48 == null && typeof t61 !== "string") {
        t61.id = $();
      }
      i45 = this.graph.addGroup(t61, this.idFunction);
      if (i45 != null) {
        if (typeof t61 !== "string" && t61.group != null) {
          n91 = this.getGroup(t61.group);
          if (n91 == null) {
            throw new Error("Cannot find parent group [" + t61.group + "]");
          } else {
            n91.addMember(i45);
          }
        }
        if (!this._$_dataLoading && !this.doNotUpdateOriginalData) {
          j7(w9.addGroup, this._$_originalData, this._$_originalDataType, i45, this.idFunction || this.graph.getIdFunction());
        }
        if (!o42) {
          this._$_notifyGroupAdded(i45, n91);
          if (n91 != null) {
            this.fire(g11, { group: n91, vertex: i45, vertexIsNew: true });
          }
        }
      }
      return i45;
    } }, { key: "addToGroup", value: function e78(t61, r53, o42, n91, i45) {
      var a48 = false;
      var u52 = this.getObjectInfo(r53);
      var d32 = this.getObjectInfo(t61);
      if (d32.obj && u52.obj) {
        o42 = o42 || d32.obj.group;
        a48 = u52.obj.addMember(d32.obj);
        if (a48) {
          o42 && o42.removeMember(d32.obj);
          d32.obj.data.group = u52.obj.id;
          var s40 = { vertex: d32.obj, group: u52.obj, pos: n91, source: i45 };
          if (o42) {
            s40.sourceGroup = o42;
          }
          this.fire(g11, s40);
          this.fire(v13);
        }
      }
      return a48;
    } }, { key: "removeFromGroup", value: function e78(t61, r53, o42, n91) {
      var i45 = this.getObjectInfo(t61);
      var a48;
      if (i45.obj && i45.obj.group) {
        a48 = i45.obj.group;
        if (a48.removeMember(i45.obj)) {
          delete i45.obj.data.group;
          if (!r53) {
            var u52 = { group: a48, source: n91, vertex: i45.obj };
            if (o42) {
              u52.targetGroup = o42;
            }
            this.fire(m16, u52);
          }
          this.fire(v13);
        }
      }
      return a48;
    } }, { key: "_$_notifyGroupRemoved", value: function e78(t61, r53, o42, n91) {
      var i45 = this;
      t61.nestedGroups.forEach(function(e79) {
        return i45._$_notifyGroupRemoved(e79, r53, true, n91);
      });
      t61.nodes.forEach(function(e79) {
        return i45._$_notifyNodeRemoved(e79, true, n91);
      });
      for (var a48 = 0; a48 < t61.edges.length; a48++) {
        this._$_notifyEdgeRemoved(t61.edges[a48]);
      }
      if (!r53) {
        t61.children.forEach(function(e79) {
        });
      }
      var u52 = { group: t61.group, removeChildren: r53, children: t61.children, parentGroup: t61.parentGroup, parentGroupIsBeingRemoved: o42 };
      this._$_dispatchToRenderers(function(e79) {
        return e79._groupRemoved(u52);
      });
      if (!this._$_dataLoading && !this.doNotUpdateOriginalData) {
        j7(w9.removeGroup, this._$_originalData, this._$_originalDataType, t61.group, this.idFunction || this.graph.getIdFunction());
      }
      if (!n91) {
        this.fire(u16, u52);
      }
    } }, { key: "_$_notifyNodeRemoved", value: function e78(t61, r53, o42) {
      for (var n91 = 0; n91 < t61.edges.length; n91++) {
        this._$_notifyEdgeRemoved(t61.edges[n91]);
      }
      var i45 = { node: t61.node, edges: t61.edges, parentGroup: t61.parentGroup, parentGroupIsBeingRemoved: r53 };
      this._$_dispatchToRenderers(function(e79) {
        return e79._nodeRemoved(i45);
      });
      if (!this._$_dataLoading && !this.doNotUpdateOriginalData) {
        j7(w9.removeNode, this._$_originalData, this._$_originalDataType, t61.node, this.idFunction || this.graph.getIdFunction());
      }
      if (!o42) {
        this.fire(y11, i45);
      }
    } }, { key: "removeGroup", value: function e78(t61, r53, o42) {
      var n91 = this.getObjectInfo(t61);
      if (n91 && n91.obj) {
        var i45 = n91.obj;
        this.openTransaction(Z3);
        var a48 = this.graph.deleteGroup(i45, r53);
        if (a48.group) {
          this._$_notifyGroupRemoved(a48, r53, false, o42);
        }
        this.commitTransaction();
      }
    } }, { key: "getNode", value: function e78(t61) {
      return this.graph.getVertex(t61);
    } }, { key: "getEdge", value: function e78(t61) {
      return this.graph.getEdge(t61);
    } }, { key: "getGroup", value: function e78(t61) {
      return this.graph.getGroup(t61);
    } }, { key: "getVertex", value: function e78(t61) {
      return this.getNode(t61) || this.getGroup(t61);
    } }, { key: "getPort", value: function e78(t61) {
      var r53 = this.graph.getVertexByPortId(t61);
      if (r53) {
        return r53.getPort(this.graph.splitPortId(t61)[1]);
      }
    } }, { key: "exists", value: function e78() {
      for (var t61 = 0; t61 < arguments.length; t61++) {
        if (this.graph.getVertex(t61 < 0 || arguments.length <= t61 ? void 0 : arguments[t61]) == null)
          return false;
      }
      return true;
    } }, { key: "removeNode", value: function e78(t61, r53) {
      var o42 = this.graph.getVertex(t61);
      if (o42.transient === true) {
        return this;
      }
      this.openTransaction(Z3);
      var n91 = o42.getAllEdges() || [];
      for (var i45 = 0; i45 < n91.length; i45++) {
        this.removeEdge(n91[i45]);
      }
      o42.group;
      var a48 = this.graph.deleteNode(o42);
      this._$_notifyNodeRemoved(a48, false, r53);
      this.commitTransaction();
      return this;
    } }, { key: "addEdge", value: function e78(t61, r53, o42) {
      var n91 = this;
      var i45 = this.graph.addEdge(t61, this.edgeIdFunction, function(e79, r54) {
        return n91.beforeConnect(e79, r54, t61.data, t61.addedByMouse === true);
      });
      if (i45 != null) {
        if (!this._$_dataLoading && !this.doNotUpdateOriginalData) {
          j7(w9.addEdge, this._$_originalData, this._$_originalDataType, i45, this.idFunction || this.graph.getIdFunction());
        }
        var a48 = { edge: i45, source: r53, geometry: t61.geometry, addedByMouse: t61.addedByMouse };
        this._$_dispatchToRenderers(function(e79) {
          return e79._edgeAdded(a48);
        });
        if (!o42) {
          this.fire(m14, a48, null);
        }
      } else {
        if (this.debugEnabled) {
          Q("Could not add edge");
        }
      }
      return i45;
    } }, { key: "_$_notifyEdgeRemoved", value: function e78(t61, r53) {
      if (!this._$_dataLoading && !this.doNotUpdateOriginalData) {
        j7(w9.removeEdge, this._$_originalData, this._$_originalDataType, t61, this.idFunction || this.graph.getIdFunction());
      }
      this.fire(l12, { edge: t61, source: r53 }, null);
    } }, { key: "removeEdge", value: function e78(t61, r53) {
      var o42 = this.graph.getEdge(t61);
      if (o42 != null) {
        this.graph.deleteEdge(o42);
        this._$_notifyEdgeRemoved(o42, r53);
      }
      return this;
    } }, { key: "edgeMoved", value: function e78(t61, r53, o42) {
      if (o42 === 0) {
        this.setSource(t61, r53);
      } else if (o42 === 1) {
        this.setTarget(t61, r53);
      }
    } }, { key: "setTarget", value: function e78(t61, r53, o42) {
      var n91 = this.graph.setTarget(t61, r53);
      if (n91.success !== false && !o42) {
        this.fire(z6, n91);
      }
      return n91;
    } }, { key: "setSource", value: function e78(t61, r53, o42) {
      var n91 = this.graph.setSource(t61, r53);
      if (n91.success !== false && !o42) {
        this.fire(E6, n91);
      }
      return n91;
    } }, { key: "addNewPort", value: function e78(t61, r53, o42, n91) {
      var i45 = this;
      var a48 = this.graph.getVertex(t61);
      this.portFactory({ node: a48, type: r53 }, o42, function(e79) {
        var t62 = i45.portIdFunction(e79), o43 = a48.addPort(t62);
        o43.data = e79;
        o43.type = e79.type || r53;
        i45._$_updateVertexAfterPortChange(a48, Te);
        if (!i45._$_dataLoading && !i45.doNotUpdateOriginalData) {
          j7(w9.addPort, i45._$_originalData, i45._$_originalDataType, { node: a48, port: o43 }, i45.idFunction || i45.graph.getIdFunction());
        }
        if (!n91) {
          i45.fire(c13, { vertex: a48, data: e79, port: o43 }, null);
        }
      }, function() {
      });
    } }, { key: "addPort", value: function e78(t61, r53, o42) {
      var n91 = this.graph.getVertex(t61);
      var i45 = n91.addPort(r53, this.portIdFunction);
      this._$_updateVertexAfterPortChange(n91, $e);
      if (!this._$_dataLoading && !this.doNotUpdateOriginalData) {
        j7(w9.addPort, this._$_originalData, this._$_originalDataType, { node: n91, port: i45 }, this.idFunction || this.graph.getIdFunction());
      }
      if (!o42) {
        this.fire(c13, { vertex: n91, data: r53, port: i45 }, null);
      }
      return i45;
    } }, { key: "removePort", value: function e78(t61, r53) {
      var o42;
      if (typeof t61 === "string") {
        var n91 = this.graph.splitPortId(t61);
        if (n91.length === 2) {
          o42 = this.graph.getVertex(n91[0]);
          r53 = n91[1];
        } else {
          o42 = this.graph.getVertex(t61);
        }
      } else {
        if (b11(t61)) {
          r53 = t61.id;
          o42 = t61.getParent();
        } else {
          o42 = this.graph.getVertex(t61);
        }
      }
      if (o42 != null && r53 != null) {
        var i45 = o42.getPort(r53);
        if (i45) {
          var a48 = i45.getAllEdges();
          for (var u52 = a48.length, d32 = 0; d32 < u52; d32++) {
            this.removeEdge(a48[0]);
          }
          o42.removePort(i45);
          this._$_updateVertexAfterPortChange(o42, je);
          this.fire(T4, { vertex: o42, port: i45, edges: a48 }, null);
          return true;
        }
      }
      return false;
    } }, { key: "remove", value: function e78(t61) {
      if (t61 == null)
        return;
      var r53 = this.getObjectInfo(t61);
      this.setSuspendRendering(true);
      try {
        if (r53.obj && (r53.type === j8.objectType || r53.type === S8.objectType || r53.type === V6.objectType)) {
          this["remove" + r53.type](r53.obj);
        } else {
          while (t61.getNodeCount() > 0) {
            this.removeNode(t61.getNodeAt(0));
          }
          while (t61.getEdgeCount() > 0) {
            this.removeEdge(t61.getEdgeAt(0));
          }
          while (t61.getGroupCount() > 0) {
            this.removeGroup(t61.getGroupAt(0));
          }
        }
      } finally {
        this.setSuspendRendering(false, true);
      }
    } }, { key: "setSuspendRendering", value: function e78(t61, r53) {
      for (var o42 in this._$_renderersById) {
        this._$_renderersById[o42].setSuspendRendering(t61, r53);
      }
    } }, { key: "batch", value: function e78(t61) {
      this.setSuspendRendering(true);
      try {
        t61();
      } catch (e79) {
        Q("Error in transaction " + e79);
      } finally {
        this.setSuspendRendering(false, true);
      }
    } }, { key: "updateGroup", value: function e78(t61, r53, o42) {
      this.updateVertex(t61, r53, o42);
    } }, { key: "updateNode", value: function e78(t61, r53, o42) {
      this.updateVertex(t61, r53, o42);
    } }, { key: "updateVertex", value: function e78(t61, r53, o42) {
      var n91 = this.getObjectInfo(t61);
      if (n91.obj) {
        var i45 = b11(n91.obj) ? n91.obj.getParent() : n91.obj;
        var a48 = i45.objectType === j8.objectType ? h14 : g10;
        this._$_updateVertex(n91.obj, r53, a48, function(e79, t62) {
          return { vertex: e79, updates: r53 || {}, originalData: t62, reason: o42 };
        });
      }
    } }, { key: "updatePort", value: function e78(t61, r53, o42) {
      var n91 = this.getObjectInfo(t61);
      if (n91.obj) {
        this._$_updateVertex(n91.obj, r53, u15, function(e79, t62) {
          return { port: e79, vertex: e79.getParent(), updates: r53 || {}, originalData: t62, reason: o42 };
        });
      }
    } }, { key: "updateEdge", value: function e78(t61, r53, o42) {
      var n91 = typeof t61 === "string" ? this.graph.getEdge(t61) : t61;
      if (n91 != null) {
        var i45 = u2({}, n91.data);
        if (r53) {
          for (var a48 in r53) {
            if (n91.data[a48] == null)
              n91.data[a48] = r53[a48];
            else
              b2(n91.data, a48, r53[a48]);
          }
        }
        this.fire(s12, { edge: n91, updates: r53 || {}, originalData: i45, reason: o42 }, null);
      }
    } }, { key: "update", value: function e78(t61, r53, o42) {
      if (f14(t61) || y10(t61)) {
        this.updateVertex(t61, r53, o42);
      } else if (m13(t61)) {
        this.updateEdge(t61, r53, o42);
      } else if (b11(t61)) {
        this.updatePort(t61, r53, o42);
      }
    } }, { key: "setEdgeGeometry", value: function e78(t61, r53, o42) {
      var n91 = x(t61.geometry);
      t61.geometry = r53;
      this.fire(U4, { edge: t61, geometry: r53, originalGeometry: n91, renderer: o42 });
      this.fire(v13);
    } }, { key: "getPath", value: function e78(t61) {
      return new l14(this, t61);
    } }, { key: "findGraphObject", value: function e78(t61) {
      if (t61 == null) {
        return null;
      }
      if (t61 === "*") {
        return this.graph;
      } else if (t61.constructor === j8 || t61.constructor === x8 || t61.constructor === V6) {
        return t61;
      } else if (t61.constructor === S8) {
        return t61;
      } else if (l2(t61) || a2(t61)) {
        return this.graph.getVertex(t61);
      }
      return null;
    } }, { key: "_$_select", value: function e78(t61, r53, o42, n91) {
      var i45 = this;
      if (!r53) {
        o42.clear();
      }
      return o42.append(t61, function(e79) {
        if (n91) {
          i45.fire(S9, { append: r53, obj: e79, selection: o42 });
        }
      });
    } }, { key: "_selectEdges", value: function e78(t61, r53, o42) {
      var n91 = this;
      t61 = t61 || {};
      var i45 = [], a48 = {}, u52 = function e79(t62) {
        if (!a48[t62.getId()]) {
          i45.push(t62);
          a48[t62.getId()] = true;
        }
      }, d32 = function e79(i46, a49, d33, l48) {
        if (i46 != null) {
          var c47 = i46[r53]({ filter: t61.filter });
          for (var f45 = 0; f45 < c47.length; f45++) {
            var p49 = a49 && i46 === n91.graph || c47[f45].source === i46 || o42 && b11(c47[f45].source) && c47[f45].source.getParent() === i46, h35 = d33 && i46 === n91.graph || c47[f45].target === i46 || o42 && b11(c47[f45].target) && c47[f45].target.getParent() === i46;
            if (a49 && p49 || d33 && h35 || l48 && (p49 || h35)) {
              u52(c47[f45]);
            }
          }
        }
      };
      d32(this.findGraphObject(t61.source), true, false, false);
      d32(this.findGraphObject(t61.target), false, true, false);
      d32(this.findGraphObject(t61.element), false, false, true);
      return i45;
    } }, { key: "_$_updateVertex", value: function e78(t61, r53, o42, n91) {
      if (t61 && t61.objectType) {
        var i45 = u2({}, t61.data), a48 = t61.objectType === x8.objectType ? t61.getFullId() : t61.id, u52 = t61.objectType === x8.objectType ? this.portIdFunction(i45) : null, d32;
        if (r53) {
          for (var s40 in r53) {
            b2(t61.data, s40, r53[s40]);
          }
          if (t61.objectType === x8.objectType) {
            d32 = this.portIdFunction(t61.data);
            if (d32 !== t61.id) {
              this.graph.renamePort(t61, d32);
            }
            this._$_updateVertexAfterPortChange(t61.getParent(), Fe);
          }
        }
        var l48 = n91(t61, i45);
        l48.originalId = a48;
        if (u52 != null) {
          l48.originalPortId = u52;
        }
        this._$_dispatchToRenderers(function(e79) {
          return e79._vertexUpdated(l48);
        });
        this.fire(o42, l48, null);
      }
    } }, { key: "_$_updateVertexAfterPortChange", value: function e78(t61, r53) {
      if (this.portUpdater != null) {
        var o42 = this.portUpdater(t61.data, t61, t61.getPorts());
        if (o42 != null) {
          t61.data = o42;
          if (!this._$_dataLoading) {
            var n91 = y10(t61) ? g10 : h14;
            var i45 = { vertex: t61, updates: {}, originalData: t61.data, reason: r53 };
            this._$_dispatchToRenderers(function(e79) {
              return e79._vertexUpdated(i45);
            });
            this.fire(n91, i45);
          }
        }
      }
    } }, { key: "getEdges", value: function e78(t61) {
      return this._selectEdges(t61, "getEdges", false);
    } }, { key: "getAllEdges", value: function e78() {
      return this.graph.getAllEdges();
    } }, { key: "getAllEdgesFor", value: function e78(t61, r53) {
      return t61.getAllEdges({ filter: r53 });
    } }, { key: "selectAllEdges", value: function e78() {
      return this.filter(m13);
    } }, { key: "addAllEdgesToSelection", value: function e78() {
      this.addToSelection(this.getAllEdges());
    } }, { key: "setSelection", value: function e78(t61) {
      var r53 = this._$_resolveObjectForSelection(t61);
      this._$_select(r53, false, this._$_currentSelection, true);
    } }, { key: "select", value: function e78(t61, r53) {
      var o42 = this._$_createSelection();
      var n91 = this._$_resolveObjectForSelection(t61);
      var i45 = this._$_select(n91, true, o42);
      if (r53) {
        for (var a48 = 0; a48 < i45[0].length; a48++) {
          var u52 = i45[0][a48];
          if (f14(u52 || y10(u52) || b11(u52))) {
            var d32 = u52.getAllEdges();
            for (var c47 = 0; c47 < d32.length; c47++) {
              o42.append(d32[c47]);
            }
          }
        }
      }
      return o42;
    } }, { key: "_$_descendants", value: function e78(t61, r53, o42, n91) {
      var i45 = t61.getAllEdges();
      for (var a48 = 0, u52 = i45.length; a48 < u52; a48++) {
        if (i45[a48].source === t61) {
          var d32 = i45[a48].target, s40 = d32.getFullId();
          if (!n91[s40]) {
            r53.append(d32);
            if (o42) {
              r53.append(i45[a48]);
            }
            n91[s40] = true;
            this._$_descendants(d32, r53, o42, n91);
          }
        }
      }
    } }, { key: "selectDescendants", value: function e78(t61, r53, o42) {
      var n91 = this.getObjectInfo(t61);
      var i45 = this._$_createSelection();
      if (n91.obj && n91.obj.objectType === j8.objectType) {
        if (r53) {
          this._$_select(n91.obj, true, i45);
        }
        var a48 = {};
        a48[n91.obj.getFullId()] = true;
        this._$_descendants(n91.obj, i45, o42, a48);
      }
      return i45;
    } }, { key: "_$_resolveObjectForSelection", value: function e78(t61) {
      var r53 = this;
      if (t61 instanceof l14) {
        return t61;
      } else if (t61 instanceof N8) {
        return t61;
      } else if (l2(t61)) {
        return this.getVertex(t61) || this.getEdge(t61);
      } else if (Array.isArray(t61)) {
        return K(t61, function(e79) {
          return l2(e79) ? r53.getVertex(t61) || r53.getEdge(t61) : e79;
        });
      } else {
        return t61;
      }
    } }, { key: "addToSelection", value: function e78(t61) {
      var r53 = this._$_resolveObjectForSelection(t61);
      if (r53) {
        var o42 = this._$_select(r53, true, this._$_currentSelection, false);
        if (o42[1] != null && o42[1].length > 0) {
          this._$_adhocSel(A8, o42[1]);
        }
        if (o42[0] != null && o42[0].length > 0) {
          this._$_adhocSel(S9, o42[0]);
        }
      }
    } }, { key: "_$_adhocSel", value: function e78(t61, r53) {
      for (var o42 = 0; o42 < r53.length; o42++) {
        this.fire(t61, { obj: r53[o42], selection: this._$_currentSelection });
      }
    } }, { key: "toggleSelection", value: function e78(t61) {
      var r53 = this._$_resolveObjectForSelection(t61);
      if (r53) {
        var o42 = [];
        var n91 = this._$_currentSelection.toggle(r53, function(e79, t62) {
          if (!t62) {
            o42.push(e79);
          }
        });
        this._$_adhocSel(A8, n91[1]);
        this._$_adhocSel(A8, o42);
        this._$_adhocSel(S9, n91[0]);
      }
    } }, { key: "removeFromSelection", value: function e78(t61) {
      var r53 = this;
      var o42 = this._$_resolveObjectForSelection(t61);
      if (o42) {
        this._$_currentSelection.remove(o42, function(e79) {
          r53.fire(A8, { obj: e79, selection: r53._$_currentSelection });
        });
      }
    } }, { key: "addPathToSelection", value: function e78(t61) {
      this.addToSelection(this.getPath(t61));
    } }, { key: "clearSelection", value: function e78() {
      this._$_currentSelection.clear();
    } }, { key: "getSelection", value: function e78() {
      return this._$_currentSelection;
    } }, { key: "setMaxSelectedNodes", value: function e78(t61) {
      this._$_currentSelection.setMaxNodes(t61);
    } }, { key: "setMaxSelectedEdges", value: function e78(t61) {
      this._$_currentSelection.setMaxEdges(t61);
    } }, { key: "setSelectionCapacityPolicy", value: function e78(t61) {
      this._$_currentSelection.setCapacityPolicy(t61);
    } }, { key: "_$_notifyDataLoaded", value: function e78(t61) {
      this.setSuspendGraph(true);
      this.fire(t61);
      this.setSuspendGraph(false);
      this._$_dataLoading = false;
    } }, { key: "_$_doLoad", value: function e78(t61, r53, o42) {
      var n91 = this;
      t61 = t61 || {};
      var i45 = t61.type || "json", a48 = t61.data, u52 = t61.url, d32 = t61.jsonp, s40 = t61.onload, l48 = t61.parameters || {}, c47 = t61.error || function(e79) {
      };
      if (a48 == null && u52 == null) {
        throw new TypeError("You must supply either data or url to load.");
      }
      var f45 = function e79(t62) {
        n91._$_originalData = t62;
        n91._$_originalDataType = i45;
        n91._$_dataLoading = true;
        if (n91.undoRedo && r53 === e14) {
          n91.undoRedo.dataLoadStart();
        }
        n91.fire(r53);
        N6(i45, t62, n91, l48);
        n91._$_notifyDataLoaded(o42);
        if (s40) {
          s40(n91, t62);
        }
        n91.fire(n9);
        if (n91.undoRedo && o42 === r15) {
          n91.undoRedo.dataLoadEnd();
        }
      };
      if (a48) {
        f45(a48);
      } else if (u52) {
        if (d32) {
          var p49 = u52.indexOf("?") === -1 ? "?" : "&";
          u52 = u52 + p49 + "callback=?";
        }
        var h35 = i45 === c11 || i45 === l11 ? c11 : t61.dataType;
        var g31 = t61.headers || { Accept: "application/json" };
        this.loadData({ url: u52, success: f45, dataType: h35, error: c47, headers: g31 });
      }
      return this;
    } }, { key: "load", value: function e78(t61) {
      return this._$_doLoad(t61, e14, r15);
    } }, { key: "append", value: function e78(t61) {
      return this._$_doLoad(t61, a15, d12);
    } }, { key: "save", value: function e78(t61) {
      if (t61 == null) {
        throw new Error("JSPLUMB: save method requires at least URL parameter - no params given.");
      }
      if (t61.url == null) {
        throw new Error("JSPLUMB: save method requires at least URL parameter");
      }
      var r53 = this.exportData(t61);
      var o42 = { "Content-Type": "application/json" };
      u2(o42, t61.headers || {});
      this.loadData({ url: t61.url, type: "POST", data: r53, success: t61.success || function(e79) {
      }, error: t61.error || function(e79) {
      }, headers: o42 });
      return this;
    } }, { key: "exportData", value: function e78(t61) {
      t61 = t61 || {};
      return I6(t61.type || c11, this, t61.parameters);
    } }, { key: "toJSON", value: function e78() {
      return I6(c11, this, {});
    } }, { key: "getRenderer", value: function e78(t61) {
      return this._$_renderersById.get(t61);
    } }, { key: "getRenderers", value: function e78() {
      return this._$_renderersById;
    } }, { key: "_$_dispatchToRenderers", value: function e78(t61, r53) {
      this._$_renderersById.forEach(function(e79, o42) {
        if (r53 == null || r53 !== e79) {
          try {
            t61(e79, o42);
          } catch (e80) {
            Q("WARN: could not invoke renderer " + o42 + "  [" + e80 + "]");
          }
        }
      });
    } }, { key: "addRenderer", value: function e78(t61, r53) {
      var o42 = this;
      r53 = r53 || $();
      this._$_renderersById.set(r53, t61);
      t61.id = r53;
      t61.onDestroy(function(e79) {
        o42._$_renderersById.delete(e79.id);
      });
      this.fire(J3, { renderer: t61, id: r53 });
    } }, { key: "getObjectInfo", value: function e78(t61) {
      var r53 = { obj: null, type: null, id: null };
      if (t61 != null) {
        if (typeof t61 === "string") {
          t61 = this.getNode(t61) || this.getGroup(t61) || this.getPort(t61) || this.getEdge(t61);
        } else if (e(t61) === "object" && typeof t61.objectType === "undefined") {
          var o42 = this.idFunction(t61), n91 = this.edgeIdFunction(t61);
          t61 = this.getNode(o42) || this.getGroup(o42) || this.getEdge(n91);
        }
        if (t61 != null) {
          r53.obj = t61;
        } else {
          return r53;
        }
        if (r53.obj != null) {
          r53.id = r53.obj.id;
          r53.type = r53.obj.objectType;
        }
      }
      return r53;
    } }, { key: "undo", value: function e78() {
      this.undoRedo && this.undoRedo.undo();
    } }, { key: "redo", value: function e78() {
      this.undoRedo && this.undoRedo.redo();
    } }, { key: "transaction", value: function e78(t61, r53) {
      this.undoRedo && this.undoRedo.transaction(t61, r53);
    } }, { key: "openTransaction", value: function e78(t61) {
      this.undoRedo && this.undoRedo.openTransaction(t61);
    } }, { key: "rollbackTransaction", value: function e78() {
      this.undoRedo && this.undoRedo.rollbackTransaction();
    } }, { key: "commitTransaction", value: function e78(t61) {
      this.undoRedo && this.undoRedo.commitTransaction(t61);
    } }, { key: "flushUndoRedo", value: function e78() {
      this.undoRedo && this.undoRedo.clear();
    } }]);
    return xe2;
  }(f17);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui/browser-ui-instance.js
  var _4 = function(i45) {
    a(c47, i45);
    var a48 = s(c47);
    function c47() {
      t(this, c47);
      return a48.apply(this, arguments);
    }
    n(c47, [{ key: "loadData", value: function e78(n91) {
      a14(n91);
    } }]);
    return c47;
  }(Ae);
  function j9(e78, n91) {
    return "[" + e78 + "='" + n91 + "']";
  }
  function g12(e78, n91, o42, r53) {
    var t61;
    var a48 = u2({ dataSource: e78, container: n91 }, r53 || {});
    if (a48.selection != null) {
      if (!(typeof a48.selection === "function")) {
        t61 = a48.selection;
      } else {
        t61 = new N8(e78, { generator: a48.selection });
      }
      a48.dataSource = t61;
    }
    a48.toolkitInstance = e78;
    var _17 = a48.id || $();
    var j26 = new Wo(a48, o42);
    if (t61 != null) {
      t61.bind(C7, function(e79) {
        j26._nodeAdded(e79);
      });
      t61.bind(t7, function(e79) {
        j26._groupAdded(e79);
      });
      t61.bind(y11, function(e79) {
        j26._nodeRemoved(e79);
      });
      t61.bind(u16, function(e79) {
        j26._groupRemoved(e79);
      });
      t61.bind(m14, function(e79) {
        j26._edgeAdded(e79);
      });
      t61.bind(o15, function() {
        j26._graphClearStart();
      });
      t61.bind(p13, function() {
        j26._graphClearEnd();
      });
    }
    e78.addRenderer(j26, _17);
    return j26;
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui/surface-decorator.js
  function n13(n91, i45, l48) {
    if (n91 == null) {
      return [];
    }
    var u52 = [];
    var a48 = function n92(u53) {
      var a49, f46, s41, c47;
      var d32 = u53;
      if (typeof d32 === "string") {
        a49 = d32;
        f46 = {};
        c47 = $();
      } else {
        if (d32.type != null) {
          a49 = d32.type;
          f46 = d32.options || {};
          c47 = d32.id || $();
        }
      }
      if (a49 != null && f46 != null) {
        s41 = m3.get(a49, f46, i45, l48, c47);
      } else {
        var p49 = u53;
        c47 = p49.id || $();
        if (p49.reset != null && typeof p49.reset === "function" && p49.decorate != null && typeof p49.decorate === "function") {
          s41 = new h3(p49, {}, i45, l48, c47, p49.incremental);
        } else {
          Q('Cannot register decorator. Ensure both "reset" and "decorate" methods are provided.');
        }
      }
      if (!s41) {
        Q("Decorator [" + a49 + "] nor registered. Not fatal.");
        return null;
      }
      return s41;
    };
    for (var f45 = 0; f45 < n91.length; f45++) {
      var s40 = a48(n91[f45]);
      if (s40) {
        u52.push(s40);
      }
    }
    return u52;
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/defaults.js
  var a21 = "allowNestedGroups";
  var r17 = "anchor";
  var e20 = "anchors";
  var t8 = "connector";
  var i15 = "endpoint";
  var c17 = "endpoints";
  var s18 = "endpointStyle";
  var l15 = "endpointStyles";
  var d15 = "hoverClass";
  var y13 = "hoverPaintStyle";
  var u20 = "paintStyle";
  var z7 = "scope";

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/overlay/overlay.js
  function u21(t61) {
    return t61.type != null && t61.options != null;
  }
  function v17(t61) {
    var i45 = null;
    if (l2(t61)) {
      i45 = { type: t61, options: {} };
    } else {
      i45 = t61;
    }
    i45.options.id = i45.options.id || $();
    return i45;
  }
  var c18 = function(r53) {
    a(u52, r53);
    var l48 = s(u52);
    function u52(t61, i45, o42) {
      var r54;
      t(this, u52);
      r54 = l48.call(this);
      r54.instance = t61;
      r54.component = i45;
      o(l(r54), "id", void 0);
      o(l(r54), "type", void 0);
      o(l(r54), "cssClass", void 0);
      o(l(r54), "visible", true);
      o(l(r54), "location", void 0);
      o(l(r54), "events", void 0);
      o(l(r54), "attributes", void 0);
      o(l(r54), "ignoreTypes", false);
      o42 = o42 || {};
      r54.id = o42.id || $();
      r54.cssClass = o42.cssClass || "";
      r54.setLocation(o42.location);
      r54.events = o42.events || {};
      r54.attributes = o42.attributes || {};
      for (var v41 in r54.events) {
        r54.bind(v41, r54.events[v41]);
      }
      return r54;
    }
    n(u52, [{ key: "setLocation", value: function t61(i45) {
      var e78 = this.location == null ? 0.5 : this.location;
      if (i45 != null) {
        try {
          var s40 = typeof i45 === "string" ? parseFloat(i45) : i45;
          if (!isNaN(s40)) {
            e78 = s40;
          }
        } catch (t62) {
        }
      }
      this.location = e78;
    } }, { key: "shouldFireEvent", value: function t61(i45, e78, s40) {
      return true;
    } }, { key: "setVisible", value: function t61(i45) {
      this.visible = i45;
      this.instance.setOverlayVisible(this, i45);
    } }, { key: "isVisible", value: function t61() {
      return this.visible;
    } }]);
    return u52;
  }(a17);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/factory/overlay-factory.js
  var e21 = {};
  var r18 = { get: function r19(n91, t61, o42, a48) {
    var s40 = e21[t61];
    if (!s40) {
      throw { message: "jsPlumb: unknown overlay type '" + t61 + "'" };
    } else {
      return new s40(n91, o42, a48);
    }
  }, register: function r20(n91, t61) {
    e21[n91] = t61;
  } };

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/overlay/label-overlay.js
  var u22 = function(n91) {
    a(u52, n91);
    var r53 = s(u52);
    function u52(e78, t61, s40) {
      var n92;
      t(this, u52);
      n92 = r53.call(this, e78, t61, s40);
      n92.instance = e78;
      n92.component = t61;
      o(l(n92), "label", void 0);
      o(l(n92), "labelText", void 0);
      o(l(n92), "type", u52.type);
      o(l(n92), "cachedDimensions", void 0);
      o(l(n92), "useHTMLElement", void 0);
      s40 = s40 || { label: "" };
      n92.useHTMLElement = s40.useHTMLElement !== false;
      n92.setLabel(s40.label);
      return n92;
    }
    n(u52, [{ key: "getLabel", value: function e78() {
      if (h2(this.label)) {
        return this.label(this);
      } else {
        return this.labelText;
      }
    } }, { key: "setLabel", value: function e78(t61) {
      this.label = t61;
      this.labelText = null;
      this.instance.updateLabel(this);
    } }, { key: "getDimensions", value: function e78() {
      return { w: 1, h: 1 };
    } }, { key: "updateFrom", value: function e78(t61) {
      if (t61.label != null) {
        this.setLabel(t61.label);
      }
      if (t61.location != null) {
        this.setLocation(t61.location);
        this.instance.updateLabel(this);
      }
    } }]);
    return u52;
  }(c18);
  o(u22, "type", "Label");
  function c19(e78) {
    return e78.type === u22.type;
  }
  r18.register(u22.type, u22);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui/browser-ui-model.js
  var M10 = "labelLocation";
  var w11 = [r17, e20, "cssClass", t8, u20, y13, i15, c17];
  var O11 = "parent";
  function D7(e78, t61) {
    return e78 === "endpoints" && h2(t61.endpoints);
  }
  function L7(e78, r53, i45) {
    var n91 = function e79(t61) {
      return t61 ? r53[t61] : null;
    };
    var o42 = function e79(r54, i46) {
      if (r54 == null) {
        return null;
      } else {
        var o43 = r54[O11];
        var s41;
        if (Array.isArray(o43)) {
          s41 = o43;
        } else {
          s41 = [o43];
        }
        var l49 = s41.find(function(e80) {
          return i46.indexOf(e80) !== -1;
        });
        if (l49) {
          throw new Error("circular view reference");
        }
        i46.push.apply(i46, h(s41));
        return s41.map(function(e80) {
          return n91(e80);
        }).filter(function(e80) {
          return e80 != null;
        });
      }
    };
    var s40 = function e79(t61, r54, n92) {
      var s41 = w11.slice();
      if (r54.mergeStrategy === "override") {
        Array.prototype.push.apply(s41, ["events", "overlays"]);
      }
      if (i45 != null) {
        s41 = s41.filter(function(e80) {
          return i45(e80, r54);
        });
      }
      var a49 = m2(t61, r54, [], s41);
      return l48(o42(t61, n92), a49, n92);
    };
    var l48 = function e79(t61, r54, i46) {
      if (t61 == null) {
        return r54;
      } else {
        var n92 = r54;
        for (var o43 = 0; o43 < t61.length; o43++) {
          n92 = s40(t61[o43], n92, i46);
        }
        return n92;
      }
    };
    var a48 = function e79(t61) {
      if (t61 == null) {
        return {};
      }
      if (typeof t61 === "string") {
        return n91(t61);
      } else if (t61.length) {
        var r54 = false, i46 = 0, o43;
        while (!r54 && i46 < t61.length) {
          o43 = e79(t61[i46]);
          if (o43) {
            r54 = true;
          } else {
            i46++;
          }
        }
        return o43;
      }
    };
    var u52 = a48(e78);
    var f45 = [];
    if (u52) {
      return l48(o42(u52, f45), u52, f45);
    } else {
      return {};
    }
  }
  function j10(e78) {
    return function(t61, r53, i45) {
      var n91 = l3(r53, { w: 1, h: 1 }, e78);
      var o42 = Object.assign(n91.p, { portId: e78[n91.idx].portId });
      var s40 = [o42.x, o42.y, o42.ox, o42.oy, o42.offsetX == null ? 0 : o42.offsetX, o42.offsetY == null ? 0 : o42.offsetY];
      s40.portId = o42.portId;
      return s40;
    };
  }
  function C8(e78) {
    if (e78.anchorPositions != null) {
      e78.anchorPositionFinder = j10(e78.anchorPositions);
    }
  }
  var k9 = function() {
    function t61(e78, n91, o42, s40) {
      t(this, t61);
      this.toolkit = e78;
      this.viewOptions = o42;
      o(this, "defMap", { nodes: /* @__PURE__ */ new Map(), edges: /* @__PURE__ */ new Map(), groups: /* @__PURE__ */ new Map(), ports: /* @__PURE__ */ new Map() });
      o(this, "nodes", void 0);
      o(this, "edges", void 0);
      o(this, "groups", void 0);
      o(this, "ports", void 0);
      this.viewOptions = this.viewOptions || {};
      this.nodes = this.viewOptions.nodes || {};
      this.edges = this.viewOptions.edges || {};
      this.ports = this.viewOptions.ports || {};
      this.groups = this.viewOptions.groups || {};
      var l48, a48, u52;
      if (typeof s40 != "undefined") {
        for (var f45 in this.viewOptions.edges) {
          l48 = this.getEdgeDefinition(f45);
          if (l48.overlays) {
            for (a48 = 0; a48 < l48.overlays.length; a48++) {
              var p49 = l48.overlays[a48];
              if (u21(p49)) {
                var v41 = p49.options;
                for (var c47 in v41.events) {
                  v41.events[c47] = function(e79, t62) {
                    return function(r53) {
                      e79.call(t62, { overlay: r53.overlay, e: r53.e, connection: r53.overlay.component, edge: r53.overlay.component.edge });
                    };
                  }(v41.events[c47], p49);
                }
              }
            }
          }
          s40.registerConnectionType(f45, l48);
        }
        for (a48 in this.viewOptions.ports) {
          u52 = this.getPortDefinition(a48);
          s40.registerEndpointType(a48, u52);
        }
      }
    }
    n(t61, [{ key: "getEdgeDefinition", value: function e78(t62) {
      if (t62 == null) {
        return null;
      }
      if (!this.defMap.edges.has(t62)) {
        var r53 = L7([t62, r7], this.edges);
        if (r53.label != null) {
          r53.overlays = r53.overlays || [];
          var i45 = { type: u22.type, options: { useHTMLElement: r53.useHTMLLabel === true, id: "label", label: r53.label } };
          if (r53.labelClass) {
            i45.options.cssClass = r53.labelClass;
          }
          var n91 = r53.labelLocationAttribute || M10;
          if (r53.labelLocation) {
            i45.options.location = r53.labelLocation;
          } else {
            i45.options.location = "{{".concat(n91, "}}");
          }
          if (r53.labelLocationAttribute) {
            i45.options.labelLocationAttribute = r53.labelLocationAttribute;
          }
          r53.overlays.push(i45);
          delete r53.label;
        }
        delete r53.parent;
        this.defMap.edges.set(t62, r53);
        return r53;
      } else {
        return this.defMap.edges.get(t62);
      }
    } }, { key: "getNodeDefinition", value: function e78(t62) {
      if (t62 == null) {
        return null;
      }
      if (!this.defMap.nodes.has(t62)) {
        var r53 = L7([t62, r7], this.nodes, D7);
        delete r53.parent;
        C8(r53);
        this.defMap.nodes.set(t62, r53);
        return r53;
      } else {
        return this.defMap.nodes.get(t62);
      }
    } }, { key: "getPortDefinition", value: function e78(t62) {
      if (t62 == null) {
        return null;
      }
      if (!this.defMap.ports.has(t62)) {
        var r53 = L7([t62, r7], this.ports, D7);
        delete r53.parent;
        C8(r53);
        this.defMap.ports.set(t62, r53);
        return r53;
      } else {
        return this.defMap.ports.get(t62);
      }
    } }, { key: "getGroupDefinition", value: function e78(t62) {
      if (t62 == null) {
        return null;
      }
      if (!this.defMap.groups.has(t62)) {
        var r53 = L7([t62, r7], this.groups, D7);
        delete r53.parent;
        C8(r53);
        this.defMap.groups.set(t62, r53);
        return r53;
      } else {
        return this.defMap.groups.get(t62);
      }
    } }, { key: "getTypeDefinition", value: function e78(t62) {
      var r53 = this.toolkit.getType(t62);
      if (f14(t62)) {
        return this.getNodeDefinition(r53);
      } else if (y10(t62)) {
        return this.getGroupDefinition(r53);
      } else if (b11(t62)) {
        return this.getPortDefinition(r53);
      }
    } }]);
    return t61;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/layout/abstract-layout-adapter.js
  var r21 = function r22() {
    t(this, r22);
  };

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui/base-surface-layout-adapter.js
  var a22 = function(s40) {
    a(u52, s40);
    var a48 = s(u52);
    function u52(e78) {
      var t61;
      t(this, u52);
      t61 = a48.call(this);
      t61.surface = e78;
      return t61;
    }
    n(u52, [{ key: "getOffset", value: function e78(t61) {
      return this.surface.getOffset(t61);
    } }, { key: "getViewportPosition", value: function e78(t61) {
      return this.surface._getViewportPosition(t61);
    } }, { key: "getViewportPositionById", value: function e78(t61) {
      return this.surface._getViewportPositionById(t61);
    } }, { key: "getSize", value: function e78(t61) {
      return this.surface.jsplumb.getSize(t61);
    } }]);
    return u52;
  }(r21);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui/canvas-layout-adapter.js
  var s19 = function(u52) {
    a(l48, u52);
    var s40 = s(l48);
    function l48(r53) {
      var e78;
      t(this, l48);
      e78 = s40.call(this, r53);
      e78.surface = r53;
      return e78;
    }
    n(l48, [{ key: "filter", value: function r53(e78) {
      return e78.group == null;
    } }, { key: "getElements", value: function r53() {
      var e78 = this.surface.getNodes();
      Array.prototype.push.apply(e78, this.surface.getGroups());
      e78 = e78.filter(function(r54, e79, t61) {
        return r54.group == null;
      });
      return e78;
    } }]);
    return l48;
  }(a22);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui/group-layout-adapter.js
  var l16 = function(o42) {
    a(i45, o42);
    var l48 = s(i45);
    function i45(r53, e78) {
      var t61;
      t(this, i45);
      t61 = l48.call(this, e78);
      t61.group = r53;
      t61.surface = e78;
      return t61;
    }
    n(i45, [{ key: "getElements", value: function r53() {
      return this.group.getMembers();
    } }, { key: "filter", value: function r53(e78) {
      return (y10(e78) || f14(e78)) && e78.group == this.group;
    } }]);
    return i45;
  }(a22);
  var i16 = "allGroupsRelayout";
  var p17 = "groupRelayoutAdhoc";
  var n14 = "groupMemberRemoved";
  var c20 = "newVertexAddedToGroup";
  var v18 = "existingVertexAddedToGroup";

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/endpoint/endpoint-representation.js
  var n15 = function() {
    function n91(s40, a48) {
      t(this, n91);
      this.endpoint = s40;
      o(this, "typeId", void 0);
      o(this, "x", void 0);
      o(this, "y", void 0);
      o(this, "w", void 0);
      o(this, "h", void 0);
      o(this, "computedValue", void 0);
      o(this, "bounds", X());
      o(this, "classes", []);
      o(this, "instance", void 0);
      o(this, "type", void 0);
      a48 = a48 || {};
      this.instance = s40.instance;
      if (s40.cssClass) {
        this.classes.push(s40.cssClass);
      }
      if (a48.cssClass) {
        this.classes.push(a48.cssClass);
      }
    }
    n(n91, [{ key: "addClass", value: function s40(i45) {
      this.classes.push(i45);
      this.instance.addEndpointClass(this.endpoint, i45);
    } }, { key: "removeClass", value: function s40(i45) {
      this.classes = this.classes.filter(function(s41) {
        return s41 !== i45;
      });
      this.instance.removeEndpointClass(this.endpoint, i45);
    } }, { key: "setVisible", value: function s40(i45) {
      this.instance.setEndpointVisible(this.endpoint, i45);
    } }]);
    return n91;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/endpoint/definitions.js
  var a23 = "Dot";
  var r23 = "Blank";
  var e22 = "Rectangle";

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/endpoint/rectangle-endpoint.js
  var o18 = function(h35) {
    a(l48, h35);
    var o42 = s(l48);
    function l48(t61, e78) {
      var s40;
      t(this, l48);
      s40 = o42.call(this, t61, e78);
      o(l(s40), "width", void 0);
      o(l(s40), "height", void 0);
      o(l(s40), "type", e22);
      e78 = e78 || {};
      s40.width = e78.width || 10;
      s40.height = e78.height || 10;
      return s40;
    }
    n(l48, null, [{ key: "_getParams", value: function t61(e78) {
      return { width: e78.width, height: e78.height };
    } }]);
    return l48;
  }(n15);
  o(o18, "type", e22);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/endpoint/dot-endpoint.js
  var u23 = function(t61) {
    a(d32, t61);
    var u52 = s(d32);
    function d32(r53, e78) {
      var t62;
      t(this, d32);
      t62 = u52.call(this, r53, e78);
      o(l(t62), "radius", void 0);
      o(l(t62), "defaultOffset", void 0);
      o(l(t62), "defaultInnerRadius", void 0);
      o(l(t62), "type", a23);
      e78 = e78 || {};
      t62.radius = e78.radius || 5;
      t62.defaultOffset = 0.5 * t62.radius;
      t62.defaultInnerRadius = t62.radius / 3;
      return t62;
    }
    return d32;
  }(n15);
  o(u23, "type", a23);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/endpoint/blank-endpoint.js
  var o19 = function(a48) {
    a(l48, a48);
    var o42 = s(l48);
    function l48(r53, e78) {
      var a49;
      t(this, l48);
      a49 = o42.call(this, r53, e78);
      o(l(a49), "type", r23);
      return a49;
    }
    return l48;
  }(n15);
  o(o19, "type", r23);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/endpoint/endpoint-factory.js
  var a24 = {};
  a24[e22] = { type: e22, cls: o18, compute: function t9(r53, n91, e78, i45) {
    var o42 = i45.width || r53.width, u52 = i45.height || r53.height, a48 = n91.curX - o42 / 2, c47 = n91.curY - u52 / 2;
    r53.x = a48;
    r53.y = c47;
    r53.w = o42;
    r53.h = u52;
    return [a48, c47, o42, u52];
  }, getParams: function t10(r53) {
    return { width: r53.width, height: r53.height };
  } };
  a24[a23] = { type: a23, cls: u23, compute: function t11(r53, n91, e78, i45) {
    var o42 = n91.curX - r53.radius, u52 = n91.curY - r53.radius, a48 = r53.radius * 2, c47 = r53.radius * 2;
    if (i45 && i45.stroke) {
      var s40 = i45.strokeWidth || 1;
      o42 -= s40;
      u52 -= s40;
      a48 += s40 * 2;
      c47 += s40 * 2;
    }
    r53.x = o42;
    r53.y = u52;
    r53.w = a48;
    r53.h = c47;
    return [o42, u52, a48, c47, r53.radius];
  }, getParams: function t12(r53) {
    return { radius: r53.radius };
  } };
  a24[r23] = { type: r23, cls: o19, compute: function t13(r53, n91, e78, i45) {
    r53.x = n91.curX;
    r53.y = n91.curY;
    r53.w = 10;
    r53.h = 0;
    return [n91.curX, n91.curY, 10, 0];
  }, getParams: function t14(r53) {
    return {};
  } };
  var c21 = { get: function t15(r53, n91, e78) {
    var i45;
    var o42 = (i45 = a24[n91]) === null || i45 === void 0 ? void 0 : i45.cls;
    if (!o42) {
      throw { message: "jsPlumb: unknown endpoint type '" + n91 + "'" };
    } else {
      return new o42(r53, e78);
    }
  }, clone: function t16(r53) {
    var n91 = a24[r53.type];
    return c21.get(r53.endpoint, r53.type, n91.getParams(r53));
  }, compute: function r24(n91, e78, i45, o42) {
    var u52;
    var c47 = (u52 = a24[n91.type]) === null || u52 === void 0 ? void 0 : u52.compute;
    if (c47 != null) {
      return c47(n91, e78, i45, o42);
    } else {
      Q("jsPlumb: cannot find endpoint calculator for endpoint of type ", n91.type);
    }
  } };

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/component/component.js
  function p18(e78) {
    return e78 == null ? null : e78.split(" ").filter(function(e79) {
      return e79 != null && e79.length > 0;
    });
  }
  function c22(e78, t61, s40) {
    for (var a48 in t61) {
      e78[a48] = s40;
    }
  }
  var f19 = "connector";
  var v19 = "override";
  var y14 = "cssClass";
  var h17 = "__default";
  var u24 = "anchor";
  var d16 = "anchors";
  function m18(e78, t61) {
    var i45 = e78.objectType, p49 = {};
    var m44 = e78._defaultType;
    var T18 = u2({}, m44);
    c22(p49, m44, h17);
    e78._types.forEach(function(t62) {
      if (t62 !== h17) {
        var s40 = e78.instance.getType(t62, i45);
        if (s40 != null) {
          var a48 = /* @__PURE__ */ new Set([f19, u24, d16]);
          if (s40.mergeStrategy === v19) {
            for (var o42 in s40) {
              a48.add(o42);
            }
          }
          T18 = m2(T18, s40, [y14], k(a48));
          c22(p49, s40, t62);
        }
      }
    });
    if (t61) {
      T18 = M(T18, t61, "_");
    }
    if (_5(e78)) {
      B8.applyType(e78, T18, p49);
    } else if (C9(e78)) {
      m17.applyType(e78, T18, p49);
    }
  }
  function _5(e78) {
    return e78.objectType === S10;
  }
  function C9(e78) {
    return e78.objectType === T5;
  }
  var T5 = "endpoint";
  var S10 = "connection";
  function g13(e78, t61) {
    var a48 = e78.instance.getType(t61, e78.objectType);
    if (a48 != null && a48.cssClass) {
      if (_5(e78)) {
        B8.removeClass(e78, a48.cssClass);
      } else if (C9(e78)) {
        m17.removeClass(e78, a48.cssClass);
      }
    }
  }
  function P6(e78) {
    if (e78.paintStyle && e78.hoverPaintStyle) {
      var t61 = {};
      u2(t61, e78.paintStyle);
      u2(t61, e78.hoverPaintStyle);
      e78.hoverPaintStyle = t61;
    }
  }
  var w12 = function s20(a48, n91, r53) {
    t(this, s20);
    this.instance = a48;
    o(this, "objectType", void 0);
    o(this, "idPrefix", void 0);
    o(this, "defaultLabelLocation", 0.5);
    o(this, "clone", void 0);
    o(this, "deleted", void 0);
    o(this, "segment", void 0);
    o(this, "x", void 0);
    o(this, "y", void 0);
    o(this, "w", void 0);
    o(this, "h", void 0);
    o(this, "id", void 0);
    o(this, "visible", true);
    o(this, "typeId", void 0);
    o(this, "params", {});
    o(this, "paintStyle", void 0);
    o(this, "hoverPaintStyle", void 0);
    o(this, "paintStyleInUse", void 0);
    o(this, "_hover", false);
    o(this, "lastPaintedAt", void 0);
    o(this, "data", void 0);
    o(this, "_defaultType", void 0);
    o(this, "events", void 0);
    o(this, "parameters", void 0);
    o(this, "_types", void 0);
    o(this, "_typeCache", void 0);
    o(this, "cssClass", void 0);
    o(this, "hoverClass", void 0);
    r53 = r53 || {};
    this.cssClass = r53.cssClass || "";
    this.hoverClass = r53.hoverClass || a48.defaults.hoverClass;
    this._types = /* @__PURE__ */ new Set();
    this._typeCache = {};
    this.parameters = x(r53.parameters || {});
    this.id = r53.id || n91 + (/* @__PURE__ */ new Date()).getTime();
    this._defaultType = { parameters: this.parameters, scope: r53.scope || this.instance.defaultScope, overlays: {} };
  };
  var D8 = { create: function e23(t61, s40, a48) {
    a48 = a48 || {};
    var n91 = a48.cssClass || "";
    var r53 = a48.hoverClass || t61.defaults.hoverClass;
    var o42 = /* @__PURE__ */ new Set();
    var l48 = {};
    var p49 = x(a48.parameters || {});
    var c47 = a48.id || s40 + (/* @__PURE__ */ new Date()).getTime();
    var f45 = { parameters: p49, scope: a48.scope || t61.defaultScope, overlays: {} };
    return { cssClass: n91, instance: t61, hoverClass: r53, _types: o42, _typeCache: l48, _defaultType: f45, parameters: p49, id: c47 };
  }, addClass: function e24(t61, s40, a48) {
    var i45 = (t61.cssClass || "").split(" ");
    i45.push(s40);
    t61.cssClass = i45.join(" ");
  }, removeClass: function e25(t61, s40, a48) {
    var i45 = (t61.cssClass || "").split(" ");
    t61.cssClass = i45.filter(function(e78) {
      return e78 !== s40;
    }).join(" ");
  }, cacheTypeItem: function e26(t61, s40, a48, i45) {
    t61._typeCache[i45] = t61._typeCache[i45] || {};
    t61._typeCache[i45][s40] = a48;
  }, reapplyTypes: function e27(t61, s40) {
    m18(t61, s40);
  }, hasType: function e28(t61, s40) {
    return t61._types.has(s40);
  }, removeType: function e29(t61, s40, a48) {
    var i45 = p18(s40), n91 = false, r53 = function e78(s41) {
      if (t61._types.has(s41)) {
        g13(t61, s41);
        t61._types.delete(s41);
        return true;
      }
      return false;
    };
    if (i45 != null) {
      for (var o42 = 0, l48 = i45.length; o42 < l48; o42++) {
        n91 = r53(i45[o42]) || n91;
      }
      if (n91) {
        m18(t61, a48);
      }
    }
  }, addType: function e30(t61, s40, a48) {
    var i45 = p18(s40), n91 = false;
    if (i45 != null) {
      for (var r53 = 0, o42 = i45.length; r53 < o42; r53++) {
        if (!t61._types.has(i45[r53])) {
          t61._types.add(i45[r53]);
          n91 = true;
        }
      }
      if (n91) {
        m18(t61, a48);
      }
    }
  }, getCachedTypeItem: function e31(t61, s40, a48) {
    return t61._typeCache[a48] ? t61._typeCache[a48][s40] : null;
  }, setPaintStyle: function e32(t61, s40) {
    t61.paintStyle = s40;
    t61.paintStyleInUse = t61.paintStyle;
    P6(t61);
  }, setHoverPaintStyle: function e33(t61, s40) {
    t61.hoverPaintStyle = s40;
    P6(t61);
  }, getType: function e34(t61) {
    return Array.from(t61._types.keys());
  }, toggleType: function e35(t61, s40, a48) {
    var i45 = p18(s40);
    if (i45 != null) {
      for (var n91 = 0, r53 = i45.length; n91 < r53; n91++) {
        if (t61._types.has(i45[n91])) {
          g13(t61, i45[n91]);
          t61._types.delete(i45[n91]);
        } else {
          t61._types.add(i45[n91]);
        }
      }
      m18(t61, a48);
    }
  }, clearTypes: function e36(t61, s40) {
    t61._types.forEach(function(e78) {
      g13(t61, e78);
    });
    t61._types.clear();
    m18(t61, s40);
  }, setType: function e37(t61, s40, a48) {
    D8.clearTypes(t61);
    (p18(s40) || []).forEach(t61._types.add, t61._types);
    m18(t61, a48);
  }, applyType: function e38(t61, s40, a48) {
    D8.setPaintStyle(t61, s40.paintStyle);
    D8.setHoverPaintStyle(t61, s40.hoverPaintStyle);
    D8.mergeParameters(t61, s40.parameters);
    t61.paintStyleInUse = t61.paintStyle;
  }, appendToDefaultType: function e39(t61, s40) {
    for (var a48 in s40) {
      t61._defaultType[a48] = s40[a48];
    }
  }, mergeParameters: function e40(t61, s40) {
    if (s40 != null) {
      u2(t61.parameters, s40);
    }
  }, getData: function e41(t61) {
    return t61.data;
  }, setData: function e42(t61, s40) {
    t61.data = s40 || {};
  }, mergeData: function e43(t61, s40) {
    t61.data = u2(t61.data, s40);
  }, destroy: function e44(t61) {
  }, setVisible: function e45(t61, s40) {
    t61.visible = s40;
  } };

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/factory/definitions.js
  var t17;
  (function(t61) {
    t61["top"] = "top";
    t61["left"] = "left";
    t61["right"] = "right";
    t61["bottom"] = "bottom";
  })(t17 || (t17 = {}));
  var o20 = t17.top;
  var n16 = t17.left;
  var i17 = t17.right;
  var e46 = t17.bottom;
  var u25 = [n16, i17];
  var r25 = [o20, e46];
  var s21;
  (function(t61) {
    t61["Circle"] = "Circle";
    t61["Ellipse"] = "Ellipse";
    t61["Triangle"] = "Triangle";
    t61["Diamond"] = "Diamond";
    t61["Rectangle"] = "Rectangle";
    t61["Square"] = "Square";
  })(s21 || (s21 = {}));
  var a25;
  (function(t61) {
    t61["Assign"] = "Assign";
    t61["AutoDefault"] = "AutoDefault";
    t61["Bottom"] = "Bottom";
    t61["BottomLeft"] = "BottomLeft";
    t61["BottomRight"] = "BottomRight";
    t61["Center"] = "Center";
    t61["Continuous"] = "Continuous";
    t61["ContinuousBottom"] = "ContinuousBottom";
    t61["ContinuousLeft"] = "ContinuousLeft";
    t61["ContinuousRight"] = "ContinuousRight";
    t61["ContinuousTop"] = "ContinuousTop";
    t61["ContinuousLeftRight"] = "ContinuousLeftRight";
    t61["ContinuousTopBottom"] = "ContinuousTopBottom";
    t61["Left"] = "Left";
    t61["Perimeter"] = "Perimeter";
    t61["Right"] = "Right";
    t61["Top"] = "Top";
    t61["TopLeft"] = "TopLeft";
    t61["TopRight"] = "TopRight";
  })(a25 || (a25 = {}));

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/endpoint/endpoint.js
  var C10 = ["connectorStyle", "connectorHoverStyle", "connectorOverlays", "connector", "connectionType", "connectorClass", "connectorHoverClass"];
  var h18 = function(s40) {
    a(d32, s40);
    var i45 = s(d32);
    function d32(n91, e78) {
      var r53;
      t(this, d32);
      r53 = i45.call(this, n91, "_jsplumb_e", e78);
      r53.instance = n91;
      o(l(r53), "idPrefix", "_jsplumb_e");
      o(l(r53), "objectType", T5);
      o(l(r53), "connections", []);
      o(l(r53), "endpoint", void 0);
      o(l(r53), "element", void 0);
      o(l(r53), "elementId", void 0);
      o(l(r53), "dragAllowedWhenFull", true);
      o(l(r53), "timestamp", void 0);
      o(l(r53), "portId", void 0);
      o(l(r53), "maxConnections", void 0);
      o(l(r53), "proxiedBy", void 0);
      o(l(r53), "connectorClass", void 0);
      o(l(r53), "connectorHoverClass", void 0);
      o(l(r53), "finalEndpoint", void 0);
      o(l(r53), "enabled", true);
      o(l(r53), "isSource", void 0);
      o(l(r53), "isTarget", void 0);
      o(l(r53), "isTemporarySource", void 0);
      o(l(r53), "connectionCost", 1);
      o(l(r53), "connectionsDirected", void 0);
      o(l(r53), "connectionsDetachable", void 0);
      o(l(r53), "reattachConnections", void 0);
      o(l(r53), "currentAnchorClass", void 0);
      o(l(r53), "referenceEndpoint", void 0);
      o(l(r53), "edgeType", void 0);
      o(l(r53), "connector", void 0);
      o(l(r53), "connectorOverlays", void 0);
      o(l(r53), "connectorStyle", void 0);
      o(l(r53), "connectorHoverStyle", void 0);
      o(l(r53), "deleteOnEmpty", void 0);
      o(l(r53), "uuid", void 0);
      o(l(r53), "scope", void 0);
      o(l(r53), "_anchor", void 0);
      o(l(r53), "defaultLabelLocation", [0.5, 0.5]);
      D8.appendToDefaultType(l(r53), { edgeType: e78.edgeType, maxConnections: e78.maxConnections == null ? r53.instance.defaults.maxConnections : e78.maxConnections, paintStyle: e78.paintStyle || r53.instance.defaults.endpointStyle, hoverPaintStyle: e78.hoverPaintStyle || r53.instance.defaults.endpointHoverStyle, connectorStyle: e78.connectorStyle, connectorHoverStyle: e78.connectorHoverStyle, connectorClass: e78.connectorClass, connectorHoverClass: e78.connectorHoverClass, connectorOverlays: e78.connectorOverlays, connector: e78.connector });
      r53.enabled = !(e78.enabled === false);
      r53.visible = true;
      r53.element = e78.element;
      r53.uuid = e78.uuid;
      r53.portId = e78.portId;
      r53.elementId = e78.elementId;
      r53.connectionCost = e78.connectionCost == null ? 1 : e78.connectionCost;
      r53.connectionsDirected = e78.connectionsDirected;
      r53.currentAnchorClass = "";
      r53.events = {};
      r53.connectorOverlays = e78.connectorOverlays;
      r53.connectorStyle = e78.connectorStyle;
      r53.connectorHoverStyle = e78.connectorHoverStyle;
      r53.connector = e78.connector;
      r53.edgeType = e78.edgeType;
      r53.connectorClass = e78.connectorClass;
      r53.connectorHoverClass = e78.connectorHoverClass;
      r53.deleteOnEmpty = e78.deleteOnEmpty === true;
      r53.isSource = e78.source || false;
      r53.isTemporarySource = e78.isTemporarySource || false;
      r53.isTarget = e78.target || false;
      r53.connections = e78.connections || [];
      r53.scope = e78.scope || n91.defaultScope;
      r53.timestamp = null;
      r53.reattachConnections = e78.reattachConnections || n91.defaults.reattachConnections;
      r53.connectionsDetachable = n91.defaults.connectionsDetachable;
      if (e78.connectionsDetachable === false) {
        r53.connectionsDetachable = false;
      }
      r53.dragAllowedWhenFull = e78.dragAllowedWhenFull !== false;
      var s41 = e78.endpoint || e78.existingEndpoint || n91.defaults.endpoint;
      m17.setEndpoint(l(r53), s41);
      if (e78.preparedAnchor != null) {
        m17.setPreparedAnchor(l(r53), e78.preparedAnchor);
      } else {
        var u52 = e78.anchor ? e78.anchor : e78.anchors ? e78.anchors : n91.defaults.anchor || a25.Top;
        m17.setAnchor(l(r53), u52);
      }
      var v41 = [r7, e78.type || ""].join(" ");
      D8.addType(l(r53), v41, e78.data);
      return r53;
    }
    n(d32, [{ key: "getXY", value: function n91() {
      return { x: this.endpoint.x, y: this.endpoint.y };
    } }, { key: "getDefaultOverlayKey", value: function n91() {
      return "endpointOverlays";
    } }]);
    return d32;
  }(w12);
  var m17 = { _prepareEndpoint: function n17(e78, o42, t61) {
    var c47 = { cssClass: e78.cssClass, endpoint: e78 };
    var r53;
    if (o42 instanceof n15) {
      var a48 = o42;
      r53 = c21.clone(a48);
      r53.classes = c47.cssClass.split(" ");
    } else if (l2(o42)) {
      r53 = c21.get(e78, o42, c47);
    } else {
      var l48 = o42;
      u2(c47, l48.options || {});
      r53 = c21.get(e78, l48.type, c47);
    }
    r53.typeId = t61;
    return r53;
  }, setEndpoint: function n18(e78, o42) {
    var t61 = m17._prepareEndpoint(e78, o42);
    m17._setPreparedEndpoint(e78, t61);
  }, _setPreparedEndpoint: function n19(e78, o42) {
    if (e78.endpoint != null) {
      e78.instance.destroyEndpoint(e78);
    }
    e78.endpoint = o42;
  }, addClass: function n20(e78, o42, t61) {
    D8.addClass(e78, o42, t61);
    if (e78.endpoint != null) {
      e78.endpoint.addClass(o42);
    }
  }, removeClass: function n21(e78, o42, t61) {
    D8.removeClass(e78, o42, t61);
    if (e78.endpoint != null) {
      e78.endpoint.removeClass(o42);
    }
  }, destroy: function n22(e78) {
    D8.destroy(e78);
    e78.deleted = true;
    if (e78.endpoint != null) {
      e78.instance.destroyEndpoint(e78);
    }
  }, applyType: function n23(e78, o42, t61) {
    D8.applyType(e78, o42, t61);
    e78.paintStyle = o42.endpointStyle || o42.paintStyle;
    D8.setHoverPaintStyle(e78, o42.endpointHoverStyle || o42.hoverPaintStyle);
    e78.connectorStyle = o42.connectorStyle;
    e78.connectorHoverStyle = o42.connectorHoverStyle;
    e78.connector = o42.connector;
    e78.connectorOverlays = o42.connectorOverlays;
    e78.edgeType = o42.edgeType;
    if (o42.maxConnections != null) {
      e78.maxConnections = o42.maxConnections;
    }
    if (o42.scope) {
      e78.scope = o42.scope;
    }
    u2(o42, C10);
    e78.instance.applyEndpointType(e78, o42);
  }, setVisible: function n24(e78, o42, t61, c47) {
    D8.setVisible(e78, o42);
    e78.endpoint.setVisible(o42);
    if (!t61) {
      for (var r53 = 0; r53 < e78.connections.length; r53++) {
        B8.setVisible(e78.connections[r53], o42);
        if (!c47) {
          var s40 = e78 === e78.connections[r53].endpoints[0] ? 1 : 0;
          if (e78.connections[r53].endpoints[s40].connections.length === 1) {
            m17.setVisible(e78.connections[r53].endpoints[s40], o42, true, true);
          }
        }
      }
    }
  }, deleteEveryConnection: function n25(e78, o42) {
    var t61 = e78.connections.length;
    for (var c47 = 0; c47 < t61; c47++) {
      e78.instance.deleteConnection(e78.connections[0], o42);
    }
  }, setAnchor: function n26(e78, o42) {
    var t61 = e78.instance.router.prepareAnchor(o42);
    m17.setPreparedAnchor(e78, t61);
    return this;
  }, setPreparedAnchor: function n27(e78, o42) {
    e78.instance.router.setAnchor(e78, o42);
    m17._updateAnchorClass(e78);
    return e78;
  }, _updateAnchorClass: function n28(e78) {
    var o42 = e78._anchor && e78._anchor.cssClass;
    if (o42 != null && o42.length > 0) {
      var t61 = e78.instance.endpointAnchorClassPrefix + "-" + e78.currentAnchorClass;
      e78.currentAnchorClass = o42;
      var c47 = e78.instance.endpointAnchorClassPrefix + (e78.currentAnchorClass ? "-" + e78.currentAnchorClass : "");
      if (t61 !== c47) {
        m17.removeClass(e78, t61);
        m17.addClass(e78, c47);
        e78.instance.removeClass(e78.element, t61);
        e78.instance.addClass(e78.element, c47);
      }
    }
  }, detachFromConnection: function n29(e78, o42, t61, c47) {
    t61 = t61 == null ? e78.connections.indexOf(o42) : t61;
    if (t61 >= 0) {
      e78.connections.splice(t61, 1);
      e78.instance._refreshEndpoint(e78);
    }
    if (!c47 && e78.deleteOnEmpty && e78.connections.length === 0) {
      e78.instance.deleteEndpoint(e78);
    }
  }, isFull: function n30(e78) {
    return e78.maxConnections === 0 ? true : !(m17.isFloating(e78) || e78.maxConnections < 0 || e78.connections.length < e78.maxConnections);
  }, isFloating: function n31(e78) {
    return e78.instance.router.isFloating(e78);
  }, _anchorLocationChanged: function n32(e78, o42) {
    m17._updateAnchorClass(e78);
  }, addConnection: function n33(e78, o42) {
    e78.connections.push(o42);
    e78.instance._refreshEndpoint(e78);
  }, connectorSelector: function n34(e78) {
    return e78.connections[0];
  } };

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/connector/segments.js
  var t18 = {};
  function n35(n91, e78) {
    t18[n91] = e78;
  }
  var e47 = { lineIntersection: function n36(e78, o42, r53, i45, u52) {
    return t18[e78.type].lineIntersection(e78, o42, r53, i45, u52);
  }, boxIntersection: function n37(e78, o42, r53, i45, u52) {
    return t18[e78.type].boxIntersection(e78, o42, r53, i45, u52);
  }, boundingBoxIntersection: function n38(e78, o42) {
    return t18[e78.type].boundingBoxIntersection(e78, o42);
  }, pointOnPath: function n39(e78, o42, r53) {
    return t18[e78.type].pointOnPath(e78, o42, r53);
  }, gradientAtPoint: function n40(e78, o42, r53) {
    return t18[e78.type].gradientAtPoint(e78, o42, r53);
  }, pointAlongPathFrom: function n41(e78, o42, r53, i45) {
    return t18[e78.type].pointAlongPathFrom(e78, o42, r53, i45);
  }, findClosestPointOnPath: function n42(e78, o42, r53) {
    return t18[e78.type].findClosestPointOnPath(e78, o42, r53);
  }, getPath: function n43(e78, o42) {
    return t18[e78.type].getPath(e78, o42);
  } };
  function o21(n91) {
    return t18[n91.type].getLength(n91);
  }
  function r26(n91, e78) {
    return t18[n91].create(e78);
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/connector/connectors.js
  var s22 = {};
  var i18 = { get: function t19(n91, e78, o42) {
    var r53 = s22[e78];
    if (!r53) {
      throw "jsPlumb: unknown connector type '" + e78 + "'";
    } else {
      return r53.create(n91, o42);
    }
  }, register: function t20(n91, e78) {
    s22[n91] = e78;
  }, compute: function t21(n91, e78, o42) {
    var r53 = s22[n91.type];
    if (!r53) {
      throw "jsPlumb: unknown connector type '" + n91.type + "'";
    } else {
      r53.compute(n91, e78, o42);
    }
  }, exportGeometry: function t22(n91) {
    var e78 = s22[n91.type];
    if (!e78) {
      throw "jsPlumb: unknown connector type '" + n91.type + "'";
    } else {
      return e78.geometryExporter(n91);
    }
  }, importGeometry: function t23(n91, e78) {
    var o42 = s22[n91.type];
    if (!o42) {
      throw "jsPlumb: unknown connector type '" + n91.type + "'";
    } else {
      return o42.geometryImporter(n91, e78);
    }
  }, transformGeometry: function t24(n91, e78, o42, r53) {
    var i45 = s22[n91.type];
    if (!i45) {
      throw "jsPlumb: unknown connector type '" + n91.type + "'";
    } else {
      return i45.transformGeometry(e78, o42, r53);
    }
  }, setAnchorOrientation: function t25(n91, e78, o42) {
    var r53 = s22[n91.type];
    if (!r53) {
      throw "jsPlumb: unknown connector type '" + n91.type + "'";
    } else {
      return r53.setAnchorOrientation(n91, e78, o42);
    }
  }, setGeometry: function t26(n91, e78, o42) {
    n91.geometry = e78;
    n91.edited = e78 != null && !o42;
  } };
  function a26(t61) {
    return t61.geometry;
  }
  function u26(t61, n91) {
    t61.geometry = n91;
    return true;
  }
  function p19(t61, n91) {
    var e78 = n91.extents;
    t61.bounds.xmin = Math.min(t61.bounds.xmin, e78.xmin);
    t61.bounds.xmax = Math.max(t61.bounds.xmax, e78.xmax);
    t61.bounds.ymin = Math.min(t61.bounds.ymin, e78.ymin);
    t61.bounds.ymax = Math.max(t61.bounds.ymax, e78.ymax);
  }
  function m19(t61) {
    t61.totalLength = 0;
    t61.segments.length = 0;
    t61.segmentProportions.length = 0;
    t61.segmentProportionalLengths.length = 0;
  }
  function g14(t61, n91, r53) {
    if (r53.x1 === r53.x2 && r53.y1 === r53.y2) {
      return;
    }
    var s40 = r26(n91, r53);
    t61.segments.push(s40);
    t61.totalLength += o21(s40);
    p19(t61, s40);
  }
  function l17(t61, n91, e78) {
    var o42, r53, s40;
    if (e78) {
      n91 = n91 > 0 ? n91 / t61.totalLength : (t61.totalLength + n91) / t61.totalLength;
    }
    if (n91 === 1) {
      o42 = t61.segments.length - 1;
      s40 = 1;
    } else if (n91 === 0) {
      s40 = 0;
      o42 = 0;
    } else {
      if (n91 >= 0.5) {
        o42 = 0;
        s40 = 0;
        for (r53 = t61.segmentProportions.length - 1; r53 > -1; r53--) {
          if (t61.segmentProportions[r53][1] >= n91 && t61.segmentProportions[r53][0] <= n91) {
            o42 = r53;
            s40 = (n91 - t61.segmentProportions[r53][0]) / t61.segmentProportionalLengths[r53];
            break;
          }
        }
      } else {
        o42 = t61.segmentProportions.length - 1;
        s40 = 1;
        for (r53 = 0; r53 < t61.segmentProportions.length; r53++) {
          if (t61.segmentProportions[r53][1] >= n91) {
            o42 = r53;
            s40 = (n91 - t61.segmentProportions[r53][0]) / t61.segmentProportionalLengths[r53];
            break;
          }
        }
      }
    }
    return { segment: t61.segments[o42], proportion: s40, index: o42 };
  }
  function c23(t61, n91, e78) {
    var o42 = l17(t61, n91, e78);
    return o42.segment && e47.pointOnPath(o42.segment, o42.proportion, false) || { x: 0, y: 0 };
  }
  function y15(t61, n91, e78, o42) {
    var s40 = l17(t61, n91, o42);
    return s40.segment && e47.pointAlongPathFrom(s40.segment, s40.proportion, e78, false) || { x: 0, y: 0 };
  }
  function h19(t61) {
    var n91 = 0;
    for (var e78 = 0; e78 < t61.segments.length; e78++) {
      var r53 = o21(t61.segments[e78]);
      t61.segmentProportionalLengths[e78] = r53 / t61.totalLength;
      t61.segmentProportions[e78] = [n91, n91 += r53 / t61.totalLength];
    }
  }
  function x11(t61, e78) {
    t61.strokeWidth = e78.strokeWidth;
    var o42 = e78.sourcePos.curX, r53 = e78.targetPos.curX, s40 = e78.sourcePos.curY, i45 = e78.targetPos.curY, a48 = M6({ x: o42, y: s40 }, { x: r53, y: i45 }), u52 = r53 < o42, p49 = i45 < s40, m44 = [e78.sourcePos.ox, e78.sourcePos.oy], g31 = [e78.targetPos.ox, e78.targetPos.oy], l48 = u52 ? r53 : o42, c47 = p49 ? i45 : s40, f45 = Math.abs(r53 - o42), y34 = Math.abs(i45 - s40);
    var h35 = m44[0] === 0 && m44[1] === 0;
    var x27 = g31[0] === 0 && g31[1] === 0;
    if (h35 || x27) {
      var b28 = f45 > y34 ? 0 : 1, P18 = [1, 0][b28], v41 = b28 === 0 ? o42 : s40, d32 = b28 === 0 ? r53 : i45;
      if (h35) {
        m44[b28] = v41 > d32 ? -1 : 1;
        m44[P18] = 0;
      }
      if (x27) {
        g31[b28] = v41 > d32 ? 1 : -1;
        g31[P18] = 0;
      }
    }
    var S20 = u52 ? f45 + t61.sourceGap * m44[0] : t61.sourceGap * m44[0], G17 = p49 ? y34 + t61.sourceGap * m44[1] : t61.sourceGap * m44[1], w23 = u52 ? t61.targetGap * g31[0] : f45 + t61.targetGap * g31[0], L18 = p49 ? t61.targetGap * g31[1] : y34 + t61.targetGap * g31[1], I17 = m44[0] * g31[0] + m44[1] * g31[1];
    var k20 = { sx: S20, sy: G17, tx: w23, ty: L18, xSpan: Math.abs(w23 - S20), ySpan: Math.abs(L18 - G17), mx: (S20 + w23) / 2, my: (G17 + L18) / 2, so: m44, to: g31, x: l48, y: c47, w: f45, h: y34, segment: a48, startStubX: S20 + m44[0] * t61.sourceStub, startStubY: G17 + m44[1] * t61.sourceStub, endStubX: w23 + g31[0] * t61.targetStub, endStubY: L18 + g31[1] * t61.targetStub, isXGreaterThanStubTimes2: Math.abs(S20 - w23) > t61.sourceStub + t61.targetStub, isYGreaterThanStubTimes2: Math.abs(G17 - L18) > t61.sourceStub + t61.targetStub, opposite: I17 === -1, perpendicular: I17 === 0, orthogonal: I17 === 1, sourceAxis: m44[0] === 0 ? "y" : "x", points: [l48, c47, f45, y34, S20, G17, w23, L18], stubs: [t61.sourceStub, t61.targetStub] };
    k20.anchorOrientation = k20.opposite ? "opposite" : k20.orthogonal ? "orthogonal" : "perpendicular";
    return k20;
  }
  function b13(t61, n91) {
    t61.paintInfo = x11(t61, n91);
    m19(t61);
    i18.compute(t61, t61.paintInfo, n91);
    t61.x = t61.paintInfo.points[0];
    t61.y = t61.paintInfo.points[1];
    t61.w = t61.paintInfo.points[2];
    t61.h = t61.paintInfo.points[3];
    t61.segment = t61.paintInfo.segment;
    h19(t61);
  }
  function P7(t61) {
    t61.geometry = null;
    t61.edited = false;
  }
  function v20(n91) {
    n91.bounds = X();
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/factory/continuous-anchors.js
  var u27;
  var i19;
  var c24;
  var l18 = "currentFace";
  var a27 = (u27 = {}, o(u27, o20, e46), o(u27, i17, n16), o(u27, n16, i17), o(u27, e46, o20), u27);
  var f20 = (i19 = {}, o(i19, o20, i17), o(i19, i17, e46), o(i19, n16, o20), o(i19, e46, n16), i19);
  var d17 = (c24 = {}, o(c24, o20, n16), o(c24, i17, o20), o(c24, n16, e46), o(c24, e46, i17), c24);
  function p20(e78) {
    return e78.faces.length === 0 ? o20 : e78.faces[0];
  }
  function k10(e78, n91) {
    return e78.faces.indexOf(n91) !== -1;
  }
  function m20(e78, n91) {
    return (e78.clockwise ? f20 : d17)[n91];
  }
  function v21(e78, n91) {
    return (e78.clockwise ? d17 : f20)[n91];
  }
  function C11(e78, n91) {
    return e78.lockedAxis == null ? e78.lockedFace == null ? k10(e78, n91) === true : e78.lockedFace === n91 : e78.lockedAxis.indexOf(n91) !== -1;
  }
  function F10(e78, n91) {
    if (k10(e78, n91)) {
      return n91;
    } else if (k10(e78, a27[n91])) {
      return a27[n91];
    } else {
      var t61 = m20(e78, n91);
      if (k10(e78, t61)) {
        return t61;
      } else {
        var r53 = v21(e78, n91);
        if (k10(e78, r53)) {
          return r53;
        }
      }
    }
    return n91;
  }
  function _6(e78, n91, t61) {
    var r53 = { type: e78, locations: [], currentLocation: 0, locked: false, id: $(), cssClass: t61.cssClass || "", isFloating: false, isContinuous: true, timestamp: null, faces: t61.faces || n91, lockedFace: null, lockedAxis: null, clockwise: !(t61.clockwise === false), __currentFace: null };
    Object.defineProperty(r53, l18, { get: function e79() {
      return this.__currentFace;
    }, set: function e79(n92) {
      this.__currentFace = F10(this, n92);
    } });
    return r53;
  }
  var g15 = { Continuous: { faces: [o20, n16, e46, i17] }, ContinuousTop: { faces: [o20] }, ContinuousRight: { faces: [i17] }, ContinuousBottom: { faces: [e46] }, ContinuousLeft: { faces: [n16] }, ContinuousLeftRight: { faces: [n16, i17] }, ContinuousTopBottom: { faces: [o20, e46] } };

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/factory/perimeter-anchors.js
  function t27(r53) {
    var o42 = 0.5, n91 = Math.PI * 2 / r53, t61 = [];
    var e78 = 0;
    for (var a48 = 0; a48 < r53; a48++) {
      var i45 = o42 + o42 * Math.sin(e78), f45 = o42 + o42 * Math.cos(e78);
      t61.push({ x: i45, y: f45, ox: 0, oy: 0, offx: 0, offy: 0, iox: 0, ioy: 0, cls: "" });
      e78 += n91;
    }
    return t61;
  }
  function e48(r53, o42) {
    var n91 = o42 / r53.length, t61 = [], e78 = function r54(e79, a49, i45, f45, s40, h35, u52) {
      n91 = o42 * s40;
      var c47 = (i45 - e79) / n91, l48 = (f45 - a49) / n91;
      for (var p49 = 0; p49 < n91; p49++) {
        t61.push({ x: e79 + c47 * p49, y: a49 + l48 * p49, ox: h35 == null ? 0 : h35, oy: u52 == null ? 0 : u52, offx: 0, offy: 0, iox: 0, ioy: 0, cls: "" });
      }
    };
    for (var a48 = 0; a48 < r53.length; a48++) {
      e78.apply(null, r53[a48]);
    }
    return t61;
  }
  function a28(r53, o42) {
    var n91 = [];
    for (var t61 = 0; t61 < r53.length; t61++) {
      n91.push([r53[t61][0], r53[t61][1], r53[t61][2], r53[t61][3], 1 / r53.length, r53[t61][4], r53[t61][5]]);
    }
    return e48(n91, o42);
  }
  function i20(r53) {
    return a28([[0, 0, 1, 0, 0, -1], [1, 0, 1, 1, 1, 0], [1, 1, 0, 1, 0, 1], [0, 1, 0, 0, -1, 0]], r53);
  }
  function f21(r53) {
    return a28([[0.5, 0, 1, 0.5], [1, 0.5, 0.5, 1], [0.5, 1, 0, 0.5], [0, 0.5, 0.5, 0]], r53);
  }
  function s23(r53) {
    return a28([[0.5, 0, 1, 1], [1, 1, 0, 1], [0, 1, 0.5, 0]], r53);
  }
  function h20(r53, o42) {
    var n91 = [], t61 = o42 / 180 * Math.PI;
    for (var e78 = 0; e78 < r53.length; e78++) {
      var a48 = r53[e78].x - 0.5, i45 = r53[e78].y - 0.5;
      n91.push({ x: 0.5 + (a48 * Math.cos(t61) - i45 * Math.sin(t61)), y: 0.5 + (a48 * Math.sin(t61) + i45 * Math.cos(t61)), ox: r53[e78].ox, oy: r53[e78].oy, offx: 0, offy: 0, iox: 0, ioy: 0, cls: "" });
    }
    return n91;
  }
  var u28 = /* @__PURE__ */ new Map();
  u28.set(s21.Circle, t27);
  u28.set(s21.Ellipse, t27);
  u28.set(s21.Rectangle, i20);
  u28.set(s21.Square, i20);
  u28.set(s21.Diamond, f21);
  u28.set(s21.Triangle, s23);
  function c25(r53) {
    r53 = r53 || {};
    var t61 = r53.anchorCount || 60, e78 = r53.shape;
    if (!e78) {
      throw new Error("no shape supplied to Perimeter Anchor type");
    }
    if (!u28.has(e78)) {
      throw new Error("Shape [" + e78 + "] is unknown by Perimeter Anchor type");
    }
    var a48 = u28.get(e78)(t61);
    if (r53.rotation) {
      a48 = h20(a48, r53.rotation);
    }
    var i45 = O12(a25.Perimeter, a48, r53);
    var f45 = Object.assign(i45, { shape: e78 });
    return f45;
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/factory/anchor-record-factory.js
  var c26 = function() {
    function s40(o42, e78, r53, f45) {
      t(this, s40);
      this.instance = o42;
      this.element = r53;
      o(this, "isFloating", true);
      o(this, "isContinuous", void 0);
      o(this, "isDynamic", void 0);
      o(this, "locations", []);
      o(this, "currentLocation", 0);
      o(this, "locked", false);
      o(this, "cssClass", "");
      o(this, "timestamp", null);
      o(this, "type", "Floating");
      o(this, "id", $());
      o(this, "orientation", [0, 0]);
      o(this, "size", void 0);
      this.size = o42.viewport.getPosition(f45);
      this.locations.push({ x: 0.5, y: 0.5, ox: this.orientation[0], oy: this.orientation[1], offx: 0, offy: 0, iox: this.orientation[0], ioy: this.orientation[1], cls: "" });
    }
    n(s40, [{ key: "_updateOrientationInRouter", value: function o42() {
      this.instance.router.setAnchorOrientation(this, [this.locations[0].ox, this.locations[0].oy]);
    } }, { key: "over", value: function o42(t61) {
      this.orientation = this.instance.router.getEndpointOrientation(t61);
      this.locations[0].ox = this.orientation[0];
      this.locations[0].oy = this.orientation[1];
      this._updateOrientationInRouter();
    } }, { key: "out", value: function o42() {
      this.orientation = null;
      this.locations[0].ox = this.locations[0].iox;
      this.locations[0].oy = this.locations[0].ioy;
      this._updateOrientationInRouter();
    } }]);
    return s40;
  }();
  var x12 = { x: 0.5, y: 0, ox: 0, oy: -1, offx: 0, offy: 0 };
  var h21 = { x: 0.5, y: 1, ox: 0, oy: 1, offx: 0, offy: 0 };
  var p21 = { x: 0, y: 0.5, ox: -1, oy: 0, offx: 0, offy: 0 };
  var m21 = { x: 1, y: 0.5, ox: 1, oy: 0, offx: 0, offy: 0 };
  var v22 = { x: 0, y: 0, ox: 0, oy: -1, offx: 0, offy: 0 };
  var g16 = { x: 1, y: 0, ox: 1, oy: -1, offx: 0, offy: 0 };
  var d18 = { x: 0, y: 1, ox: 0, oy: 1, offx: 0, offy: 0 };
  var C12 = { x: 1, y: 1, ox: 0, oy: 1, offx: 0, offy: 0 };
  var j11 = { x: 0.5, y: 0.5, ox: 0, oy: 0, offx: 0, offy: 0 };
  var k11 = { Top: [x12], Bottom: [h21], Left: [p21], Right: [m21], TopLeft: [v22], TopRight: [g16], BottomLeft: [d18], BottomRight: [C12], Center: [j11], AutoDefault: [x12, p21, h21, m21] };
  function A9(o42, t61) {
    t61 = t61 || {};
    if (o42 === a25.Perimeter) {
      return c25(t61);
    }
    var i45 = k11[o42];
    if (i45 != null) {
      return O12(o42, K(i45, function(o43) {
        return u2({ iox: o43.ox, ioy: o43.oy }, o43);
      }), t61);
    }
    i45 = g15[o42];
    if (i45 != null) {
      return _6(o42, i45.faces, t61);
    }
    throw { message: "jsPlumb: unknown anchor type '" + o42 + "'" };
  }
  function O12(o42, t61, i45) {
    return { type: o42, locations: t61, currentLocation: 0, locked: false, id: $(), isFloating: false, isContinuous: false, isDynamic: t61.length > 1, timestamp: null, cssClass: i45.cssClass || "" };
  }
  function R7(o42, t61, i45, n91) {
    return new c26(o42, t61, i45, n91);
  }
  function L8(o42) {
    return Array.isArray(o42) && o42.length < 7 && o42.every(i2) || o42.length === 7 && o42.slice(0, 5).every(i2) && l2(o42[6]);
  }
  function P8(o42) {
    return o42.type == null && o42.x != null && o42.y != null && o42.ox != null && o42.oy != null;
  }
  function _7(o42) {
    if (l2(o42)) {
      return A9(o42, null);
    } else if (Array.isArray(o42)) {
      if (L8(o42)) {
        var t61 = o42;
        return O12(null, [{ x: t61[0], y: t61[1], ox: t61[2], oy: t61[3], offx: t61[4] == null ? 0 : t61[4], offy: t61[5] == null ? 0 : t61[5], iox: t61[2], ioy: t61[3], cls: t61[6] || "" }], { cssClass: t61[6] || "" });
      } else {
        var i45 = K(o42, function(o43) {
          if (l2(o43)) {
            var t62 = k11[o43];
            return t62 != null ? u2({ iox: t62[0].ox, ioy: t62[0].oy, cls: "" }, t62[0]) : null;
          } else if (L8(o43)) {
            return { x: o43[0], y: o43[1], ox: o43[2], oy: o43[3], offx: o43[4] == null ? 0 : o43[4], offy: o43[5] == null ? 0 : o43[5], iox: o43[2], ioy: o43[3], cls: o43[6] || "" };
          } else if (P8(o43)) {
            return Object.assign({ iox: o43.ox, ioy: o43.oy, offx: o43.offsetX == null ? 0 : o43.offsetX, offy: o43.offsetY == null ? 0 : o43.offsetY, cls: "" }, o43);
          }
        }).filter(function(o43) {
          return o43 != null;
        });
        return O12("Dynamic", i45, {});
      }
    } else {
      var n91 = o42;
      return A9(n91.type, n91.options);
    }
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/connector/connections.js
  var d19 = "__label";
  var v23 = "jtk-default-label";
  var p22 = "overlay";
  var y16 = "labelLocation";
  function h22(e78, n91) {
    var t61 = { cssClass: n91.cssClass, id: d19, component: e78 }, o42 = u2(t61, n91);
    return new u22(e78.instance, e78, o42);
  }
  function m22(e78, t61) {
    var o42 = null;
    if (l2(t61)) {
      o42 = r18.get(e78.instance, t61, e78, {});
    } else if (t61.type != null && t61.options != null) {
      var i45 = t61;
      var l48 = u2({}, i45.options);
      o42 = r18.get(e78.instance, i45.type, e78, l48);
    } else {
      o42 = t61;
    }
    o42.id = o42.id || $();
    D8.cacheTypeItem(e78, p22, o42, o42.id);
    e78.overlays[o42.id] = o42;
    return o42;
  }
  function C13(e78, n91) {
    return e78.detachable === false ? false : n91 != null ? n91.connectionsDetachable === true : e78.detachable === true;
  }
  function S11(e78) {
    return e78.reattach === true || e78.endpoints[0].reattachConnections === true || e78.endpoints[1].reattachConnections === true;
  }
  function P9(e78, t61) {
    var o42 = m22(e78, t61);
    if (e78.data && o42.type === u22.type && !l2(t61)) {
      var a48 = e78.data, r53 = t61.options;
      if (a48) {
        var i45 = r53.labelLocationAttribute || y16;
        var s40 = a48[i45];
        if (s40) {
          o42.location = s40;
        }
      }
    }
    return o42;
  }
  function O13(e78, n91) {
    return e78.overlays[n91];
  }
  function T6(e78) {
    return e78.overlays;
  }
  function I9(e78, n91) {
    var t61 = O13(e78, n91);
    if (t61) {
      t61.setVisible(false);
    }
  }
  function E7(e78) {
    for (var n91 = arguments.length, t61 = new Array(n91 > 1 ? n91 - 1 : 0), o42 = 1; o42 < n91; o42++) {
      t61[o42 - 1] = arguments[o42];
    }
    t61 = t61 || [];
    for (var a48 in e78.overlays) {
      if (t61.length === 0 || t61.indexOf(a48) !== -1) {
        e78.overlays[a48].setVisible(false);
      }
    }
  }
  function _8(e78, n91) {
    var t61 = O13(e78, n91);
    if (t61) {
      t61.setVisible(true);
    }
  }
  function j12(e78) {
    for (var n91 = arguments.length, t61 = new Array(n91 > 1 ? n91 - 1 : 0), o42 = 1; o42 < n91; o42++) {
      t61[o42 - 1] = arguments[o42];
    }
    t61 = t61 || [];
    for (var a48 in e78.overlays) {
      if (t61.length === 0 || t61.indexOf(a48) !== -1) {
        e78.overlays[a48].setVisible(true);
      }
    }
  }
  function V8(e78) {
    for (var n91 in e78.overlays) {
      e78.instance.destroyOverlay(e78.overlays[n91]);
    }
    e78.overlays = {};
    e78.overlayPositions = null;
    e78.overlayPlacements = {};
  }
  function k12(e78, n91, t61) {
    var o42 = e78.overlays[n91];
    if (o42) {
      o42.setVisible(false);
      if (!t61) {
        e78.instance.destroyOverlay(o42);
      }
      delete e78.overlays[n91];
      if (e78.overlayPositions) {
        delete e78.overlayPositions[n91];
      }
      if (e78.overlayPlacements) {
        delete e78.overlayPlacements[n91];
      }
    }
  }
  function A10(e78) {
    for (var n91 = 0, t61 = arguments.length <= 1 ? 0 : arguments.length - 1; n91 < t61; n91++) {
      k12(e78, n91 + 1 < 1 || arguments.length <= n91 + 1 ? void 0 : arguments[n91 + 1]);
    }
  }
  function L9(e78) {
    return O13(e78, d19);
  }
  function w13(e78, o42) {
    var a48 = L9(e78);
    if (!a48) {
      var r53 = l2(o42) || h2(o42) ? { label: o42 } : o42;
      a48 = h22(e78, r53);
      e78.overlays[d19] = a48;
    } else {
      if (l2(o42) || h2(o42)) {
        a48.setLabel(o42);
      } else {
        var i45 = o42;
        if (i45.label) {
          a48.setLabel(i45.label);
        }
        if (i45.location) {
          a48.location = i45.location;
        }
      }
    }
  }
  var x13 = "add";
  var D9 = "remove";
  var F11 = "anchors";
  var W7 = "connector";
  function q6(e78, n91, t61) {
    for (var o42 in e78.overlays) {
      if (n91 === x13) {
        e78.instance.addOverlayClass(e78.overlays[o42], t61);
      } else if (n91 === D9) {
        e78.instance.removeOverlayClass(e78.overlays[o42], t61);
      }
    }
  }
  function z8(n91, t61, o42, a48, r53, i45, l48) {
    var s40;
    if (t61) {
      n91.endpoints[o42] = t61;
      m17.addConnection(t61, n91);
    } else {
      var c47 = l48 || n91.endpointSpec || n91.endpointsSpec[o42] || n91.instance.defaults.endpoints[o42] || n91.instance.defaults.endpoint;
      var f45 = n91.endpointStyles[o42] || n91.endpointStyle || n91.instance.defaults.endpointStyles[o42] || n91.instance.defaults.endpointStyle;
      if (f45.fill == null && n91.paintStyle != null) {
        f45.fill = n91.paintStyle.stroke;
      }
      if (f45.outlineStroke == null && n91.paintStyle != null) {
        f45.outlineStroke = n91.paintStyle.outlineStroke;
      }
      if (f45.outlineWidth == null && n91.paintStyle != null) {
        f45.outlineWidth = n91.paintStyle.outlineWidth;
      }
      var u52 = n91.endpointHoverStyles[o42] || n91.endpointHoverStyle || n91.endpointHoverStyle || n91.instance.defaults.endpointHoverStyles[o42] || n91.instance.defaults.endpointHoverStyle;
      if (n91.hoverPaintStyle != null) {
        if (u52 == null) {
          u52 = {};
        }
        if (u52.fill == null) {
          u52.fill = n91.hoverPaintStyle.stroke;
        }
      }
      a48 = a48 != null ? a48 : n91.instance.defaults.anchors != null ? n91.instance.defaults.anchors[o42] : n91.instance.defaults.anchor;
      s40 = n91.instance._internal_newEndpoint({ paintStyle: f45, hoverPaintStyle: u52, endpoint: c47, connections: [n91], element: r53, scope: n91.scope, anchor: a48, reattachConnections: n91.reattach || n91.instance.defaults.reattachConnections, connectionsDetachable: n91.detachable || n91.instance.defaults.connectionsDetachable });
      n91.instance._refreshEndpoint(s40);
      if (t61 == null) {
        s40.deleteOnEmpty = true;
      }
      n91.endpoints[o42] = s40;
    }
    return s40;
  }
  var B8 = { addClass: function n44(t61, o42, a48) {
    D8.addClass(t61, o42, a48);
    q6(t61, x13, o42);
    if (a48) {
      m17.addClass(t61.endpoints[0], o42);
      m17.addClass(t61.endpoints[1], o42);
      if (t61.suspendedEndpoint) {
        m17.addClass(t61.suspendedEndpoint, o42);
      }
    }
    if (t61.connector) {
      t61.instance.addConnectorClass(t61.connector, o42);
    }
  }, removeClass: function n45(t61, o42, a48) {
    D8.removeClass(t61, o42);
    q6(t61, D9, o42);
    if (a48) {
      m17.removeClass(t61.endpoints[0], o42);
      m17.removeClass(t61.endpoints[1], o42);
      if (t61.suspendedEndpoint) {
        m17.removeClass(t61.suspendedEndpoint, o42);
      }
    }
    if (t61.connector) {
      t61.instance.removeConnectorClass(t61.connector, o42);
    }
  }, setAbsoluteOverlayPosition: function e49(n91, t61, o42) {
    n91.overlayPositions[t61.id] = o42;
  }, getAbsoluteOverlayPosition: function e50(n91, t61) {
    return n91.overlayPositions ? n91.overlayPositions[t61.id] : null;
  }, setPreparedConnector: function e51(n91, t61, o42, a48, r53) {
    if (n91.connector !== t61) {
      var i45, l48 = "";
      if (n91.connector != null) {
        i45 = n91.connector;
        l48 = n91.instance.getConnectorClass(n91.connector);
        n91.instance.destroyConnector(n91);
      }
      n91.connector = t61;
      if (r53) {
        D8.cacheTypeItem(n91, W7, t61, r53);
      }
      B8.addClass(n91, l48);
      if (i45 != null) {
        var s40 = T6(n91);
        for (var f45 in s40) {
          n91.instance.reattachOverlay(s40[f45], n91);
        }
      }
      if (!o42) {
        n91.instance._paintConnection(n91);
      }
    }
  }, makeEndpoint: function e52(n91, t61, o42, a48, r53, i45) {
    a48 = a48 || n91.instance.getId(o42);
    return z8(n91, i45, t61 ? 0 : 1, r53, o42);
  }, replaceEndpoint: function n46(t61, o42, a48) {
    var r53 = t61.endpoints[o42], i45 = r53.elementId, l48 = t61.instance.getEndpoints(r53.element), s40 = l48.indexOf(r53), c47 = z8(t61, null, o42, null, r53.element, i45, a48);
    t61.endpoints[o42] = c47;
    l48.splice(s40, 1, c47);
    m17.detachFromConnection(r53, t61);
    t61.instance.deleteEndpoint(r53);
    t61.instance.fire(d14, { previous: r53, current: c47 });
  }, destroy: function e53(n91) {
    D8.destroy(n91);
    for (var t61 in n91.overlays) {
      n91.instance.destroyOverlay(n91.overlays[t61]);
    }
    n91.overlays = {};
    n91.overlayPositions = {};
    n91.endpoints = null;
    n91.endpointStyles = null;
    n91.source = null;
    n91.target = null;
    n91.instance.destroyConnector(n91);
    n91.connector = null;
    n91.deleted = true;
  }, applyType: function e54(n91, t61, o42) {
    var a48 = null;
    if (t61.connector != null) {
      a48 = D8.getCachedTypeItem(n91, W7, o42.connector);
      if (a48 == null) {
        a48 = B8._prepareConnector(n91, t61.connector, o42.connector);
        D8.cacheTypeItem(n91, W7, a48, o42.connector);
      }
      B8.setPreparedConnector(n91, a48);
    }
    D8.applyType(n91, t61, o42);
    if (t61.overlays) {
      var r53 = {}, i45;
      for (i45 in t61.overlays) {
        var l48 = t61.overlays[i45].options;
        var s40 = n91.overlays[l48.id];
        if (s40) {
          s40.updateFrom(l48);
          r53[l48.id] = true;
          n91.instance.reattachOverlay(s40, n91);
        } else {
          var f45 = D8.getCachedTypeItem(n91, p22, l48.id);
          if (f45 != null) {
            n91.instance.reattachOverlay(f45, n91);
            f45.setVisible(true);
            f45.updateFrom(l48);
            n91.overlays[f45.id] = f45;
          } else {
            f45 = P9(n91, t61.overlays[i45]);
          }
          r53[f45.id] = true;
        }
      }
      for (i45 in n91.overlays) {
        if (n91.overlays[i45].ignoreTypes !== true) {
          if (r53[n91.overlays[i45].id] == null) {
            k12(n91, n91.overlays[i45].id, true);
          }
        }
      }
    }
    if (t61.detachable != null) {
      n91.detachable = t61.detachable === true;
    }
    if (t61.reattach != null) {
      n91.reattach = t61.reattach === true;
    }
    if (t61.scope) {
      n91.scope = t61.scope;
    }
    var d32 = null;
    if (t61.anchor) {
      d32 = D8.getCachedTypeItem(n91, F11, o42.anchor);
      if (d32 == null) {
        d32 = [_7(t61.anchor), _7(t61.anchor)];
        D8.cacheTypeItem(n91, F11, d32, o42.anchor);
      }
    } else if (t61.anchors) {
      d32 = D8.getCachedTypeItem(n91, F11, o42.anchors);
      if (d32 == null) {
        d32 = [_7(t61.anchors[0]), _7(t61.anchors[1])];
        D8.cacheTypeItem(n91, F11, d32, o42.anchors);
      }
    }
    if (d32 != null) {
      n91.instance.router.setConnectionAnchors(n91, d32);
      if (n91.instance.router.isDynamicAnchor(n91.endpoints[1])) {
        n91.instance.repaint(n91.endpoints[1].element);
      }
    }
    n91.instance.applyConnectorType(n91.connector, t61);
  }, setVisible: function e55(n91, t61) {
    D8.setVisible(n91, t61);
    if (t61) {
      j12(n91);
    } else {
      E7(n91);
    }
    if (n91.connector) {
      n91.instance.setConnectorVisible(n91.connector, t61);
    }
    n91.instance._paintConnection(n91);
  }, _prepareConnector: function e56(t61, a48, r53) {
    var l48 = { cssClass: t61.params.cssClass, hoverClass: t61.params.hoverClass, "pointer-events": t61.params["pointer-events"] }, s40;
    if (l2(a48)) {
      s40 = i18.get(t61, a48, l48);
    } else {
      var c47 = a48;
      s40 = i18.get(t61, c47.type, m2(c47.options || {}, l48));
    }
    if (r53 != null) {
      s40.typeId = r53;
    }
    return s40;
  }, _setConnector: function e57(n91, t61, o42, a48, r53) {
    var i45 = B8._prepareConnector(n91, t61, r53);
    B8.setPreparedConnector(n91, i45, o42, a48, r53);
  } };

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui/ui-path.js
  var a29 = function() {
    function a48(e78, s40) {
      t(this, a48);
      this.path = e78;
      this.surface = s40;
    }
    n(a48, [{ key: "getVertexCount", value: function e78() {
      return this.path.getVertexCount();
    } }, { key: "getEdgeCount", value: function e78() {
      return this.path.getEdgeCount();
    } }, { key: "setVisible", value: function e78(t61) {
      this.surface.setVisible(this.path, t61);
    } }, { key: "addVertexClass", value: function e78(t61) {
      var s40 = this;
      this.path.eachVertex(function(e79, a49) {
        s40.surface.addClass(a49, t61);
      });
    } }, { key: "removeVertexClass", value: function e78(t61) {
      var s40 = this;
      this.path.eachVertex(function(e79, a49) {
        s40.surface.removeClass(a49, t61);
      });
    } }, { key: "addEdgeClass", value: function e78(t61) {
      var a49 = this;
      this.path.eachEdge(function(e79, n91) {
        B8.addClass(a49.surface.connMap[n91.getId()], t61);
      });
    } }, { key: "removeEdgeClass", value: function e78(t61) {
      var a49 = this;
      this.path.eachEdge(function(e79, n91) {
        B8.removeClass(a49.surface.connMap[n91.getId()], t61);
      });
    } }, { key: "addClass", value: function e78(t61) {
      this.addVertexClass(t61);
      this.addEdgeClass(t61);
    } }, { key: "removeClass", value: function e78(t61) {
      this.removeVertexClass(t61);
      this.removeEdgeClass(t61);
    } }]);
    return a48;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui/constants.js
  var a30 = "afterLayoutRefresh";
  var t28 = "adhocLayout";
  var r27 = "canvasClick";
  var e58 = "canvasDblClick";
  var o22 = "group:resize";
  var n47 = "group:relayout";
  var i21 = "lasso:end";
  var s24 = "node:visibility";
  var d20 = "node:render";
  var k13 = "objectRepainted";
  var p23 = "pan";
  var j13 = "relayout";
  var c27 = "resize";
  var l19 = "rotate";
  var m23 = "modeChanged";
  var u29 = "state:restore";
  var f22 = "directRender:relayout";
  var g17 = "render:start";
  var x14 = "render:end";
  var y17 = "plugin:added";
  var b14 = "internal.vertex:updated";
  var w14 = "data-jtk-offset-x";
  var C14 = "data-jtk-offset-y";
  var S12 = "data-jtk-anchor-x";
  var R8 = "data-jtk-anchor-y";
  var z9 = "data-jtk-orientation-x";
  var D10 = "data-jtk-orientation-y";
  var P10 = "jtk-node-id";
  var A11 = "jtk-miniview-type";
  var B9 = "data-jtk-port";
  var F12 = "data-jtk-port-id";
  var G7 = "data-jtk-port-type";
  var H5 = "data-jtk-edge-type";
  var I10 = "data-jtk-source";
  var J4 = "data-jtk-target";
  var K5 = "data-jtk-source-port-id";
  var Q5 = "data-jtk-target-port-id";
  var U5 = "data-jtk-source-port";
  var V9 = "data-jtk-target-port";
  var W8 = "data-jtk-source-port-type";
  var X6 = "data-jtk-target-port-type";
  var Y6 = "data-jtk-endpoint";
  var Z4 = "jtk-endpoint";
  var $4 = "jtk-surface";
  var _9 = "jtk-surface-direct-render";
  var aa = "jtk-surface-touch-device";
  var ta = "jtk-surface-pointer-device";
  var ra = "jtk-surface-nopan";
  var ea = "jtk-surface-canvas";
  var ka = "jtk-surface-selected-element";
  var pa = "jtk-surface-selected-connection";
  var ja = "jtk-surface-panning";
  var ca = "jtk-surface-element-dragging";
  var la = "jtk-surface-edge-dragging";
  var ma = "jtk-lasso";
  var ua = "jtk-lasso-mask";
  var fa = "jtk-lasso-mask-left";
  var ga = "jtk-lasso-mask-top";
  var xa = "jtk-lasso-mask-right";
  var ya = "jtk-lasso-mask-bottom";
  var ha = "jtk-miniview";
  var ba = "jtk-miniview-canvas";
  var wa = "jtk-miniview-panner";
  var Ca = "jtk-miniview-element";
  var Sa = "jtk-miniview-group-element";
  var Ra = "jtk-miniview-panning";
  var za = "jtk-miniview-collapse";
  var Da = "jtk-miniview-collapsed";
  var Ea = "jtk-miniview-click-to-center";
  var La = "jtk-most-recently-dragged";
  var qa = "jtk-drag-select-defeat";
  var Na = "jtk-node";
  var Ta = "jtk-port";
  var Ma = "jtk-group";
  var Oa = "jtk-drag-select-defeat";
  var Pa = { click: "click", start: "start", stop: "stop", default: "default", drop: "drop", disabled: "disabled", pan: "pan", select: "select", drag: "drag", left: "left", right: "right", top: "top", bottom: "bottom", width: "width", height: "height", leftmin: "leftmin", leftmax: "leftmax", topmin: "topmin", topmax: "topmax", min: "min", max: "max", nominalSize: "50px", px: "px", onepx: "1px", nopx: "0px", em: "em", absolute: "absolute", relative: "relative", none: "none", block: "block", hidden: "hidden", div: "div", id: "id", plusEquals: "+=", minusEquals: "-=", dot: ".", transform: "transform", transformOrigin: "transform-origin", surfaceNodeDragScope: "surfaceNodeDrag", mistletoeLayoutType: "Mistletoe", surfaceType: "Surface", jtkStatePrefix: "jtk-state-", msgCannotSaveState: "Cannot save state", msgCannotRestoreState: "Cannot restore state" };

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui/value-sources.js
  var r28 = "data-";
  var a31 = function() {
    function i45(t61) {
      t(this, i45);
      this.el = t61;
    }
    n(i45, [{ key: "value", value: function t61(e78, i46) {
      var r53 = this.el.getAttribute(e78);
      return r53 == null ? i46 : r53;
    } }, { key: "findDataValues", value: function t61(e78) {
      for (var i46 = 0; i46 < this.el.attributes.length; i46++) {
        var a48 = this.el.attributes[i46];
        if (a48.name.indexOf(r28) === 0) {
          e78[a48.value] = a48.name.split("-")[1];
        }
      }
    } }]);
    return i45;
  }();
  var n48 = function() {
    function a48(t61, r53) {
      t(this, a48);
      this.obj = t61;
      o(this, "stripPrefix", void 0);
      this.stripPrefix = r53 || "";
    }
    n(a48, [{ key: "value", value: function t61(e78, i45) {
      var r53 = this.obj[e78.replace(this.stripPrefix, "").replace(/(\-\w)/g, function(t62) {
        return t62[1].toUpperCase();
      })];
      return r53 == null ? i45 : r53;
    } }, { key: "findDataValues", value: function t61(e78) {
      for (var i45 in this.obj) {
        if (i45.indexOf(r28) === 0) {
          e78[this.obj[i45]] = i45.split("-")[1];
        }
      }
    } }]);
    return a48;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui/surface-grid-profile.js
  var r29 = function r30(t61) {
    t(this, r30);
    o(this, "grid", void 0);
    o(this, "snap", false);
    o(this, "fitGroupsToGrid", false);
    if (t61 != null) {
      this.snap = t61.snap === true;
      this.grid = t61.size;
      this.fitGroupsToGrid = t61.fitGroupsToGrid !== false;
    }
  };

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui/surface-magnetize-profile.js
  var e59 = function e60(i45, o42) {
    t(this, e60);
    this.gridProfile = o42;
    o(this, "afterGroupCollapse", void 0);
    o(this, "afterGroupExpand", void 0);
    o(this, "afterGroupResize", void 0);
    o(this, "afterGroupShrink", void 0);
    o(this, "afterGroupGrow", void 0);
    o(this, "afterLayout", void 0);
    o(this, "afterDrag", void 0);
    o(this, "constant", void 0);
    o(this, "constrainToViewport", void 0);
    o(this, "repositionDraggedElement", void 0);
    o(this, "grid", void 0);
    if (i45 != null) {
      this.afterDrag = i45.afterDrag === true;
      this.constant = i45.constant === true;
      this.constrainToViewport = i45.constrainToViewport === true;
      this.repositionDraggedElement = i45.repositionDraggedElement === true;
      this.afterLayout = i45.afterLayout === true;
      this.afterGroupResize = i45.afterGroupResize === true;
      this.afterGroupShrink = i45.afterGroupShrink === true || this.afterGroupResize && i45.afterGroupShrink !== false;
      this.afterGroupGrow = i45.afterGroupGrow === true || this.afterGroupResize && i45.afterGroupGrow !== false;
      this.afterGroupCollapse = i45.afterGroupCollapse === true;
      this.afterGroupExpand = i45.afterGroupExpand === true;
      if (this.constant && this.afterDrag) {
        this.constant = false;
      }
      if (this.constant) {
        this.repositionDraggedElement = false;
      }
    }
  };

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui/property-mappings/property-mapper.js
  var r31 = function() {
    function r53(n91, t61) {
      t(this, r53);
      this.surface = n91;
      o(this, "_$_edgeMappings", void 0);
      o(this, "_$_originalEdgeTypeFunction", void 0);
      t61 = t61 || { edgeMappings: [] };
      this._$_edgeMappings = t61.edgeMappings || [];
      this._$_originalEdgeTypeFunction = this.surface.toolkitInstance.edgeTypeFunction;
      this._$_init();
    }
    n(r53, [{ key: "computeTypes", value: function n91(e78) {
      var i45 = this;
      var r54 = [this._$_originalEdgeTypeFunction(e78)];
      var s40 = function n92(s41) {
        var p50 = i45._$_edgeMappings[s41].property;
        var o42 = i45._$_edgeMappings[s41].mappings;
        if (e78[p50] != null) {
          var c47 = e78[p50].split(" ");
          r54.push.apply(r54, h(c47.filter(function(n93) {
            return o42[n93] != null;
          }).map(function(n93) {
            return "".concat(p50, "_").concat(n93);
          })));
        }
        if (o42[d9] != null) {
          if (e78[p50] != null) {
            r54.push("".concat(p50, "_").concat(d9));
          }
        }
      };
      for (var p49 = 0; p49 < this._$_edgeMappings.length; p49++) {
        s40(p49);
      }
      return r54.join(" ");
    } }, { key: "_$_init", value: function n91() {
      var e78 = this;
      for (var i45 = 0; i45 < this._$_edgeMappings.length; i45++) {
        var t61 = this._$_edgeMappings[i45].property;
        var a48 = this._$_edgeMappings[i45].mappings;
        for (var r54 in a48) {
          if (a48.hasOwnProperty(r54)) {
            var s40 = "".concat(t61, "_").concat(r54);
            this.surface.jsplumb.registerConnectionType(s40, a48[r54]);
          }
        }
      }
      this.surface.toolkitInstance.edgeTypeFunction = function(n92) {
        return e78.computeTypes(n92);
      };
    } }]);
    return r53;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/css-constants.js
  var t29 = "jtk-connector";
  var n49 = "jtk-connector-outline";
  var o23 = "jtk-connected";
  var r32 = "jtk-endpoint";
  var e61 = "jtk-endpoint-connected";
  var a32 = "jtk-endpoint-full";
  var d21 = "jtk-floating-endpoint";
  var v24 = "jtk-endpoint-drop-allowed";
  var j14 = "jtk-endpoint-drop-forbidden";
  var k14 = "jtk-endpoint-anchor";
  var p24 = "jtk-group-collapsed";
  var l20 = "jtk-group-expanded";
  var c28 = "jtk-overlay";
  var i22 = "jtk-label-overlay";

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/browser-ui-renderer/constants.js
  var e62 = "data-jtk-container";
  var c29 = "data-jtk-group-content";
  var s25 = "data-jtk-enabled";
  var i23 = "data-jtk-scope";
  var j15 = "connection";
  var m24 = "div";
  var k15 = "position";
  var f23 = a5(t29);
  var l21 = a5(r32);
  var b15 = n3(d5);
  var g18 = n3(c29);
  var u30 = a5(c28);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/browser-ui-renderer/collicat.js
  function S13(t61, e78, i45) {
    if (s4(e78, i45, t61)) {
      return e78;
    } else {
      var s40 = e78.parentNode;
      while (s40 != null && s40 !== t61) {
        if (s4(s40, i45, t61)) {
          return s40;
        } else {
          s40 = s40.parentNode;
        }
      }
    }
  }
  function D11(t61) {
    if (typeof t61 === "function") {
      t61._katavorioId = $();
      return t61._katavorioId;
    } else {
      return t61;
    }
  }
  function E8(t61, e78, i45) {
    var s40 = null;
    var r53 = e78.getAttribute("katavorio-draggable"), o42 = r53 != null ? "[katavorio-draggable='" + r53 + "'] " : "";
    for (var a48 = 0; a48 < t61.length; a48++) {
      if (t61[a48].selector === ".") {
        s40 = e78;
      } else {
        s40 = S13(e78, i45, o42 + t61[a48].selector);
      }
      if (s40 != null) {
        if (t61[a48].filter) {
          var l48 = s4(i45, t61[a48].filter, s40), h35 = t61[a48].filterExclude === true;
          if (h35 && !l48 || l48) {
            return null;
          }
        }
        return [t61[a48], s40];
      }
    }
    return null;
  }
  var k16 = "start";
  var w15 = "beforeStart";
  var A12 = "drag";
  var b16 = "drop";
  var T7 = "over";
  var z10 = "out";
  var L10 = "stop";
  var C15 = "katavorio-draggable";
  var F13 = C15;
  var N9 = 10;
  var G8 = 10;
  var M11 = function t30() {
    return true;
  };
  var Z5 = function t31() {
    return false;
  };
  var B10 = { delegatedDraggable: "katavorio-delegated-draggable", draggable: F13, drag: "katavorio-drag", selected: "katavorio-drag-selected", ghostProxy: "katavorio-ghost-proxy", clonedDrag: "katavorio-clone-drag" };
  var I11 = [L10, k16, A12, b16, T7, z10, w15];
  var R9 = function t32() {
  };
  var j16 = function t33(e78, i45) {
    if (e78 == null)
      return;
    e78 = !l2(e78) && e78.tagName == null && e78.length != null ? e78 : [e78];
    for (var s40 = 0; s40 < e78.length; s40++) {
      i45.apply(e78[s40], [e78[s40]]);
    }
  };
  var O14 = function t34(e78, i45, s40) {
    var r53 = e78.srcElement || e78.target;
    return !s4(r53, s40.getInputFilterSelector(), i45);
  };
  var V10 = function() {
    function t61(e78, r53) {
      t(this, t61);
      this.el = e78;
      this.manager = r53;
      o(this, "_class", void 0);
      o(this, "uuid", $());
      o(this, "enabled", true);
      o(this, "scopes", []);
      o(this, "eventManager", void 0);
      this.eventManager = r53.eventManager;
    }
    n(t61, [{ key: "setEnabled", value: function t62(e78) {
      this.enabled = e78;
    } }, { key: "isEnabled", value: function t62() {
      return this.enabled;
    } }, { key: "toggleEnabled", value: function t62() {
      this.enabled = !this.enabled;
    } }, { key: "addScope", value: function t62(e78) {
      var i45 = {};
      j16(this.scopes, function(t63) {
        i45[t63] = true;
      });
      j16(e78 ? e78.split(/\s+/) : [], function(t63) {
        i45[t63] = true;
      });
      this.scopes.length = 0;
      for (var s40 in i45) {
        this.scopes.push(s40);
      }
    } }, { key: "removeScope", value: function t62(e78) {
      var i45 = {};
      j16(this.scopes, function(t63) {
        i45[t63] = true;
      });
      j16(e78 ? e78.split(/\s+/) : [], function(t63) {
        delete i45[t63];
      });
      this.scopes.length = 0;
      for (var s40 in i45) {
        this.scopes.push(s40);
      }
    } }, { key: "toggleScope", value: function t62(e78) {
      var i45 = {};
      j16(this.scopes, function(t63) {
        i45[t63] = true;
      });
      j16(e78 ? e78.split(/\s+/) : [], function(t63) {
        if (i45[t63])
          delete i45[t63];
        else
          i45[t63] = true;
      });
      this.scopes.length = 0;
      for (var s40 in i45) {
        this.scopes.push(s40);
      }
    } }]);
    return t61;
  }();
  var X7;
  (function(t61) {
    t61["notNegative"] = "notNegative";
    t61["parent"] = "parent";
    t61["parentEnclosed"] = "parentEnclosed";
  })(X7 || (X7 = {}));
  function Y7(t61, e78) {
    var i45 = null;
    switch (t61) {
      case X7.notNegative: {
        i45 = function t62(e79, i46, s41, r53) {
          return { x: Math.max(0, Math.min(e79.x)), y: Math.max(0, Math.min(e79.y)) };
        };
        break;
      }
      case X7.parent: {
        var s40 = e78 || 5;
        i45 = function t62(e79, i46, r53, o42) {
          var a48 = e79.x < 0 ? 0 : e79.x > r53.w - s40 ? r53.w - s40 : e79.x;
          var n91 = e79.y < 0 ? 0 : e79.y > r53.h - s40 ? r53.h - s40 : e79.y;
          return { x: a48, y: n91 };
        };
        break;
      }
      case X7.parentEnclosed: {
        i45 = function t62(e79, i46, s41, r53) {
          var o42 = e79.x < 0 ? 0 : e79.x + r53.w > s41.w ? s41.w - r53.w : e79.x;
          var a48 = e79.y < 0 ? 0 : e79.y + r53.h > s41.h ? s41.h - r53.h : e79.y;
          return { x: o42, y: a48 };
        };
        break;
      }
    }
    return i45;
  }
  var U6 = function(_17) {
    a(P18, _17);
    var y34 = s(P18);
    function P18(t61, e78, o42) {
      var n91;
      t(this, P18);
      n91 = y34.call(this, t61, o42);
      o(l(n91), "_class", void 0);
      o(l(n91), "rightButtonCanDrag", void 0);
      o(l(n91), "consumeStartEvent", void 0);
      o(l(n91), "clone", void 0);
      o(l(n91), "scroll", void 0);
      o(l(n91), "trackScroll", void 0);
      o(l(n91), "cloneSize", void 0);
      o(l(n91), "_currentZoom", void 0);
      o(l(n91), "_downAt", void 0);
      o(l(n91), "_posAtDown", void 0);
      o(l(n91), "_pagePosAtDown", void 0);
      o(l(n91), "_pageDelta", { x: 0, y: 0 });
      o(l(n91), "_canvasShift", { x: 0, y: 0 });
      o(l(n91), "_currentDeltas", { x: 0, y: 0 });
      o(l(n91), "_moving", void 0);
      o(l(n91), "_lastPosition", void 0);
      o(l(n91), "_lastScrollValues", { x: 0, y: 0 });
      o(l(n91), "_initialScroll", { x: 0, y: 0 });
      o(l(n91), "_size", void 0);
      o(l(n91), "_currentParentPosition", void 0);
      o(l(n91), "_ghostParentPosition", void 0);
      o(l(n91), "_dragEl", void 0);
      o(l(n91), "_multipleDrop", void 0);
      o(l(n91), "_ghostProxyOffsets", void 0);
      o(l(n91), "_ghostDx", void 0);
      o(l(n91), "_ghostDy", void 0);
      o(l(n91), "_isConstrained", false);
      o(l(n91), "_ghostProxyParent", void 0);
      o(l(n91), "_useGhostProxy", void 0);
      o(l(n91), "_ghostProxyFunction", void 0);
      o(l(n91), "_activeSelectorParams", void 0);
      o(l(n91), "_availableSelectors", []);
      o(l(n91), "_canDrag", void 0);
      o(l(n91), "_consumeFilteredEvents", void 0);
      o(l(n91), "_parent", void 0);
      o(l(n91), "_ignoreZoom", void 0);
      o(l(n91), "_getTargetScale", void 0);
      o(l(n91), "_filters", {});
      o(l(n91), "_constrainRect", void 0);
      o(l(n91), "_elementToDrag", void 0);
      o(l(n91), "downListener", void 0);
      o(l(n91), "moveListener", void 0);
      o(l(n91), "upListener", void 0);
      o(l(n91), "scrollTracker", void 0);
      o(l(n91), "listeners", { start: [], drag: [], stop: [], over: [], out: [], beforeStart: [], revert: [] });
      n91._class = n91.manager.css.draggable;
      h5(n91.el, n91._class);
      n91.downListener = n91._downListener.bind(l(n91));
      n91.upListener = n91._upListener.bind(l(n91));
      n91.moveListener = n91._moveListener.bind(l(n91));
      n91.rightButtonCanDrag = e78.rightButtonCanDrag === true;
      n91.consumeStartEvent = e78.consumeStartEvent !== false;
      n91._dragEl = n91.el;
      n91.clone = e78.clone === true;
      n91.cloneSize = e78.cloneSize;
      n91.scroll = e78.scroll === true;
      n91.trackScroll = e78.trackScroll !== false;
      n91._multipleDrop = e78.multipleDrop !== false;
      n91._canDrag = e78.canDrag || M11;
      n91._consumeFilteredEvents = e78.consumeFilteredEvents;
      n91._parent = e78.parent;
      n91._ignoreZoom = e78.ignoreZoom === true;
      n91._ghostProxyParent = e78.ghostProxyParent;
      n91._getTargetScale = e78.getTargetScale;
      if (n91.trackScroll) {
        n91.scrollTracker = n91._trackScroll.bind(l(n91));
        document.addEventListener("scroll", n91.scrollTracker);
      }
      if (e78.ghostProxy === true) {
        n91._useGhostProxy = M11;
      } else {
        if (e78.ghostProxy && typeof e78.ghostProxy === "function") {
          n91._useGhostProxy = e78.ghostProxy;
        } else {
          n91._useGhostProxy = function(t62, e79) {
            if (n91._activeSelectorParams && n91._activeSelectorParams.useGhostProxy) {
              return n91._activeSelectorParams.useGhostProxy(t62, e79);
            } else {
              return false;
            }
          };
        }
      }
      if (e78.makeGhostProxy) {
        n91._ghostProxyFunction = e78.makeGhostProxy;
      } else {
        n91._ghostProxyFunction = function(t62) {
          if (n91._activeSelectorParams && n91._activeSelectorParams.makeGhostProxy) {
            return n91._activeSelectorParams.makeGhostProxy(t62);
          } else {
            return t62.cloneNode(true);
          }
        };
      }
      if (e78.selector) {
        var l48 = n91.el.getAttribute(C15);
        if (l48 == null) {
          l48 = "" + (/* @__PURE__ */ new Date()).getTime();
          n91.el.setAttribute("katavorio-draggable", l48);
        }
        n91._availableSelectors.push(e78);
      }
      n91.eventManager.on(n91.el, t4, n91.downListener);
      return n91;
    }
    n(P18, [{ key: "_trackScroll", value: function t61(e78) {
      if (this._moving) {
        var i45 = { x: document.documentElement.scrollLeft, y: document.documentElement.scrollTop }, s40 = i45.x - this._lastScrollValues.x, r53 = i45.y - this._lastScrollValues.y, o42 = { x: s40 + this._lastPosition.x, y: r53 + this._lastPosition.y }, a48 = o42.x - this._downAt.x, n91 = o42.y - this._downAt.y;
        if (this._dragEl && this._dragEl.parentNode) {
          a48 += this._dragEl.parentNode.scrollLeft - this._initialScroll.x;
          n91 += this._dragEl.parentNode.scrollTop - this._initialScroll.y;
        }
        a48 /= this._currentZoom;
        n91 /= this._currentZoom;
        this.moveBy(a48, n91, e78);
        this._lastPosition = o42;
        this._lastScrollValues = i45;
      }
    } }, { key: "on", value: function t61(e78, i45) {
      if (this.listeners[e78]) {
        this.listeners[e78].push(i45);
      }
    } }, { key: "off", value: function t61(e78, i45) {
      if (this.listeners[e78]) {
        var s40 = [];
        for (var r53 = 0; r53 < this.listeners[e78].length; r53++) {
          if (this.listeners[e78][r53] !== i45) {
            s40.push(this.listeners[e78][r53]);
          }
        }
        this.listeners[e78] = s40;
      }
    } }, { key: "_upListener", value: function t61(e78) {
      if (this._downAt) {
        this._downAt = null;
        this.eventManager.off(document, m10, this.moveListener);
        this.eventManager.off(document, u11, this.upListener);
        this.unmark(e78);
        this.stop(e78);
        this._moving = false;
        if (this.clone) {
          this._dragEl && this._dragEl.parentNode && this._dragEl.parentNode.removeChild(this._dragEl);
          this._dragEl = null;
        } else {
          if (this._activeSelectorParams && this._activeSelectorParams.revertFunction) {
            if (this._activeSelectorParams.revertFunction(this._dragEl, this.manager.getPosition(this._dragEl)) === true) {
              this.manager.setPosition(this._dragEl, this._posAtDown);
              this._dispatch(w6, this._dragEl);
            }
          }
        }
      }
    } }, { key: "_downListener", value: function t61(e78) {
      if (e78.defaultPrevented) {
        return;
      }
      var i45 = this.rightButtonCanDrag || e78.which !== 3 && e78.button !== 2;
      if (i45 && this.isEnabled() && this._canDrag()) {
        var s40 = this._testFilter(e78) && O14(e78, this.el, this.manager);
        if (s40) {
          this._activeSelectorParams = null;
          this._elementToDrag = null;
          if (this._availableSelectors.length === 0) {
            Q("JSPLUMB: no available drag selectors");
          }
          var r53 = e78.target || e78.srcElement;
          var o42 = E8(this._availableSelectors, this.el, r53);
          if (o42 != null) {
            this._activeSelectorParams = o42[0];
            this._elementToDrag = o42[1];
          }
          if (this._activeSelectorParams == null || this._elementToDrag == null) {
            return;
          }
          var n91 = this._activeSelectorParams.dragInit ? this._activeSelectorParams.dragInit(this._elementToDrag, e78) : null;
          if (n91 === false) {
            return;
          }
          if (n91 != null) {
            this._elementToDrag = n91;
          }
          var c47 = 1;
          if (this.clone) {
            this._elementToDrag.getBoundingClientRect();
            this._dragEl = this._elementToDrag.cloneNode(true);
            h5(this._dragEl, B10.clonedDrag);
            this._dragEl.setAttribute("id", null);
            this._dragEl.style.position = "absolute";
            if (this._parent != null) {
              var _18 = this.manager.getPosition(this.el);
              this._dragEl.style.left = _18.x + "px";
              this._dragEl.style.top = _18.y + "px";
              this._parent.appendChild(this._dragEl);
            } else {
              var g31 = S3(this._elementToDrag, true);
              var f45 = this._elementToDrag.getBoundingClientRect();
              this._dragEl.style.left = "".concat(g31.x, "px");
              this._dragEl.style.top = "".concat(g31.y, "px");
              var p49 = this.cloneSize == null ? f45.width : this.cloneSize.w;
              var y35 = this.cloneSize == null ? f45.height : this.cloneSize.h;
              this._dragEl.style.width = "".concat(p49, "px");
              this._dragEl.style.height = "".concat(y35, "px");
              document.body.appendChild(this._dragEl);
              if (this._getTargetScale && !this._ignoreZoom) {
                c47 = this._getTargetScale();
                if (c47 !== 1) {
                  this._dragEl.style.transform = "scale(".concat(c47, ")");
                  this._dragEl.style.transformOrigin = "0 0";
                }
              }
            }
          } else {
            this._dragEl = this._elementToDrag;
          }
          if (this.consumeStartEvent) {
            i5(e78);
          }
          this._downAt = q4(e78);
          this._currentZoom = this.manager._getEffectiveZoom();
          if (this._dragEl && this._dragEl.parentNode) {
            this._initialScroll = { x: this._dragEl.parentNode.scrollLeft, y: this._dragEl.parentNode.scrollTop };
          }
          this._posAtDown = this.manager.getPosition(this._dragEl);
          this._pagePosAtDown = S3(this._dragEl);
          this._pageDelta = { x: this._pagePosAtDown.x - this._posAtDown.x, y: this._pagePosAtDown.y - this._posAtDown.y };
          this._size = this.manager.getSize(this._dragEl);
          this._size.w = this._size.w * c47;
          this._size.h = this._size.h * c47;
          this.eventManager.on(document, m10, this.moveListener);
          this.eventManager.on(document, u11, this.upListener);
          this._dispatch(w15, { el: this.el, pos: this._posAtDown, e: e78, drag: this, size: this._size });
        } else if (this._consumeFilteredEvents) {
          i5(e78);
        }
      }
    } }, { key: "_moveListener", value: function t61(e78) {
      if (this._downAt) {
        if (!this._moving) {
          var i45 = this._dispatch(k16, { el: this.el, pos: this._posAtDown, e: e78, drag: this, size: this._size });
          if (i45 !== false) {
            if (!this._downAt) {
              return;
            }
            this.mark(i45);
            this._moving = true;
          } else {
            this.abort();
          }
        }
        if (this._downAt) {
          var s40 = q4(e78), r53 = s40.x - this._downAt.x, o42 = s40.y - this._downAt.y;
          this._lastPosition = { x: s40.x, y: s40.y };
          this._lastScrollValues = { x: document.documentElement.scrollLeft, y: document.documentElement.scrollTop };
          if (this._dragEl && this._dragEl.parentNode) {
            r53 += this._dragEl.parentNode.scrollLeft - this._initialScroll.x;
            o42 += this._dragEl.parentNode.scrollTop - this._initialScroll.y;
          }
          r53 /= this._currentZoom;
          o42 /= this._currentZoom;
          this.moveBy(r53, o42, e78);
        }
      }
    } }, { key: "getDragDelta", value: function t61() {
      if (this._posAtDown != null && this._downAt != null) {
        return { x: this._downAt.x - this._posAtDown.x, y: this._downAt.y - this._posAtDown.y };
      } else {
        return { x: 0, y: 0 };
      }
    } }, { key: "canvasPanned", value: function t61(e78) {
      this._canvasShift.x -= e78.x;
      this._canvasShift.y -= e78.y;
      this.moveBy(this._currentDeltas.x, this._currentDeltas.y);
    } }, { key: "mark", value: function t61(e78) {
      this._canvasShift = { x: 0, y: 0 };
      this._posAtDown = this.manager.getPosition(this._dragEl);
      this._currentDeltas = { x: 0, y: 0 };
      this._pagePosAtDown = S3(this._dragEl);
      this._pageDelta = { x: this._pagePosAtDown.x - this._posAtDown.x, y: this._pagePosAtDown.y - this._posAtDown.y };
      this._size = this.manager.getSize(this._dragEl);
      h5(this._dragEl, this.manager.css.drag);
      this._constrainRect = this.manager.getParentConstrainingRectangle(this._dragEl);
      this._ghostDx = 0;
      this._ghostDy = 0;
    } }, { key: "unmark", value: function t61(e78) {
      if (this._isConstrained && this._useGhostProxy(this._elementToDrag, this._dragEl)) {
        this._ghostProxyOffsets = { x: this._dragEl.offsetLeft - this._ghostDx, y: this._dragEl.offsetTop - this._ghostDy };
        this._dragEl.parentNode.removeChild(this._dragEl);
        this._dragEl = this._elementToDrag;
      } else {
        this._ghostProxyOffsets = null;
      }
      y3(this._dragEl, this.manager.css.drag);
      this._isConstrained = false;
    } }, { key: "moveBy", value: function t61(e78, i45, s40) {
      var r53 = this.toGrid({ x: this._posAtDown.x + e78 + this._canvasShift.x, y: this._posAtDown.y + i45 + this._canvasShift.y }), o42 = this._doConstrain(r53, this._dragEl, this._constrainRect, this._size, { x: this._posAtDown.x, y: this._posAtDown.y }, s40);
      if (o42 != null) {
        if (this._useGhostProxy(this.el, this._dragEl)) {
          if (r53.x !== o42.x || r53.y !== o42.y) {
            if (!this._isConstrained) {
              var n91 = this._ghostProxyFunction(this._elementToDrag);
              h5(n91, B10.ghostProxy);
              if (this._ghostProxyParent) {
                this._ghostProxyParent.appendChild(n91);
                this._currentParentPosition = S3(this._elementToDrag.parentNode);
                this._ghostParentPosition = S3(this._ghostProxyParent);
                this._ghostDx = this._currentParentPosition.x - this._ghostParentPosition.x;
                this._ghostDy = this._currentParentPosition.y - this._ghostParentPosition.y;
              } else {
                this._elementToDrag.parentNode.appendChild(n91);
              }
              this._dragEl = n91;
              this._isConstrained = true;
            }
            o42 = r53;
          } else {
            if (this._isConstrained) {
              this._dragEl.parentNode.removeChild(this._dragEl);
              this._dragEl = this._elementToDrag;
              this._isConstrained = false;
              this._currentParentPosition = null;
              this._ghostParentPosition = null;
              this._ghostDx = 0;
              this._ghostDy = 0;
            }
          }
        }
        this._currentDeltas.x = o42.x - this._posAtDown.x - this._canvasShift.x;
        this._currentDeltas.y = o42.y - this._posAtDown.y - this._canvasShift.y;
        this.manager.setPosition(this._dragEl, { x: o42.x + this._ghostDx, y: o42.y + this._ghostDy });
        this._dispatch(A12, { el: this.el, pos: o42, e: s40, drag: this, size: this._size, originalPos: this._posAtDown, viewport: this._constrainRect });
      }
    } }, { key: "abort", value: function t61() {
      if (this._downAt != null) {
        this._upListener();
      }
    } }, { key: "getDragElement", value: function t61(e78) {
      return e78 ? this._elementToDrag || this.el : this._dragEl || this.el;
    } }, { key: "stop", value: function t61(e78, i45) {
      if (i45 || this._moving) {
        var s40 = [], r53 = this.manager.getPosition(this._dragEl);
        s40.push([this._dragEl, r53, this, this._size]);
        this._dispatch(L10, { el: this._dragEl, pos: this._ghostProxyOffsets || r53, finalPos: r53, e: e78, drag: this, selection: s40, size: this._size, originalPos: { x: this._posAtDown.x, y: this._posAtDown.y }, viewport: this._constrainRect });
      } else if (!this._moving) {
        this._activeSelectorParams.dragAbort ? this._activeSelectorParams.dragAbort(this._elementToDrag) : null;
      }
    } }, { key: "_dispatch", value: function t61(e78, i45) {
      var s40 = null;
      if (this._activeSelectorParams && this._activeSelectorParams[e78]) {
        s40 = this._activeSelectorParams[e78](i45);
      } else if (this.listeners[e78]) {
        for (var r53 = 0; r53 < this.listeners[e78].length; r53++) {
          try {
            var o42 = this.listeners[e78][r53](i45);
            if (o42 != null) {
              s40 = o42;
            }
          } catch (t62) {
          }
        }
      }
      return s40;
    } }, { key: "resolveGrid", value: function t61() {
      var e78 = { grid: null, thresholdX: N9 / 2, thresholdY: G8 / 2 };
      if (this._activeSelectorParams != null && this._activeSelectorParams.grid != null) {
        e78.grid = this._activeSelectorParams.grid;
        if (this._activeSelectorParams.snapThreshold != null) {
          e78.thresholdX = this._activeSelectorParams.snapThreshold;
          e78.thresholdY = this._activeSelectorParams.snapThreshold;
        }
      }
      return e78;
    } }, { key: "toGrid", value: function t61(e78) {
      var i45 = this.resolveGrid(), s40 = i45.grid, r53 = i45.thresholdX, o42 = i45.thresholdY;
      if (s40 == null) {
        return e78;
      } else {
        var a48 = s40 ? s40.w / 2 : r53, n91 = s40 ? s40.h / 2 : o42;
        return p10(e78, s40, a48, n91);
      }
    } }, { key: "setUseGhostProxy", value: function t61(e78) {
      this._useGhostProxy = e78 ? M11 : Z5;
    } }, { key: "_doConstrain", value: function t61(e78, i45, s40, r53, o42, a48) {
      if (this._activeSelectorParams != null && this._activeSelectorParams.constrainFunction && typeof this._activeSelectorParams.constrainFunction === "function") {
        return this._activeSelectorParams.constrainFunction(e78, i45, s40, r53, o42, a48);
      } else {
        return e78;
      }
    } }, { key: "_testFilter", value: function t61(e78) {
      for (var i45 in this._filters) {
        var s40 = this._filters[i45];
        var r53 = s40[0](e78);
        if (s40[1]) {
          r53 = !r53;
        }
        if (!r53) {
          return false;
        }
      }
      return true;
    } }, { key: "addFilter", value: function t61(e78, i45) {
      var s40 = this;
      if (e78) {
        var r53 = D11(e78);
        this._filters[r53] = [function(t62) {
          var i46 = t62.srcElement || t62.target;
          var r54;
          if (l2(e78)) {
            r54 = s4(i46, e78, s40.el);
          } else if (typeof e78 === "function") {
            r54 = e78(t62, s40.el);
          }
          return r54;
        }, i45 !== false];
      }
    } }, { key: "removeFilter", value: function t61(e78) {
      var i45 = typeof e78 === "function" ? e78._katavorioId : e78;
      delete this._filters[i45];
    } }, { key: "clearAllFilters", value: function t61() {
      this._filters = {};
    } }, { key: "addSelector", value: function t61(e78, i45) {
      if (e78.selector) {
        if (i45) {
          this._availableSelectors.unshift(e78);
        } else {
          this._availableSelectors.push(e78);
        }
      }
    } }, { key: "destroy", value: function t61() {
      this.eventManager.off(this.el, t4, this.downListener);
      this.eventManager.off(document, m10, this.moveListener);
      this.eventManager.off(document, u11, this.upListener);
      this.downListener = null;
      this.upListener = null;
      this.moveListener = null;
      if (this.scrollTracker != null) {
        document.removeEventListener("scroll", this.scrollTracker);
      }
    } }]);
    return P18;
  }(V10);
  var H6 = ["input", "textarea", "select", "button", "option"];
  var J5 = H6.join(",");
  var q7 = function() {
    function t61(e78) {
      t(this, t61);
      o(this, "eventManager", void 0);
      o(this, "zoom", 1);
      o(this, "css", {});
      o(this, "inputFilterSelector", void 0);
      o(this, "getPosition", void 0);
      o(this, "getSize", void 0);
      o(this, "setPosition", void 0);
      o(this, "getCompoundZoom", void 0);
      this.inputFilterSelector = e78.inputFilterSelector || J5;
      this.eventManager = new oe();
      this.zoom = e78.zoom || 1;
      this.getCompoundZoom = e78.getCompoundZoom || function() {
        return 1;
      };
      this.getPosition = e78.getPosition;
      this.getSize = e78.getSize;
      this.setPosition = e78.setPosition;
      var r53 = e78.css || {};
      u2(this.css, r53);
    }
    n(t61, [{ key: "_getEffectiveZoom", value: function t62() {
      return this.zoom * this.getCompoundZoom();
    } }, { key: "getParentConstrainingRectangle", value: function t62(e78) {
      var i45 = e78.parentNode;
      if (i45 == null) {
        return { w: 0, h: 0 };
      } else {
        var s40 = i45.scrollLeft != null ? i45.scrollLeft : 0;
        var r53 = i45.scrollTop != null ? i45.scrollTop : 0;
        var o42 = this.getSize(i45);
        return { w: o42.w + s40, h: o42.h + r53 };
      }
    } }, { key: "_prepareParams", value: function t62(e78) {
      e78 = e78 || {};
      var i45 = { events: {} }, s40;
      for (s40 in e78) {
        i45[s40] = e78[s40];
      }
      for (s40 = 0; s40 < I11.length; s40++) {
        i45.events[I11[s40]] = e78[I11[s40]] || R9;
      }
      return i45;
    } }, { key: "getInputFilterSelector", value: function t62() {
      return this.inputFilterSelector;
    } }, { key: "setInputFilterSelector", value: function t62(e78) {
      this.inputFilterSelector = e78;
      return this;
    } }, { key: "draggable", value: function t62(e78, i45) {
      if (e78._katavorioDrag == null) {
        var s40 = this._prepareParams(i45);
        var r53 = new U6(e78, s40, this);
        h5(e78, B10.delegatedDraggable);
        e78._katavorioDrag = r53;
        return r53;
      } else {
        return e78._katavorioDrag;
      }
    } }, { key: "destroyDraggable", value: function t62(e78) {
      if (e78._katavorioDrag) {
        e78._katavorioDrag.destroy();
        delete e78._katavorioDrag;
      }
    } }]);
    return t61;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/browser-ui-renderer/drag-selection.js
  var o24 = "jtk-drag-selected";
  var l22 = function() {
    function l48(e78) {
      t(this, l48);
      this.instance = e78;
      o(this, "_dragSelection", []);
      o(this, "_dragSizes", /* @__PURE__ */ new Map());
      o(this, "_dragElements", /* @__PURE__ */ new Map());
      o(this, "_dragElementStartPositions", /* @__PURE__ */ new Map());
      o(this, "_dragElementPositions", /* @__PURE__ */ new Map());
      o(this, "__activeSet", void 0);
    }
    n(l48, [{ key: "_activeSet", get: function e78() {
      if (this.__activeSet == null) {
        return this._dragSelection;
      } else {
        return this.__activeSet;
      }
    } }, { key: "length", get: function e78() {
      return this._dragSelection.length;
    } }, { key: "filterActiveSet", value: function e78(t61) {
      var i45 = this;
      this.__activeSet = [];
      j2(this._dragSelection, function(e79) {
        if (t61(e79)) {
          i45.__activeSet.push(e79);
        }
      });
    } }, { key: "clear", value: function e78() {
      var t61 = this;
      this.reset();
      j2(this._dragSelection, function(e79) {
        return t61.instance.removeClass(e79.jel, o24);
      });
      this._dragSelection.length = 0;
    } }, { key: "reset", value: function e78() {
      this._dragElementStartPositions.clear();
      this._dragElementPositions.clear();
      this._dragSizes.clear();
      this._dragElements.clear();
      this.__activeSet = null;
    } }, { key: "initialisePositions", value: function e78() {
      var t61 = this;
      j2(this._activeSet, function(e79) {
        var i45 = t61.instance.viewport.getPosition(e79.id);
        var a48 = { x: parseInt("" + e79.jel.offsetLeft, 10), y: parseInt("" + e79.jel.offsetTop, 10) };
        t61._dragElementStartPositions.set(e79.id, a48);
        t61._dragElementPositions.set(e79.id, a48);
        t61._dragSizes.set(e79.id, { w: i45.w, h: i45.h });
      });
    } }, { key: "updatePositions", value: function e78(t61, i45, n91) {
      var r53 = this;
      var o42 = t61.x - i45.x, l49 = t61.y - i45.y;
      j2(this._activeSet, function(e79) {
        var t62 = r53._dragElementStartPositions.get(e79.id);
        if (t62) {
          var i46 = t62.x + o42, a48 = t62.y + l49;
          var c47 = r53._dragSizes.get(e79.id);
          var h35 = { x: i46, y: a48, w: c47.w, h: c47.h };
          if (e79.jel._jsPlumbParentGroup && e79.jel._jsPlumbParentGroup.constrain) {
            var d32 = { w: e79.jel.parentNode.offsetWidth + e79.jel.parentNode.scrollLeft, h: e79.jel.parentNode.offsetHeight + e79.jel.parentNode.scrollTop };
            h35.x = Math.max(h35.x, 0);
            h35.y = Math.max(h35.y, 0);
            h35.x = Math.min(h35.x, d32.w - c47.w);
            h35.y = Math.min(h35.y, d32.h - c47.h);
          }
          r53._dragElementPositions.set(e79.id, { x: i46, y: a48 });
          i7(e79.jel, h35);
          n91(e79.jel, e79.id, c47, h35, t62);
        }
      });
    } }, { key: "each", value: function e78(t61) {
      var i45 = this;
      j2(this._activeSet, function(e79) {
        var a48 = i45._dragSizes.get(e79.id);
        var n91 = i45._dragElementPositions.get(e79.id);
        var r53 = i45._dragElementStartPositions.get(e79.id);
        t61(e79.jel, e79.id, n91, a48, r53);
      });
    } }, { key: "add", value: function e78(t61, i45) {
      var a48 = t61;
      i45 = i45 || this.instance.getId(a48);
      var s40 = O2(this._dragSelection, function(e79) {
        return e79.id === i45;
      });
      if (s40 === -1) {
        h5(t61, o24);
        this._dragSelection.push({ id: i45, jel: a48 });
      }
    } }, { key: "remove", value: function e78(t61) {
      var i45 = this;
      var a48 = t61;
      this._dragSelection = this._dragSelection.filter(function(e79) {
        var t62 = e79.jel !== a48;
        if (!t62) {
          i45.instance.removeClass(e79.jel, o24);
        }
        return t62;
      });
    } }, { key: "toggle", value: function e78(t61) {
      var i45 = t61;
      var a48 = O2(this._dragSelection, function(e79) {
        return e79.jel === i45;
      });
      if (a48 !== -1) {
        this.remove(i45);
      } else {
        this.add(t61);
      }
    } }]);
    return l48;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/browser-ui-renderer/drag-manager.js
  var u31 = "jtk-delegated-draggable";
  var h23 = "jtk-draggable";
  var g19 = "jtk-drag";
  var f24 = "jtk-ghost-proxy";
  var v25 = "jtk-drag-active";
  var m25 = "jtk-dragged";
  var k17 = "jtk-drag-hover";
  var p25 = "jtk-drag-original-group";
  var y18 = function() {
    function m44(t61, n91, a48) {
      var s40 = this;
      t(this, m44);
      this.instance = t61;
      this.dragSelection = n91;
      o(this, "collicat", void 0);
      o(this, "drag", void 0);
      o(this, "_draggables", {});
      o(this, "_dlist", []);
      o(this, "_elementsWithEndpoints", {});
      o(this, "_draggablesForElements", {});
      o(this, "handlers", []);
      o(this, "_trackScroll", void 0);
      o(this, "_filtersToAdd", []);
      a48 = a48 || {};
      this.collicat = new q7({ getCompoundZoom: a48.getCompoundZoom, zoom: this.instance.currentZoom, getPosition: function t62(r53) {
        return s40.instance.getPosition(r53);
      }, setPosition: function t62(r53, e78) {
        return s40.instance.setPosition(r53, e78);
      }, getSize: function t62(r53) {
        return s40.instance.getSize(r53);
      }, css: { noSelect: this.instance.dragSelectClass, delegatedDraggable: u31, draggable: h23, drag: g19, selected: o24, active: v25, hover: k17, ghostProxy: f24 } });
      this._trackScroll = a48.trackScroll !== false;
    }
    n(m44, [{ key: "setZoom", value: function t61(r53) {
      this.collicat.zoom = r53;
    } }, { key: "addHandler", value: function t61(r53, e78) {
      var i45 = this;
      var o42 = u2({ selector: r53.selector }, e78 || {});
      o42.start = U(o42.start, function(t62) {
        return r53.onStart(t62);
      }, false);
      o42.drag = U(o42.drag, function(t62) {
        return r53.onDrag(t62);
      });
      o42.stop = U(o42.stop, function(t62) {
        return r53.onStop(t62);
      });
      var c47 = (r53.onBeforeStart || function(t62) {
      }).bind(r53);
      o42.beforeStart = U(o42.beforeStart, function(t62) {
        return c47(t62);
      });
      o42.dragInit = function(t62, e79) {
        return r53.onDragInit(t62, e79);
      };
      o42.dragAbort = function(t62) {
        return r53.onDragAbort(t62);
      };
      if (r53.useGhostProxy) {
        o42.useGhostProxy = r53.useGhostProxy;
        o42.makeGhostProxy = r53.makeGhostProxy;
      }
      if (o42.constrainFunction == null && o42.containment != null) {
        o42.constrainFunction = Y7(o42.containment, o42.containmentPadding);
      }
      if (this.drag == null) {
        o42.trackScroll = this._trackScroll;
        this.drag = this.collicat.draggable(this.instance.getContainer(), o42);
        j2(this._filtersToAdd, function(t62) {
          return i45.drag.addFilter(t62[0], t62[1]);
        });
        this.drag.on(w6, function(t62) {
          i45.instance.revalidate(t62);
        });
      } else {
        this.drag.addSelector(o42);
      }
      this.handlers.push({ handler: r53, options: o42 });
      r53.init(this.drag);
    } }, { key: "addSelector", value: function t61(r53, e78) {
      this.drag && this.drag.addSelector(r53, e78);
    } }, { key: "addFilter", value: function t61(r53, e78) {
      if (this.drag == null) {
        this._filtersToAdd.push([r53, e78 === true]);
      } else {
        this.drag.addFilter(r53, e78);
      }
    } }, { key: "removeFilter", value: function t61(r53) {
      if (this.drag != null) {
        this.drag.removeFilter(r53);
      }
    } }, { key: "setFilters", value: function t61(r53) {
      var e78 = this;
      j2(r53, function(t62) {
        e78.drag.addFilter(t62[0], t62[1]);
      });
    } }, { key: "reset", value: function t61() {
      var r53 = [];
      j2(this.handlers, function(t62) {
        t62.handler.reset();
      });
      this.handlers.length = 0;
      if (this.drag != null) {
        var e78 = this.drag._filters;
        for (var n91 in e78) {
          r53.push([n91, e78[n91][1]]);
        }
        this.collicat.destroyDraggable(this.instance.getContainer());
      }
      delete this.drag;
      return r53;
    } }, { key: "setOption", value: function t61(r53, e78) {
      var n91 = S2(this.handlers, function(t62) {
        return t62.handler === r53;
      });
      if (n91 != null) {
        u2(n91.options, e78 || {});
      }
    } }, { key: "canvasPanned", value: function t61(r53) {
      this.drag.canvasPanned(r53);
    } }]);
    return m44;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/browser-ui-renderer/element-drag-handler.js
  function x15(r53, e78) {
    if (l2(e78)) {
      return { id: e78, active: true };
    } else {
      return { id: e78.id, active: e78.active };
    }
  }
  function b17(r53, e78) {
    var t61 = P(r53.members, function(r54) {
      return r54.el === e78;
    });
    if (t61 !== null) {
      return t61.active === true;
    } else {
      return false;
    }
  }
  function j17(r53) {
    var e78 = [];
    var t61 = r53._jsPlumbParentGroup;
    while (t61 != null) {
      e78.push(t61.el);
      t61 = t61.uiGroup;
    }
    return e78;
  }
  var I12 = function() {
    function c47(r53, n91, i45) {
      t(this, c47);
      this.instance = r53;
      this._dragSelection = n91;
      o(this, "selector", "> " + y4 + ":not(" + a5(c28) + ")");
      o(this, "_dragOffset", null);
      o(this, "_groupLocations", []);
      o(this, "_intersectingGroups", []);
      o(this, "_currentDragParentGroup", null);
      o(this, "_dragGroupByElementIdMap", {});
      o(this, "_dragGroupMap", {});
      o(this, "_currentDragGroup", null);
      o(this, "_currentDragGroupOffsets", /* @__PURE__ */ new Map());
      o(this, "_currentDragGroupSizes", /* @__PURE__ */ new Map());
      o(this, "_currentDragGroupOriginalPositions", /* @__PURE__ */ new Map());
      o(this, "_dragPayload", null);
      o(this, "drag", void 0);
      o(this, "originalPosition", void 0);
      o(this, "_onDragInit", void 0);
      this._onDragInit = i45;
    }
    n(c47, [{ key: "onDragInit", value: function r53(e78) {
      if (this._onDragInit == null) {
        return null;
      } else {
        return this._onDragInit(e78);
      }
    } }, { key: "onDragAbort", value: function r53(e78) {
      return null;
    } }, { key: "getDropGroup", value: function r53() {
      var e78 = null;
      if (this._intersectingGroups.length > 0) {
        var t61 = this._intersectingGroups[0].groupLoc.group;
        var n91 = this._intersectingGroups[0].intersectingElement;
        var i45 = n91._jsPlumbParentGroup;
        if (i45 !== t61) {
          if (i45 == null || !i45.overrideDrop(n91, t61)) {
            e78 = this._intersectingGroups[0];
          }
        }
      }
      return e78;
    } }, { key: "onStop", value: function r53(e78) {
      var t61, i45 = this;
      var a48 = e78.drag.getDragElement();
      var o42 = this.getDropGroup();
      var u52 = [];
      u52.push({ el: a48, id: this.instance.getId(a48), pos: e78.finalPos, originalGroup: a48._jsPlumbParentGroup, redrawResult: null, originalPos: e78.originalPos, reverted: false, dropGroup: o42 != null ? o42.groupLoc.group : null });
      function l48(r54, e79, t62, n91, i46) {
        var a49 = t62.x, s40 = t62.y;
        if (r54._jsPlumbParentGroup && r54._jsPlumbParentGroup.constrain) {
          var l49 = { w: r54.parentNode.offsetWidth + r54.parentNode.scrollLeft, h: r54.parentNode.offsetHeight + r54.parentNode.scrollTop };
          a49 = Math.max(a49, 0);
          s40 = Math.max(s40, 0);
          a49 = Math.min(a49, l49.w - n91.w);
          s40 = Math.min(s40, l49.h - n91.h);
          t62.x = a49;
          t62.y = s40;
        }
        u52.push({ el: r54, id: e79, pos: t62, originalPos: i46, originalGroup: r54._jsPlumbParentGroup, redrawResult: null, reverted: false, dropGroup: o42 === null || o42 === void 0 ? void 0 : o42.groupLoc.group });
      }
      this._dragSelection.each(function(r54, t62, n91, i46, a49) {
        if (r54 !== e78.el) {
          l48(r54, t62, { x: n91.x, y: n91.y }, i46, a49);
        }
      });
      (t61 = this._currentDragGroup) === null || t61 === void 0 ? void 0 : t61.members.forEach(function(r54) {
        if (r54.el !== e78.el) {
          var t62 = i45._currentDragGroupOffsets.get(r54.elId);
          var n91 = i45._currentDragGroupSizes.get(r54.elId);
          var a49 = { x: e78.finalPos.x + t62[0].x, y: e78.finalPos.y + t62[0].y };
          l48(r54.el, r54.elId, a49, n91, i45._currentDragGroupOriginalPositions.get(r54.elId));
        }
      });
      j2(u52, function(r54) {
        var t62 = { x: 0, y: 0 }, a49 = r54.originalGroup != null, s40 = a49 && r54.originalGroup.elastic === true, u53 = e78.e.shiftKey === true, l49 = a49 && i45.instance.isInsideParent(r54.el, r54.pos), p49 = !l49 && s40 && u53, g32 = l49 || s40 && !u53;
        if (a49 && !g32) {
          if (o42 == null) {
            var c49 = i45._pruneOrOrphan(r54, true, true, p49);
            if (c49.pos != null) {
              r54.pos = c49.pos.pos;
            } else {
              if (!c49.pruned && r54.originalGroup.revert) {
                r54.pos = r54.originalPos;
                r54.reverted = true;
              }
            }
          }
        } else if (a49 && g32) {
          t62 = i45._computeOffsetByParentGroup(r54.originalGroup);
        }
        if (o42 != null && !g32) {
          i45.instance.groupManager.addToGroup(o42.groupLoc.group, false, r54.el);
        } else {
          r54.dropGroup = null;
        }
        if (r54.reverted) {
          i7(r54.el, r54.pos);
        }
        r54.redrawResult = i45.instance.setElementPosition(r54.el, r54.pos.x + t62.x, r54.pos.y + t62.y);
        y3(r54.el, m25);
        i45.instance.select({ source: r54.el }).removeClass(i45.instance.elementDraggingClass + " " + i45.instance.sourceElementDraggingClass, true);
        i45.instance.select({ target: r54.el }).removeClass(i45.instance.elementDraggingClass + " " + i45.instance.targetElementDraggingClass, true);
      });
      if (u52[0].originalGroup != null) {
        var g31 = a48._jsPlumbParentGroup;
        if (g31 !== u52[0].originalGroup) {
          var c48 = e78.drag.getDragElement(true);
          if (u52[0].originalGroup.ghost) {
            var f45 = a7(g31.contentArea);
            var d32 = a7(u52[0].originalGroup.contentArea);
            var h35 = { x: d32.x + e78.pos.x - f45.x, y: d32.y + e78.pos.y - f45.y };
            c48.style.left = h35.x + "px";
            c48.style.top = h35.y + "px";
            this.instance.revalidate(c48);
          }
        }
      }
      this.instance.fire(k4, { elements: u52, e: e78.e, el: a48, payload: this._dragPayload });
      this._cleanup();
    } }, { key: "_cleanup", value: function r53() {
      j2(this._groupLocations, function(r54) {
        y3(r54.el, v25);
        y3(r54.el, k17);
        y3(r54.el, p25);
      });
      this._currentDragParentGroup = null;
      this._groupLocations.length = 0;
      this.instance.hoverSuspended = false;
      this._dragOffset = null;
      this._dragSelection.reset();
      this._dragPayload = null;
      this._currentDragGroupOffsets.clear();
      this._currentDragGroupSizes.clear();
      this._currentDragGroupOriginalPositions.clear();
      this._currentDragGroup = null;
    } }, { key: "reset", value: function r53() {
    } }, { key: "init", value: function r53(e78) {
      this.drag = e78;
    } }, { key: "onDrag", value: function r53(e78) {
      var t61 = this;
      var n91 = e78.drag.getDragElement();
      var i45 = this.instance.getId(n91);
      var o42 = e78.pos;
      var s40 = this.instance.viewport.getPosition(i45);
      var l48 = { x: o42.x, y: o42.y };
      this._intersectingGroups.length = 0;
      if (this._dragOffset != null) {
        l48.x += this._dragOffset.x;
        l48.y += this._dragOffset.y;
      }
      var g31 = [];
      var c48 = function r54(n92, i46, o43, s41) {
        if (o43) {
          var u52 = /* @__PURE__ */ new Set();
          j2(t61._groupLocations, function(r55) {
            if (!u52.has(r55.group.id) && i9(i46, r55.r)) {
              h5(r55.el, k17);
              t61._intersectingGroups.push({ groupLoc: r55, intersectingElement: e78.drag.getDragElement(true), d: 0 });
              t61.instance.toolkit.graph.getAncestors(r55.group.group).forEach(function(r56) {
                return u52.add(r56.id);
              });
            } else {
              y3(r55.el, k17);
            }
          });
        }
        t61.instance.setElementPosition(n92, i46.x, i46.y, true);
        g31.push({ el: n92, bounds: i46, originalPosition: s41 });
      };
      var f45 = { x: l48.x, y: l48.y, w: s40.w, h: s40.h };
      c48(n91, f45, true, this.originalPosition);
      this._dragSelection.updatePositions(o42, this.originalPosition, function(r54, e79, t62, n92, i46) {
        c48(r54, n92, false, i46);
      });
      this._currentDragGroupOffsets.forEach(function(r54, e79) {
        var n92 = t61._currentDragGroupSizes.get(e79);
        var i46 = { x: f45.x + r54[0].x, y: f45.y + r54[0].y, w: n92.w, h: n92.h };
        r54[1].style.left = i46.x + "px";
        r54[1].style.top = i46.y + "px";
        c48(r54[1], i46, false, r54[0]);
      });
      g31.forEach(function(r54) {
        t61.instance.repaint(r54.el);
        t61.instance.fire(g8, { el: r54.el, e: e78.e, pos: { x: r54.bounds.x - (t61._dragOffset != null ? t61._dragOffset.x : 0), y: r54.bounds.y - (t61._dragOffset != null ? t61._dragOffset.y : 0) }, originalPosition: r54.originalPosition, payload: t61._dragPayload });
      });
    } }, { key: "_computeOffsetByParentGroup", value: function r53(e78) {
      var t61 = a7(e78.el);
      var n91 = e78.contentArea;
      if (n91 !== e78.el) {
        var i45 = a7(n91);
        t61.x += i45.x;
        t61.y += i45.y;
      }
      if (e78.el._jsPlumbParentGroup) {
        var a48 = this._computeOffsetByParentGroup(e78.el._jsPlumbParentGroup);
        t61.x += a48.x;
        t61.y += a48.y;
      }
      return t61;
    } }, { key: "onStart", value: function r53(e78) {
      var t61 = this;
      var n91 = e78.drag.getDragElement();
      var a48 = a7(n91);
      this.originalPosition = { x: e78.pos.x, y: e78.pos.y };
      var s40 = true;
      var u52 = n91.getAttribute(h6);
      if (this.instance.elementsDraggable === false || u52 != null && u52 !== v9) {
        s40 = false;
      }
      if (n91._jsPlumbParentGroup) {
        if (n91._jsPlumbParentGroup.elementsDraggable === false) {
          s40 = false;
        } else {
          this._dragOffset = this._computeOffsetByParentGroup(n91._jsPlumbParentGroup);
          this._currentDragParentGroup = n91._jsPlumbParentGroup;
        }
      }
      if (s40) {
        this._groupLocations.length = 0;
        this._intersectingGroups.length = 0;
        this.instance.hoverSuspended = true;
        var g31 = e78.drag.getDragElement(true), c48 = g31.querySelectorAll(y4), d32 = j17(g31), v41 = [];
        Array.prototype.push.apply(v41, c48);
        Array.prototype.push.apply(v41, d32);
        this._dragSelection.filterActiveSet(function(r54) {
          return v41.indexOf(r54.jel) === -1;
        });
        this._dragSelection.initialisePositions();
        var _17 = function r54(n92, a49, s41) {
          if (!n92._isJsPlumbGroup || t61.instance.allowNestedGroups) {
            var u53 = !n92._jsPlumbParentGroup;
            var g32 = !u53 && n92._jsPlumbParentGroup.elastic === true && e78.e.shiftKey !== true;
            var c49 = u53 || n92._jsPlumbParentGroup.dropOverride !== true;
            var f45 = !u53 && (n92._jsPlumbParentGroup.ghost || n92._jsPlumbParentGroup.constrain !== true);
            if (u53 || c49 && f45 && !g32) {
              j2(t61.instance.groupManager.getGroups(), function(r55) {
                var e79 = n92._jsPlumbGroup;
                if (r55.droppable !== false && r55.enabled !== false && n92._jsPlumbGroup !== r55 && !t61.instance.groupManager.isDescendant(r55, e79)) {
                  var a50 = r55.el, s42 = t61.instance.getId(a50), u54 = t61.instance.viewport.getPosition(s42), l48 = { x: u54.x, y: u54.y, w: u54.w, h: u54.h };
                  var p49 = { el: a50, r: l48, group: r55 };
                  t61._groupLocations.push(p49);
                  h5(a50, v25);
                  if (r55 === t61._currentDragParentGroup) {
                    h5(a50, p25);
                  }
                }
              });
              var d33 = function r55(e79) {
                var t62 = 1, n93 = e79.group;
                while (n93 != null) {
                  t62++;
                  n93 = n93.group;
                }
                return t62;
              };
              t61._groupLocations.sort(function(r55, e79) {
                return d33(e79.group.group) - d33(r55.group.group);
              });
            }
          }
          t61.instance.select({ source: n92 }).addClass(t61.instance.elementDraggingClass + " " + t61.instance.sourceElementDraggingClass, true);
          t61.instance.select({ target: n92 }).addClass(t61.instance.elementDraggingClass + " " + t61.instance.targetElementDraggingClass, true);
          return t61.instance.fire(x5, { el: n92, e: e78.e, originalPosition: t61.originalPosition, pos: t61.originalPosition, dragGroup: a49, dragGroupMemberSpec: s41 });
        };
        var y34 = this.instance.getId(n91);
        this._currentDragGroup = this._dragGroupByElementIdMap[y34];
        if (this._currentDragGroup && !b17(this._currentDragGroup, n91)) {
          this._currentDragGroup = null;
        }
        var D18 = _17(n91);
        if (D18 === false) {
          this._cleanup();
          return false;
        } else {
          this._dragPayload = D18;
        }
        if (this._currentDragGroup != null) {
          this._currentDragGroupOffsets.clear();
          this._currentDragGroupSizes.clear();
          this._currentDragGroup.members.forEach(function(r54) {
            var e79 = t61.instance.viewport.getPosition(r54.elId);
            if (v41.indexOf(r54.el) === -1) {
              t61._currentDragGroupOffsets.set(r54.elId, [{ x: e79.x - a48.x, y: e79.y - a48.y }, r54.el]);
              t61._currentDragGroupSizes.set(r54.elId, e79);
              t61._currentDragGroupOriginalPositions.set(r54.elId, { x: e79.x, y: e79.y });
              _17(r54.el, t61._currentDragGroup, r54);
            }
          });
        }
      }
      return s40;
    } }, { key: "addToDragGroup", value: function r53(e78) {
      var t61 = this;
      var n91 = x15(this.instance, e78);
      var i45 = this._dragGroupMap[n91.id];
      if (i45 == null) {
        i45 = { id: n91.id, members: /* @__PURE__ */ new Set() };
        this._dragGroupMap[n91.id] = i45;
      }
      for (var a48 = arguments.length, o42 = new Array(a48 > 1 ? a48 - 1 : 0), s40 = 1; s40 < a48; s40++) {
        o42[s40 - 1] = arguments[s40];
      }
      this.removeFromDragGroup.apply(this, o42);
      j2(o42, function(r54) {
        var e79 = t61.instance.getId(r54);
        i45.members.add({ elId: e79, el: r54, active: n91.active });
        t61._dragGroupByElementIdMap[e79] = i45;
      });
    } }, { key: "removeFromDragGroup", value: function r53() {
      var e78 = this;
      for (var t61 = arguments.length, n91 = new Array(t61), i45 = 0; i45 < t61; i45++) {
        n91[i45] = arguments[i45];
      }
      j2(n91, function(r54) {
        var t62 = e78.instance.getId(r54);
        var n92 = e78._dragGroupByElementIdMap[t62];
        if (n92 != null) {
          var i46 = /* @__PURE__ */ new Set();
          n92.members.forEach(function(e79) {
            if (e79.el !== r54) {
              i46.add(e79);
            }
          });
          n92.members = i46;
          delete e78._dragGroupByElementIdMap[t62];
        }
      });
    } }, { key: "setDragGroupState", value: function r53(e78) {
      var t61 = this;
      for (var n91 = arguments.length, i45 = new Array(n91 > 1 ? n91 - 1 : 0), a48 = 1; a48 < n91; a48++) {
        i45[a48 - 1] = arguments[a48];
      }
      var o42 = i45.map(function(r54) {
        return t61.instance.getId(r54);
      });
      j2(o42, function(r54) {
        var n92 = t61._dragGroupByElementIdMap[r54];
        if (n92 != null) {
          var i46 = P(n92.members, function(e79) {
            return e79.elId === r54;
          });
          if (i46 != null) {
            i46.active = e78;
          }
        }
      });
    } }, { key: "clearDragGroup", value: function r53(e78) {
      var t61 = this;
      var n91 = this._dragGroupMap[e78];
      if (n91 != null) {
        n91.members.forEach(function(r54) {
          delete t61._dragGroupByElementIdMap[r54.elId];
        });
        n91.members.clear();
      }
    } }, { key: "_pruneOrOrphan", value: function r53(e78, t61, n91, i45) {
      var a48 = e78.el;
      var o42 = { pruned: false, pos: null };
      if (n91 || !this.instance.isInsideParent(a48, e78.pos)) {
        var s40 = a48._jsPlumbParentGroup;
        if (s40.prune) {
          if (a48._isJsPlumbGroup) {
            this.instance.removeGroup(a48._jsPlumbGroup);
          } else {
            s40.remove(e78.el, true);
          }
          o42.pruned = true;
        } else if (s40.orphan || i45) {
          o42.pos = this.instance.groupManager.orphan(e78.el, t61);
          if (a48._isJsPlumbGroup) {
            s40.removeGroup(a48._jsPlumbGroup);
          } else {
            s40.remove(e78.el);
          }
        }
      }
      return o42;
    } }]);
    return c47;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/source-selector.js
  var i24 = function() {
    function i45(e78, l48) {
      var n91 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      t(this, i45);
      this.selector = e78;
      this.def = l48;
      this.exclude = n91;
      o(this, "id", void 0);
      o(this, "redrop", void 0);
      this.id = $();
      this.redrop = l48.def.redrop || s26;
    }
    n(i45, [{ key: "setEnabled", value: function e78(r53) {
      this.def.enabled = r53;
    } }, { key: "isEnabled", value: function e78() {
      return this.def.enabled !== false;
    } }]);
    return i45;
  }();
  var s26 = "strict";
  var l23 = "any";
  var n50 = "anySource";
  var d22 = "anyTarget";
  var o25 = "anySourceOrTarget";

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/browser-ui-renderer/endpoint-drag-handler.js
  function Y8(e78, t61, n91, i45, s40, r53) {
    var o42 = R7(r53, e78, i45, s40);
    var a48 = { paintStyle: e78.paintStyle, preparedAnchor: o42, element: i45, scope: e78.scope, cssClass: [d21, e78.cssClass].join(" ") };
    if (t61 != null) {
      if (t61 instanceof n15) {
        a48.existingEndpoint = t61;
      } else {
        a48.endpoint = t61;
      }
    }
    var l48 = r53._internal_newEndpoint(a48);
    r53._paintEndpoint(l48, {});
    return l48;
  }
  function $5(e78, t61, n91, i45, s40) {
    var r53 = e78.target || e78.srcElement, o42 = false, a48 = i45.getSelector(t61, n91);
    for (var l48 = 0; l48 < a48.length; l48++) {
      if (a48[l48] === r53) {
        o42 = true;
        break;
      }
    }
    return s40 ? !o42 : o42;
  }
  var ee2 = a5(v25, k17);
  var te2 = "sourceSelectorEndpoint";
  var ne2 = function() {
    function S20(e78) {
      t(this, S20);
      this.instance = e78;
      o(this, "jpc", void 0);
      o(this, "existingJpc", void 0);
      o(this, "_originalAnchorSpec", void 0);
      o(this, "ep", void 0);
      o(this, "endpointRepresentation", void 0);
      o(this, "canvasElement", void 0);
      o(this, "_activeDefinition", void 0);
      o(this, "placeholderInfo", { id: null, element: null });
      o(this, "floatingIndex", void 0);
      o(this, "floatingId", void 0);
      o(this, "floatingElement", void 0);
      o(this, "floatingEndpoint", void 0);
      o(this, "floatingAnchor", void 0);
      o(this, "_stopped", void 0);
      o(this, "inPlaceCopy", void 0);
      o(this, "endpointDropTargets", []);
      o(this, "currentDropTarget", null);
      o(this, "payload", void 0);
      o(this, "floatingConnections", {});
      o(this, "_forceReattach", void 0);
      o(this, "_forceDetach", void 0);
      o(this, "mousedownHandler", void 0);
      o(this, "mouseupHandler", void 0);
      o(this, "selector", a5(r32));
      var t61 = e78.getContainer();
      this.mousedownHandler = this._mousedownHandler.bind(this);
      this.mouseupHandler = this._mouseupHandler.bind(this);
      e78.on(t61, t4, y4, this.mousedownHandler);
      e78.on(t61, u11, [y4, a5(r32)].join(","), this.mouseupHandler);
    }
    n(S20, [{ key: "_resolveDragParent", value: function e78(t61, n91) {
      var i45 = this.instance.getContainer();
      var s40 = u6(n91, y4, i45, true);
      if (t61.parentSelector != null) {
        var r53 = u6(n91, t61.parentSelector, i45, true);
        if (r53 != null) {
          s40 = u6(r53.parentNode, y4, i45, false);
        }
        return r53 || s40;
      } else {
        return s40;
      }
    } }, { key: "_mousedownHandler", value: function e78(t61) {
      var n91;
      var i45;
      if (t61.which === 3 || t61.button === 2) {
        return;
      }
      var s40 = t61.target || t61.srcElement;
      i45 = this._getSourceDefinition(t61);
      if (i45 != null) {
        n91 = this._resolveDragParent(i45.def.def, s40);
        if (n91 == null || n91.getAttribute(s25) === v9) {
          return;
        }
      }
      if (i45) {
        var r53 = t61.currentTarget, o42;
        if (s40.getAttribute(s25) !== v9) {
          i5(t61);
          this._activeDefinition = i45;
          o42 = i45.def.def;
          if (o42.canAcceptNewConnection != null && !o42.canAcceptNewConnection(n91, t61)) {
            return false;
          }
          var a48 = dt(t61, n91, this.instance.getEffectiveVisibleZoom());
          var p49 = { element: n91 };
          u2(p49, o42);
          p49.isTemporarySource = true;
          if (o42.scope) {
            p49.scope = o42.scope;
          } else {
            var d32 = s40.getAttribute(i23);
            if (d32 != null) {
              p49.scope = d32;
            }
          }
          var h35 = o42.parameterExtractor ? o42.parameterExtractor(n91, s40, t61) : {};
          p49 = m2(p49, h35);
          if (p49.maxConnections != null && p49.maxConnections >= 0) {
            var u52 = this.instance.select({ source: n91 }).length;
            if (u52 >= p49.maxConnections) {
              i5(t61);
              if (o42.onMaxConnections) {
                o42.onMaxConnections({ element: n91, maxConnections: p49.maxConnections }, t61);
              }
              t61.stopImmediatePropagation && t61.stopImmediatePropagation();
              return false;
            }
          }
          if (o42.anchorPositionFinder) {
            var f45 = o42.anchorPositionFinder(n91, a48, o42, t61);
            if (f45 != null) {
              p49.anchor = f45;
            }
          }
          this._originalAnchorSpec = p49.anchor || (this.instance.areDefaultAnchorsSet() ? this.instance.defaults.anchors[0] : this.instance.defaults.anchor);
          var g31 = this.instance.router.prepareAnchor(this._originalAnchorSpec);
          var v41 = [a48.x, a48.y, 0, 0];
          if (g31.locations.length > 0) {
            v41[2] = g31.locations[0].ox;
            v41[3] = g31.locations[0].oy;
          } else if (g31.isContinuous) {
            a48.x < 0.5 ? a48.x : 1 - a48.x;
            a48.y < 0.5 ? a48.y : 1 - a48.y;
            v41[2] = 0;
            v41[3] = 0;
          }
          p49.anchor = v41;
          p49.deleteOnEmpty = true;
          this.ep = this.instance._internal_newEndpoint(p49);
          var _17 = {};
          if (o42.extract) {
            for (var y34 in o42.extract) {
              var C19 = s40.getAttribute(y34);
              if (C19) {
                _17[o42.extract[y34]] = C19;
              }
            }
            D8.mergeParameters(this.ep, _17);
          }
          if (p49.uniqueEndpoint) {
            var D18 = this.ep.elementId;
            var I17 = this.instance.getManagedData(D18, te2, i45.id);
            if (I17 == null) {
              this.instance.setManagedData(D18, te2, i45.id, this.ep);
              this.ep.deleteOnEmpty = false;
            } else {
              this.ep.finalEndpoint = I17;
            }
          }
          r53._jsPlumbOrphanedEndpoints = r53._jsPlumbOrphanedEndpoints || [];
          r53._jsPlumbOrphanedEndpoints.push(this.ep);
          this.instance.trigger(this.ep.endpoint.canvas, t4, t61, _17);
        }
      }
    } }, { key: "_mouseupHandler", value: function e78(t61) {
      var n91 = t61.currentTarget || t61.srcElement;
      if (n91._jsPlumbOrphanedEndpoints) {
        J(n91._jsPlumbOrphanedEndpoints, this.instance._maybePruneEndpoint.bind(this.instance));
        n91._jsPlumbOrphanedEndpoints.length = 0;
      }
      this._activeDefinition = null;
    } }, { key: "onDragInit", value: function e78(t61) {
      var n91 = h8(t61, this.instance), i45 = c7(t61, this.instance.getEffectiveVisibleZoom());
      this._makeDraggablePlaceholder(n91, i45);
      this.placeholderInfo.element.jtk = t61.jtk;
      return this.placeholderInfo.element;
    } }, { key: "onDragAbort", value: function e78(t61) {
      this._cleanupDraggablePlaceholder();
    } }, { key: "_makeDraggablePlaceholder", value: function e78(t61, n91) {
      this.placeholderInfo = this.placeholderInfo || {};
      var i45 = I2.node("svg", { position: "absolute" });
      this.instance._appendElementToContainer(i45);
      var s40 = this.instance.getId(i45);
      this.instance.setPosition(i45, t61);
      i45.style.width = n91.w + "px";
      i45.style.height = n91.h + "px";
      this.instance.manage(i45);
      this.placeholderInfo.id = s40;
      this.placeholderInfo.element = i45;
      return i45;
    } }, { key: "_cleanupDraggablePlaceholder", value: function e78() {
      if (this.placeholderInfo.element) {
        this.instance.unmanage(this.placeholderInfo.element, true);
        delete this.placeholderInfo.element;
        delete this.placeholderInfo.id;
      }
    } }, { key: "reset", value: function e78() {
      var t61 = this.instance.getContainer();
      this.instance.off(t61, u11, this.mouseupHandler);
      this.instance.off(t61, t4, this.mousedownHandler);
    } }, { key: "init", value: function e78(t61) {
    } }, { key: "startNewConnectionDrag", value: function e78(t61, n91) {
      this.jpc = this.instance._newConnection({ sourceEndpoint: this.ep, targetEndpoint: this.floatingEndpoint, source: this.ep.element, target: this.placeholderInfo.element, paintStyle: this.ep.connectorStyle, hoverPaintStyle: this.ep.connectorHoverStyle, connector: this.ep.connector, overlays: this.ep.connectorOverlays, type: n91 != null ? n91.type || this.ep.edgeType : this.ep.edgeType, cssClass: this.ep.connectorClass, hoverClass: this.ep.connectorHoverClass, scope: t61, data: n91 });
      this.jpc.pending = true;
      B8.addClass(this.jpc, this.instance.draggingClass);
      m17.addClass(this.ep, this.instance.draggingClass);
      this.instance.fire(f11, this.jpc);
    } }, { key: "startExistingConnectionDrag", value: function e78() {
      this.existingJpc = true;
      this.instance.setHover(this.jpc, false);
      var t61 = this.jpc.endpoints[0].id === this.ep.id ? 0 : 1;
      m17.detachFromConnection(this.ep, this.jpc, null, true);
      m17.addConnection(this.floatingEndpoint, this.jpc);
      this.instance.fire(f11, this.jpc);
      this.instance.sourceOrTargetChanged(this.jpc.endpoints[t61].elementId, this.placeholderInfo.id, this.jpc, this.placeholderInfo.element, t61);
      this.jpc.suspendedEndpoint = this.jpc.endpoints[t61];
      this.jpc.suspendedElement = this.jpc.endpoints[t61].element;
      this.jpc.suspendedElementId = this.jpc.endpoints[t61].elementId;
      this.jpc.suspendedElementType = t61 === 0 ? t3 : e9;
      this.instance.setHover(this.jpc.suspendedEndpoint, false);
      this.floatingEndpoint.referenceEndpoint = this.jpc.suspendedEndpoint;
      D8.mergeParameters(this.floatingEndpoint, this.jpc.suspendedEndpoint.parameters);
      this.jpc.endpoints[t61] = this.floatingEndpoint;
      B8.addClass(this.jpc, this.instance.draggingClass);
      this.floatingId = this.placeholderInfo.id;
      this.floatingIndex = t61;
      this.instance._refreshEndpoint(this.ep);
    } }, { key: "_shouldStartDrag", value: function e78() {
      var n91 = true;
      if (!this.ep.enabled) {
        n91 = false;
      }
      if (this.jpc == null && !this.ep.isSource && !this.ep.isTemporarySource) {
        n91 = false;
      }
      if (this.ep.isSource && m17.isFull(this.ep) && !(this.jpc != null && this.ep.dragAllowedWhenFull)) {
        n91 = false;
      }
      if (this.jpc != null && !C13(this.jpc, this.ep)) {
        if (m17.isFull(this.ep)) {
          n91 = false;
        } else {
          this.jpc = null;
        }
      }
      var i45 = {};
      var s40 = { endpoint: this.ep, source: this.ep.element, sourceId: this.ep.elementId, connection: this.jpc };
      var r53 = this.jpc == null ? this.instance.beforeDrag(s40) : this.instance.beforeStartDetach(s40);
      if (r53 === false) {
        n91 = false;
      } else if (e(r53) === "object") {
        i45 = r53;
        u2(i45, this.payload || {});
      } else {
        i45 = this.payload || {};
      }
      return [n91, i45];
    } }, { key: "_createFloatingEndpoint", value: function e78(t61) {
      var n91 = this.ep.endpoint;
      if (this.ep.edgeType != null) {
        var i45 = this.instance._deriveEndpointAndAnchorSpec(this.ep.edgeType);
        n91 = i45.endpoints[1];
      }
      this.floatingEndpoint = Y8(this.ep, n91, t61, this.placeholderInfo.element, this.placeholderInfo.id, this.instance);
      this.floatingAnchor = this.floatingEndpoint._anchor;
      this.floatingEndpoint.deleteOnEmpty = true;
      this.floatingElement = this.floatingEndpoint.endpoint.canvas;
      this.floatingId = this.instance.getId(this.floatingElement);
    } }, { key: "_populateTargets", value: function e78(t61, n91) {
      var i45 = this;
      var s40 = this.jpc && this.jpc.endpoints[0] === this.ep;
      var r53;
      var a48 = this.instance.getContainer().querySelectorAll([".", r32, "[", p5, this.ep.scope, "]:not(.", d21, ")"].join(""));
      j2(a48, function(e79) {
        var n92 = e79;
        if ((i45.jpc != null || n92 !== t61) && n92 !== i45.floatingElement && (i45.jpc != null || !m17.isFull(n92.jtk.endpoint))) {
          if (s40 && n92.jtk.endpoint.isSource || !s40 && n92.jtk.endpoint.isTarget) {
            var a49 = h8(e79, i45.instance), l49 = c7(e79, i45.instance.getEffectiveVisibleZoom());
            r53 = { x: a49.x, y: a49.y, w: l49.w, h: l49.h };
            i45.endpointDropTargets.push({ el: n92, targetEl: n92, r: r53, endpoint: n92.jtk.endpoint, def: null });
            h5(e79, v25);
          }
        }
      });
      if (s40) {
        var l48 = S2(this.instance.sourceSelectors, function(e79) {
          return e79.isEnabled() && (e79.def.def.scope == null || e79.def.def.scope === i45.ep.scope);
        });
        if (l48 != null) {
          var c47 = this._findTargetZones(l48);
          j2(c47, function(e79) {
            if (e79.getAttribute(s25) !== v9) {
              var t62 = e79.getAttribute(i23);
              if (t62 != null && t62 !== i45.ep.scope) {
                return;
              }
              var n92 = { r: null, el: e79 };
              n92.targetEl = u6(e79, y4, i45.instance.getContainer(), true);
              var s41 = h8(n92.el, i45.instance), r54 = c7(n92.el, i45.instance.getEffectiveVisibleZoom());
              n92.r = { x: s41.x, y: s41.y, w: r54.w, h: r54.h };
              if (l48.def.def.rank != null) {
                n92.rank = l48.def.def.rank;
              }
              n92.def = l48.def;
              i45.endpointDropTargets.push(n92);
              h5(n92.targetEl, v25);
            }
          });
        }
      } else {
        var p49 = I(this.instance.targetSelectors, function(e79) {
          return e79.isEnabled();
        });
        p49.forEach(function(e79) {
          var t62 = i45._findTargetZones(e79);
          j2(t62, function(t63) {
            if (t63.getAttribute(s25) !== v9) {
              var s41 = t63.getAttribute(i23);
              if (s41 != null && s41 !== i45.ep.scope) {
                return;
              }
              var r54 = { r: null, el: t63 };
              if (e79.def.def.parentSelector != null) {
                r54.targetEl = u6(t63, e79.def.def.parentSelector, i45.instance.getContainer(), true);
              }
              if (r54.targetEl == null) {
                r54.targetEl = u6(t63, y4, i45.instance.getContainer(), true);
              }
              if (e79.def.def.allowLoopback === false || i45._activeDefinition && i45._activeDefinition.def.def.allowLoopback === false) {
                if (r54.targetEl === i45.ep.element) {
                  return;
                }
              }
              if (e79.def.def.canAcceptNewConnection != null && !e79.def.def.canAcceptNewConnection(r54.targetEl, n91)) {
                return;
              }
              var a49 = e79.def.def.maxConnections;
              if (a49 != null && a49 !== -1) {
                if (i45.instance.select({ target: r54.targetEl }).length >= a49) {
                  return;
                }
              }
              var l49 = h8(t63, i45.instance), c48 = c7(t63, i45.instance.getEffectiveVisibleZoom());
              r54.r = { x: l49.x, y: l49.y, w: c48.w, h: c48.h };
              r54.def = e79.def;
              if (e79.def.def.rank != null) {
                r54.rank = e79.def.def.rank;
              }
              i45.endpointDropTargets.push(r54);
              h5(r54.targetEl, v25);
            }
          });
        });
      }
      this.endpointDropTargets.sort(function(e79, t62) {
        if (e79.targetEl._isJsPlumbGroup && !t62.targetEl._isJsPlumbGroup) {
          return 1;
        } else if (!e79.targetEl._isJsPlumbGroup && t62.targetEl._isJsPlumbGroup) {
          return -1;
        } else {
          if (e79.targetEl._isJsPlumbGroup && t62.targetEl._isJsPlumbGroup) {
            if (i45.instance.groupManager.isAncestor(e79.targetEl._jsPlumbGroup, t62.targetEl._jsPlumbGroup)) {
              return -1;
            } else if (i45.instance.groupManager.isAncestor(t62.targetEl._jsPlumbGroup, e79.targetEl._jsPlumbGroup)) {
              return 1;
            }
          } else {
            if (e79.rank != null && t62.rank != null) {
              if (e79.rank > t62.rank) {
                return -1;
              } else if (e79.rank < t62.rank) {
                return 1;
              } else
                ;
            } else {
              return 0;
            }
          }
        }
      });
    } }, { key: "_findTargetZones", value: function e78(t61) {
      var i45;
      if (t61.redrop === l23) {
        var s40 = this.instance.targetSelectors.map(function(e79) {
          return e79.selector;
        });
        s40.push.apply(s40, h(this.instance.sourceSelectors.map(function(e79) {
          return e79.selector;
        })));
        s40.push(y4);
        i45 = s40.join(",");
      } else if (t61.redrop === s26) {
        i45 = t61.selector;
      } else if (t61.redrop === n50) {
        i45 = this.instance.sourceSelectors.map(function(e79) {
          return e79.selector;
        }).join(",");
      } else if (t61.redrop === d22) {
        i45 = this.instance.targetSelectors.map(function(e79) {
          return e79.selector;
        }).join(",");
      } else if (t61.redrop === o25) {
        var r53 = this.instance.targetSelectors.map(function(e79) {
          return e79.selector;
        });
        r53.push.apply(r53, h(this.instance.sourceSelectors.map(function(e79) {
          return e79.selector;
        })));
        i45 = r53.join(",");
      }
      var o42 = Array.from(this.instance.getContainer().querySelectorAll(".jtk-surface"));
      var a48 = [];
      o42.forEach(function(e79) {
        var t62 = Array.from(e79.querySelectorAll(i45));
        a48.push.apply(a48, h(t62));
      });
      var l48 = Array.from(this.instance.getContainer().querySelectorAll(i45));
      return l48.filter(function(e79) {
        return a48.indexOf(e79) === -1;
      });
    } }, { key: "onStart", value: function e78(t61) {
      this.endpointDropTargets.length = 0;
      this.currentDropTarget = null;
      this._stopped = false;
      var n91 = t61.drag.getDragElement();
      this.ep = n91.jtk.endpoint;
      if (!this.ep) {
        return false;
      }
      this.endpointRepresentation = this.ep.endpoint;
      this.canvasElement = this.endpointRepresentation.canvas;
      this.jpc = m17.connectorSelector(this.ep);
      var s40 = this._shouldStartDrag(), r53 = b(s40, 2), o42 = r53[0], a48 = r53[1];
      if (o42 === false) {
        this._stopped = true;
        return false;
      }
      this.instance.setHover(this.ep, false);
      this.instance.isConnectionBeingDragged = true;
      if (this.jpc && !m17.isFull(this.ep) && this.ep.isSource) {
        this.jpc = null;
      }
      this._createFloatingEndpoint(this.canvasElement);
      this._populateTargets(this.canvasElement, t61.e);
      if (this.jpc == null) {
        this.startNewConnectionDrag(this.ep.scope, a48);
      } else {
        this.startExistingConnectionDrag();
      }
      this._registerFloatingConnection(this.placeholderInfo, this.jpc);
      this.instance.currentlyDragging = true;
    } }, { key: "onBeforeStart", value: function e78(t61) {
      this.payload = t61.e.payload || {};
    } }, { key: "onDrag", value: function e78(t61) {
      if (this._stopped) {
        return true;
      }
      if (this.placeholderInfo.element) {
        var n91 = c7(this.floatingElement, this.instance.getEffectiveVisibleZoom());
        this.instance.setElementPosition(this.placeholderInfo.element, t61.pos.x, t61.pos.y);
        var i45 = { x: t61.pos.x, y: t61.pos.y, w: n91.w, h: n91.h }, s40, r53, o42;
        for (var l48 = 0; l48 < this.endpointDropTargets.length; l48++) {
          if (i9(i45, this.endpointDropTargets[l48].r)) {
            s40 = this.endpointDropTargets[l48];
            break;
          }
        }
        if (s40 !== this.currentDropTarget && this.currentDropTarget != null) {
          r53 = this._getFloatingAnchorIndex();
          this.instance.removeClass(this.currentDropTarget.el, k17);
          if (this.currentDropTarget.endpoint) {
            this.currentDropTarget.endpoint.endpoint.removeClass(this.instance.endpointDropAllowedClass);
            this.currentDropTarget.endpoint.endpoint.removeClass(this.instance.endpointDropForbiddenClass);
          }
          this.floatingAnchor.out();
        }
        if (s40 != null) {
          h5(s40.el, k17);
          r53 = this._getFloatingAnchorIndex();
          if (s40.endpoint != null) {
            o42 = s40.endpoint.isSource && r53 === 0 || s40.endpoint.isTarget && r53 !== 0 || this.jpc.suspendedEndpoint && s40.endpoint.referenceEndpoint && s40.endpoint.referenceEndpoint.id === this.jpc.suspendedEndpoint.id;
            if (o42) {
              var c47 = this.instance.beforeDrop({ dropEndpoint: s40.endpoint, connection: this.jpc });
              if (c47) {
                s40.endpoint.endpoint.addClass(this.instance.endpointDropAllowedClass);
                s40.endpoint.endpoint.removeClass(this.instance.endpointDropForbiddenClass);
              } else {
                s40.endpoint.endpoint.removeClass(this.instance.endpointDropAllowedClass);
                s40.endpoint.endpoint.addClass(this.instance.endpointDropForbiddenClass);
              }
              this.floatingAnchor.over(s40.endpoint);
              this.instance._paintConnection(this.jpc);
            } else {
              s40 = null;
            }
          }
        }
        this.currentDropTarget = s40;
        this.instance.fire(j5, this.jpc);
      }
    } }, { key: "_maybeCleanup", value: function e78(t61) {
      if (t61._mtNew && t61.connections.length === 0) {
        this.instance.deleteEndpoint(t61);
      } else {
        delete t61._mtNew;
      }
    } }, { key: "_reattachOrDiscard", value: function e78(t61) {
      var n91 = this.jpc.suspendedEndpoint != null;
      var i45 = this._getFloatingAnchorIndex();
      if (n91 && this._shouldReattach()) {
        if (i45 === 0) {
          this.jpc.source = this.jpc.suspendedElement;
          this.jpc.sourceId = this.jpc.suspendedElementId;
        } else {
          this.jpc.target = this.jpc.suspendedElement;
          this.jpc.targetId = this.jpc.suspendedElementId;
        }
        this._doForceReattach(i45);
        return true;
      } else {
        this._discard(i45, t61);
        return false;
      }
    } }, { key: "onStop", value: function e78(t61) {
      var n91 = this;
      var i45 = t61.e;
      this.instance.isConnectionBeingDragged = false;
      this.instance.currentlyDragging = false;
      var s40 = r4(k17, v25);
      var r53 = this.instance.getContainer().querySelectorAll(ee2);
      j2(r53, function(e79) {
        n91.instance.removeClass(e79, s40);
      });
      if (this.jpc && this.jpc.endpoints != null) {
        var l48 = this.jpc.suspendedEndpoint != null;
        var c47 = this._getFloatingAnchorIndex();
        var p49 = this.jpc.suspendedEndpoint;
        var d32;
        if (this.currentDropTarget != null) {
          d32 = this._getDropEndpoint(t61, this.jpc);
          if (d32 == null) {
            this._reattachOrDiscard(t61.e);
          } else {
            if (p49 && p49.id === d32.id) {
              this._doForceReattach(c47);
            } else {
              if (!d32.enabled) {
                this._reattachOrDiscard(t61.e);
              } else if (m17.isFull(d32)) {
                this._reattachOrDiscard(t61.e);
              } else {
                if (c47 === 0) {
                  this.jpc.source = d32.element;
                  this.jpc.sourceId = d32.elementId;
                } else {
                  this.jpc.target = d32.element;
                  this.jpc.targetId = d32.elementId;
                }
                var h35 = true;
                if (l48 && this.jpc.suspendedEndpoint.id !== d32.id) {
                  if (!this.instance.beforeDetach(this.jpc)) {
                    h35 = false;
                  }
                }
                if (h35) {
                  this._drop(d32, c47, i45, h35);
                } else {
                  this._reattachOrDiscard(t61.e);
                }
              }
            }
          }
        } else {
          this._reattachOrDiscard(t61.e);
        }
        this.instance._refreshEndpoint(this.ep);
        m17.removeClass(this.ep, this.instance.draggingClass);
        this._cleanupDraggablePlaceholder();
        B8.removeClass(this.jpc, this.instance.draggingClass);
        delete this.jpc.suspendedEndpoint;
        delete this.jpc.suspendedElement;
        delete this.jpc.suspendedElementType;
        delete this.jpc.suspendedElementId;
        delete this.jpc.suspendedIndex;
        delete this.floatingId;
        delete this.floatingIndex;
        delete this.floatingElement;
        delete this.floatingEndpoint;
        delete this.floatingAnchor;
        delete this.jpc.pending;
        if (d32 != null) {
          this._maybeCleanup(d32);
        }
        this.instance.fire(q3, this.jpc);
      }
    } }, { key: "_getSourceDefinition", value: function e78(t61) {
      var n91;
      var i45 = this.instance.getContainer();
      for (var s40 = 0; s40 < this.instance.sourceSelectors.length; s40++) {
        n91 = this.instance.sourceSelectors[s40];
        if (n91.isEnabled()) {
          var r53 = $5(t61, i45, n91.selector, this.instance, n91.exclude);
          if (r53 !== false) {
            return n91;
          }
        }
      }
    } }, { key: "_getDropEndpoint", value: function e78(t61, n91) {
      var i45;
      if (this.currentDropTarget.endpoint == null) {
        var s40 = this.currentDropTarget.def;
        var r53 = t61.e.target || t61.e.srcElement;
        if (s40 == null) {
          return null;
        }
        var o42 = this.currentDropTarget.targetEl;
        var a48 = dt(t61.e, o42, this.instance.getEffectiveVisibleZoom());
        var c47 = this.instance._deriveEndpointAndAnchorSpec(D8.getType(n91).join(" "), true);
        var p49 = c47.endpoints ? u2(t61, { endpoint: s40.def.endpoint || c47.endpoints[1], cssClass: s40.def.cssClass || "", source: s40.def.source === true, target: s40.def.target === true }) : t61;
        var d32 = this.instance.validAnchorsSpec(c47.anchors) ? c47.anchors : this.instance.areDefaultAnchorsSet() ? this.instance.defaults.anchors : null;
        var h35 = s40.def.anchor;
        var u52 = s40.def.anchorPositionFinder ? s40.def.anchorPositionFinder(o42, a48, s40.def, t61.e) : null;
        var f45 = u52 != null ? u52 : h35 != null ? h35 : d32 != null && d32[1] != null ? d32[1] : null;
        if (f45 != null) {
          p49 = u2(p49, { anchor: f45 });
        }
        if (s40.def.portId != null) {
          p49.portId = s40.def.portId;
        }
        delete p49.drag;
        delete p49.selection;
        var g31 = s40.def.parameterExtractor ? s40.def.parameterExtractor(this.currentDropTarget.el, r53, t61.e) : {};
        p49 = m2(p49, g31);
        p49.element = o42;
        i45 = this.instance._internal_newEndpoint(p49);
        i45._mtNew = true;
        i45.deleteOnEmpty = true;
        if (s40.def.parameters) {
          D8.mergeParameters(i45, s40.def.parameters);
        }
        if (s40.def.extract) {
          var m44 = {};
          for (var v41 in s40.def.extract) {
            var _17 = this.currentDropTarget.el.getAttribute(v41);
            if (_17) {
              m44[s40.def.extract[v41]] = _17;
            }
          }
          D8.mergeParameters(i45, m44);
        }
      } else {
        i45 = this.currentDropTarget.endpoint;
      }
      if (i45) {
        m17.removeClass(i45, [this.instance.endpointDropAllowedClass, this.instance.endpointDropForbiddenClass].join(" "));
      }
      return i45;
    } }, { key: "_doForceReattach", value: function e78(t61) {
      m17.detachFromConnection(this.floatingEndpoint, this.jpc, null, true);
      this.jpc.endpoints[t61] = this.jpc.suspendedEndpoint;
      this.instance.setHover(this.jpc, false);
      this.jpc._forceDetach = true;
      m17.addConnection(this.jpc.suspendedEndpoint, this.jpc);
      this.instance.sourceOrTargetChanged(this.floatingId, this.jpc.suspendedEndpoint.elementId, this.jpc, this.jpc.suspendedEndpoint.element, t61);
      this.instance.deleteEndpoint(this.floatingEndpoint);
      this.instance.repaint(this.jpc.source);
      delete this.jpc._forceDetach;
    } }, { key: "_shouldReattach", value: function e78() {
      if (S11(this.jpc) || this.jpc._forceReattach) {
        return true;
      } else {
        return !this.instance.beforeDetach(this.jpc);
      }
    } }, { key: "_discard", value: function e78(t61, n91) {
      if (this.jpc.pending) {
        this.instance.fire(h9, this.jpc, n91);
      } else {
        if (t61 === 0) {
          this.jpc.source = this.jpc.suspendedEndpoint.element;
          this.jpc.sourceId = this.jpc.suspendedEndpoint.elementId;
        } else {
          this.jpc.target = this.jpc.suspendedEndpoint.element;
          this.jpc.targetId = this.jpc.suspendedEndpoint.elementId;
        }
        this.jpc.endpoints[t61] = this.jpc.suspendedEndpoint;
      }
      if (this.floatingEndpoint) {
        m17.detachFromConnection(this.floatingEndpoint, this.jpc);
      }
      this.instance.deleteConnection(this.jpc, { originalEvent: n91, force: true });
    } }, { key: "_drop", value: function e78(t61, n91, i45, s40) {
      m17.detachFromConnection(this.jpc.endpoints[n91], this.jpc);
      if (this.jpc.suspendedEndpoint) {
        m17.detachFromConnection(this.jpc.suspendedEndpoint, this.jpc);
      }
      this.jpc.endpoints[n91] = t61;
      m17.addConnection(t61, this.jpc);
      if (this.jpc.suspendedEndpoint) {
        var r53 = this.jpc.suspendedEndpoint.elementId;
        this.instance.fireMoveEvent({ index: n91, originalSourceId: n91 === 0 ? r53 : this.jpc.sourceId, newSourceId: n91 === 0 ? t61.elementId : this.jpc.sourceId, originalTargetId: n91 === 1 ? r53 : this.jpc.targetId, newTargetId: n91 === 1 ? t61.elementId : this.jpc.targetId, originalEndpoint: this.jpc.suspendedEndpoint, connection: this.jpc, newEndpoint: t61 }, i45);
      }
      if (n91 === 1) {
        this.instance.sourceOrTargetChanged(this.floatingId, this.jpc.targetId, this.jpc, this.jpc.target, 1);
      } else {
        this.instance.sourceOrTargetChanged(this.floatingId, this.jpc.sourceId, this.jpc, this.jpc.source, 0);
      }
      var o42 = this.jpc.endpoints[0].element;
      if (this.jpc.endpoints[0].finalEndpoint) {
        var a48 = this.jpc.endpoints[0];
        m17.detachFromConnection(a48, this.jpc);
        this.jpc.endpoints[0] = this.jpc.endpoints[0].finalEndpoint;
        m17.addConnection(this.jpc.endpoints[0], this.jpc);
      }
      if (a2(s40)) {
        D8.mergeData(this.jpc, s40);
      }
      if (this._originalAnchorSpec) {
        m17.setAnchor(this.jpc.endpoints[0], this._originalAnchorSpec);
        this._originalAnchorSpec = null;
      }
      this.instance.setHover(this.jpc, false);
      this.instance._finaliseConnection(this.jpc, true, null, i45);
      this.instance.revalidate(o42);
    } }, { key: "_registerFloatingConnection", value: function e78(t61, n91) {
      this.floatingConnections[t61.id] = n91;
    } }, { key: "_getFloatingAnchorIndex", value: function e78() {
      return this.floatingIndex == null ? 1 : this.floatingIndex;
    } }]);
    return S20;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/browser-ui-renderer/group-drag-handler.js
  var c30 = function(o42) {
    a(d32, o42);
    var c47 = s(d32);
    function d32(t61, r53, i45) {
      var o43;
      t(this, d32);
      o43 = c47.call(this, t61, r53, i45);
      o43.instance = t61;
      o43.dragSelection = r53;
      o(l(o43), "selector", [">", b15, y4].join(" "));
      o(l(o43), "doRevalidate", void 0);
      o(l(o43), "currentGroup", void 0);
      o(l(o43), "currentChildPositions", /* @__PURE__ */ new Map());
      o(l(o43), "currentGroupEntry", void 0);
      o43.doRevalidate = o43._revalidate.bind(l(o43));
      return o43;
    }
    n(d32, [{ key: "reset", value: function t61() {
      this.currentChildPositions.clear();
      this.currentGroup = null;
      this.currentGroupEntry = null;
      this.drag.off(w6, this.doRevalidate);
    } }, { key: "_revalidate", value: function t61(r53) {
      this.instance.revalidate(r53);
    } }, { key: "init", value: function t61(r53) {
      this.drag = r53;
      r53.on(w6, this.doRevalidate);
    } }, { key: "useGhostProxy", value: function t61(r53, e78) {
      var n91 = e78._jsPlumbParentGroup;
      return n91 == null ? false : n91.ghost === true;
    } }, { key: "makeGhostProxy", value: function t61(r53) {
      var e78 = r53;
      var n91 = e78.cloneNode(true);
      n91._jsPlumbParentGroup = e78._jsPlumbParentGroup;
      return n91;
    } }, { key: "getConstrainFunction", value: function t61() {
      return function(t62, r53, e78, n91) {
        var a48 = t62.x, i45 = t62.y;
        if (r53._jsPlumbParentGroup && r53._jsPlumbParentGroup.constrain) {
          a48 = Math.max(t62.x, 0);
          i45 = Math.max(t62.y, 0);
          a48 = Math.min(a48, e78.w - n91.w);
          i45 = Math.min(i45, e78.h - n91.h);
        }
        return { x: a48, y: i45 };
      };
    } }]);
    return d32;
  }(I12);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/browser-ui-renderer/html-element-overlay.js
  var c31 = function() {
    function c47(s40, n91) {
      t(this, c47);
      this.instance = s40;
      this.overlay = n91;
      o(this, "htmlElementOverlay", void 0);
      this.htmlElementOverlay = n91;
    }
    n(c47, null, [{ key: "getElement", value: function s40(a48, e78, c48) {
      if (a48.canvas == null) {
        if (c48 && e78) {
          a48.canvas = c48(e78);
          var o42 = a48.instance.overlayClass + " " + (a48.cssClass ? a48.cssClass : "");
          h5(a48.canvas, o42);
        } else {
          a48.canvas = N(m24, {}, a48.instance.overlayClass + " " + (a48.cssClass ? a48.cssClass : ""));
        }
        a48.canvas.setAttribute("jtk-overlay-id", a48.id);
        for (var v41 in a48.attributes) {
          a48.canvas.setAttribute(v41, a48.attributes[v41]);
        }
        a48.canvas.style.position = s5;
        a48.instance._appendElement(a48.canvas, a48.instance.getContainer());
        a48.instance.getId(a48.canvas);
        var m44 = "translate(-50%, -50%)";
        a48.canvas.style.webkitTransform = m44;
        a48.canvas.style.mozTransform = m44;
        a48.canvas.style.msTransform = m44;
        a48.canvas.style.oTransform = m44;
        a48.canvas.style.transform = m44;
        if (!a48.isVisible()) {
          a48.canvas.style.display = v5;
        }
        a48.canvas.jtk = { overlay: a48 };
      }
      return a48.canvas;
    } }, { key: "destroy", value: function s40(a48) {
      a48.canvas && a48.canvas.parentNode && a48.canvas.parentNode.removeChild(a48.canvas);
      delete a48.canvas;
      delete a48.cachedDimensions;
    } }, { key: "_getDimensions", value: function s40(a48, e78) {
      if (a48.cachedDimensions == null || e78) {
        a48.cachedDimensions = { w: 1, h: 1 };
      }
      return a48.cachedDimensions;
    } }]);
    return c47;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/browser-ui-renderer/svg-element-overlay.js
  function d23(t61, l48) {
    if (t61.contentElement == null) {
      var o42 = u2({ "jtk-overlay-id": t61.id }, t61.attributes);
      t61.contentElement = D3(l48, o42);
      var r53 = t61.instance.overlayClass + " " + (t61.cssClass ? t61.cssClass : "");
      h5(t61.contentElement, r53);
      t61.contentElement.jtk = { overlay: t61 };
    }
    var i45 = t61.contentElement.parentNode;
    if (i45 == null) {
      var m44 = t61.component.connector;
      i45 = m44 != null ? m44.canvas : null;
      if (i45 != null) {
        G2(i45, t61.contentElement, 1);
      }
    }
    return t61.contentElement;
  }
  function s27(e78, n91, o42, r53) {
    d23(e78, h7);
    var i45 = [0, 0];
    if (r53.xmin < 0) {
      i45[0] = -r53.xmin;
    }
    if (r53.ymin < 0) {
      i45[1] = -r53.ymin;
    }
    var m44 = { d: n91, stroke: o42.stroke ? o42.stroke : null, fill: o42.fill ? o42.fill : null, transform: "translate(" + i45[0] + "," + i45[1] + ")", "pointer-events": "visibleStroke" };
    z3(e78.contentElement, m44);
  }
  function E9(e78) {
    return d23(e78, h7);
  }
  function f25(e78) {
    d23(e78, d6);
    if (e78.bgElement == null) {
      e78.bgElement = I2.node(p6);
      e78.contentElement.appendChild(e78.bgElement);
    }
    if (e78.textElement == null) {
      e78.textElement = I2.node(k3);
      e78.contentElement.appendChild(e78.textElement);
    }
    return e78.contentElement;
  }
  function v26(e78, n91, t61) {
    f25(e78);
    var o42 = h2(e78.label) ? e78.label(e78) : e78.label;
    var r53 = [0, 0];
    if (t61.xmin < 0) {
      r53[0] = -t61.xmin;
    }
    if (t61.ymin < 0) {
      r53[1] = -t61.ymin;
    }
    var i45 = { x: n91.d.loc.x, y: n91.d.loc.y, "text-anchor": "middle", "dominant-baseline": "middle", "pointer-events": "visibleStroke", transform: "translate(" + r53[0] + "," + r53[1] + ")" };
    z3(e78.textElement, i45);
    e78.textElement.textContent = o42;
    var m44 = e78.textElement.getBoundingClientRect();
    var a48 = e78.instance.currentZoom;
    var u52 = m44.width / a48;
    var d32 = m44.height / a48;
    var s40 = 5;
    var E17 = { transform: "translate(" + r53[0] + "," + r53[1] + ")", x: i45.x - s40 - u52 / 2, y: i45.y - s40 - d32 / 2, width: u52 + 2 * s40, height: d32 + 2 * s40, fill: o42 == null || o42.length === 0 ? "none" : "white" };
    z3(e78.bgElement, E17);
  }
  function b18(e78, n91) {
    if (e78.contentElement != null && e78.contentElement.parentNode != null) {
      e78.contentElement.parentNode.removeChild(e78.contentElement);
    }
    if (e78.backgroundContentElement != null && e78.backgroundContentElement.parentNode != null) {
      e78.backgroundContentElement.parentNode.removeChild(e78.backgroundContentElement);
    }
    delete e78.contentElement;
    delete e78.backgroundContentElement;
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/browser-ui-renderer/svg-component.js
  var s28 = function() {
    function s40() {
      t(this, s40);
    }
    n(s40, null, [{ key: "paint", value: function i45(n91, s41, e78, m44) {
      if (e78 != null) {
        var o42 = [n91.x, n91.y], u52 = [n91.w, n91.h];
        if (m44 != null) {
          if (m44.xmin < 0) {
            o42[0] += m44.xmin;
          }
          if (m44.ymin < 0) {
            o42[1] += m44.ymin;
          }
          u52[0] = m44.xmax + (m44.xmin < 0 ? -m44.xmin : 0);
          u52[1] = m44.ymax + (m44.ymin < 0 ? -m44.ymin : 0);
        }
        if (isFinite(u52[0]) && isFinite(u52[1])) {
          var f45 = { width: "" + (u52[0] || 0), height: "" + (u52[1] || 0) };
          if (s41.containerType === T.HTML) {
            z3(n91.canvas, u2(f45, { style: E3([o42[0], o42[1]]) }));
          } else {
            z3(n91.canvas, u2(f45, { x: o42[0], y: o42[1] }));
          }
        }
      }
    } }]);
    return s40;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/browser-ui-renderer/svg-element-connector.js
  function c32(l48, r53, d32, c47) {
    h24(l48, r53);
    s28.paint(r53, l48, d32, c47);
    var p49 = "", u52 = [0, 0];
    if (c47.xmin < 0) {
      u52[0] = -c47.xmin;
    }
    if (c47.ymin < 0) {
      u52[1] = -c47.ymin;
    }
    if (r53.segments.length > 0) {
      p49 = l48.getPathData(r53);
      var v41 = { d: p49, transform: "translate(" + u52[0] + "," + u52[1] + ")", "pointer-events": "visibleStroke" }, f45 = null;
      if (d32.outlineStroke) {
        var m44 = d32.outlineWidth || 1, g31 = d32.strokeWidth + 2 * m44;
        f45 = u2({}, d32);
        f45.stroke = d32.outlineStroke;
        f45.strokeWidth = g31;
        if (r53.bgPath == null) {
          r53.bgPath = D3(h7, v41);
          l48.addClass(r53.bgPath, l48.connectorOutlineClass);
          G2(r53.canvas, r53.bgPath, 0);
        } else {
          z3(r53.bgPath, v41);
        }
        F2(r53.bgPath, f45);
      }
      var k20 = r53;
      if (k20.path == null) {
        k20.path = D3(h7, v41);
        G2(k20.canvas, k20.path, d32.outlineStroke ? 1 : 0);
      } else {
        if (k20.path.parentNode !== k20.canvas) {
          G2(k20.canvas, k20.path, d32.outlineStroke ? 1 : 0);
        }
        z3(r53.path, v41);
      }
      F2(r53.path, d32);
    }
  }
  function h24(t61, e78) {
    if (e78.canvas != null) {
      return e78.canvas;
    } else {
      var a48 = D3(v6, { style: "", width: "0", height: "0", "pointer-events": v5, position: s5 });
      e78.canvas = a48;
      t61._appendElement(e78.canvas, t61.getContainer());
      if (e78.cssClass != null) {
        t61.addClass(a48, e78.cssClass);
      }
      t61.addClass(a48, t61.connectorClass);
      if (e78.classesToAddWhenRendered != null) {
        t61.addClass(a48, e78.classesToAddWhenRendered.join(" "));
        delete e78.classesToAddWhenRendered;
      }
      a48.jtk = a48.jtk || {};
      a48.jtk.connector = e78;
      return a48;
    }
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/browser-ui-renderer/svg-element-endpoint.js
  var m26 = function() {
    function m44() {
      t(this, m44);
    }
    n(m44, null, [{ key: "getEndpointElement", value: function e78(n91) {
      if (n91.canvas != null) {
        return n91.canvas;
      } else {
        var t61 = D3(v6, { style: "", width: "0", height: "0", "pointer-events": "all", position: s5 });
        n91.canvas = t61;
        var i45 = n91.classes.join(" ");
        h5(t61, i45);
        var d32 = n91.endpoint.scope.split(/\s/);
        for (var m45 = 0; m45 < d32.length; m45++) {
          t61.setAttribute(p5 + d32[m45], e11);
        }
        n91.instance._appendElementToContainer(t61);
        if (n91.cssClass != null) {
          h5(t61, n91.cssClass);
        }
        h5(t61, n91.instance.endpointClass);
        t61.jtk = t61.jtk || {};
        t61.jtk.endpoint = n91.endpoint;
        t61.style.display = n91.endpoint.visible !== false ? o7 : v5;
        return t61;
      }
    } }, { key: "paint", value: function e78(n91, o42, s40) {
      if (n91.endpoint.deleted !== true) {
        this.getEndpointElement(n91);
        s28.paint(n91, n91.instance, s40);
        var l48 = u2({}, s40);
        if (l48.outlineStroke) {
          l48.stroke = l48.outlineStroke;
        }
        if (n91.node == null) {
          n91.node = o42.makeNode(n91, l48);
          n91.canvas.appendChild(n91.node);
        } else if (o42.updateNode != null) {
          o42.updateNode(n91, n91.node);
        }
        F2(n91.node, l48);
      }
    } }]);
    return m44;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/overlay/arrow-overlay.js
  var y19 = 20;
  var f26 = 20;
  var p26 = function(l48) {
    a(p49, l48);
    var s40 = s(p49);
    function p49(t61, i45, a48) {
      var l49;
      t(this, p49);
      l49 = s40.call(this, t61, i45, a48);
      l49.instance = t61;
      l49.component = i45;
      o(l(l49), "width", void 0);
      o(l(l49), "length", void 0);
      o(l(l49), "foldback", void 0);
      o(l(l49), "direction", void 0);
      o(l(l49), "location", 0.5);
      o(l(l49), "paintStyle", void 0);
      o(l(l49), "type", p49.type);
      o(l(l49), "cachedDimensions", void 0);
      a48 = a48 || {};
      l49.width = a48.width || y19;
      l49.length = a48.length || f26;
      l49.direction = (a48.direction || 1) < 0 ? -1 : 1;
      l49.foldback = a48.foldback || 0.623;
      l49.paintStyle = a48.paintStyle || { strokeWidth: 1 };
      l49.location = a48.location == null ? l49.location : Array.isArray(a48.location) ? a48.location[0] : a48.location;
      return l49;
    }
    n(p49, [{ key: "draw", value: function t61(i45, o42, e78) {
      var n91, a48, l49, s41, y34;
      if (this.location > 1 || this.location < 0) {
        var f45 = this.location < 0 ? 1 : 0;
        n91 = y15(i45, f45, this.location, false);
        a48 = y15(i45, f45, this.location - this.direction * this.length / 2, false);
        l49 = d11(n91, a48, this.length);
      } else if (this.location === 1) {
        n91 = c23(i45, this.location);
        a48 = y15(i45, this.location, -this.length);
        l49 = d11(n91, a48, this.length);
        if (this.direction === -1) {
          var p50 = l49;
          l49 = n91;
          n91 = p50;
        }
      } else if (this.location === 0) {
        l49 = c23(i45, this.location);
        a48 = y15(i45, this.location, this.length);
        n91 = d11(l49, a48, this.length);
        if (this.direction === -1) {
          var m44 = l49;
          l49 = n91;
          n91 = m44;
        }
      } else {
        n91 = y15(i45, this.location, this.direction * this.length / 2);
        a48 = c23(i45, this.location);
        l49 = d11(n91, a48, this.length);
      }
      s41 = m11(n91, l49, this.width);
      y34 = d11(n91, l49, this.foldback * this.length);
      var v41 = { hxy: n91, tail: s41, cxy: y34 }, u52 = this.paintStyle.stroke || o42.stroke, g31 = this.paintStyle.fill || o42.stroke, k20 = this.paintStyle.strokeWidth || o42.strokeWidth;
      return { component: i45, d: v41, "stroke-width": k20, stroke: u52, fill: g31, xmin: Math.min(n91.x, s41[0].x, s41[1].x), xmax: Math.max(n91.x, s41[0].x, s41[1].x), ymin: Math.min(n91.y, s41[0].y, s41[1].y), ymax: Math.max(n91.y, s41[0].y, s41[1].y) };
    } }, { key: "updateFrom", value: function t61(i45) {
    } }]);
    return p49;
  }(c18);
  o(p26, "type", "Arrow");
  function m27(t61) {
    return t61.type === p26.type;
  }
  r18.register(p26.type, p26);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/overlay/diamond-overlay.js
  var n51 = function(o42) {
    a(n91, o42);
    var s40 = s(n91);
    function n91(r53, e78, o43) {
      var l48;
      t(this, n91);
      l48 = s40.call(this, r53, e78, o43);
      l48.instance = r53;
      o(l(l48), "type", n91.type);
      l48.length = l48.length / 2;
      l48.foldback = 2;
      return l48;
    }
    return n91;
  }(p26);
  o(n51, "type", "Diamond");
  function l24(r53) {
    return r53.type === n51.type;
  }
  r18.register(n51.type, n51);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/overlay/plain-arrow-overlay.js
  var l25 = function(o42) {
    a(l48, o42);
    var s40 = s(l48);
    function l48(r53, e78, o43) {
      var n91;
      t(this, l48);
      n91 = s40.call(this, r53, e78, o43);
      n91.instance = r53;
      o(l(n91), "type", l48.type);
      n91.foldback = 1;
      return n91;
    }
    return l48;
  }(p26);
  o(l25, "type", "PlainArrow");
  function n52(r53) {
    return r53.type === l25.type;
  }
  r18.register("PlainArrow", l25);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/overlay/custom-overlay.js
  var c33 = "Custom";
  var l26 = function(i45) {
    a(l48, i45);
    var n91 = s(l48);
    function l48(e78, r53, o42) {
      var i46;
      t(this, l48);
      i46 = n91.call(this, e78, r53, o42);
      i46.instance = e78;
      i46.component = r53;
      o(l(i46), "create", void 0);
      o(l(i46), "type", c33);
      i46.create = o42.create;
      return i46;
    }
    n(l48, [{ key: "updateFrom", value: function e78(r53) {
    } }]);
    return l48;
  }(c18);
  o(l26, "type", c33);
  function p27(e78) {
    return e78.type === l26.type;
  }
  r18.register(l26.type, l26);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/router/router.js
  function e63() {
    return { c: /* @__PURE__ */ new Set(), e: /* @__PURE__ */ new Set() };
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/group/group.js
  var v27 = function r33(n91, i45, o42) {
    t(this, r33);
    this.instance = n91;
    this.el = i45;
    this.id = o42;
    o(this, "uiGroup", void 0);
  };
  var f27 = function(f45) {
    a(g31, f45);
    var m44 = s(g31);
    function g31(r53, n91, o42, s40) {
      var l48;
      t(this, g31);
      l48 = m44.call(this, r53, o42, n91.id);
      l48.instance = r53;
      l48.group = n91;
      o(l(l48), "children", []);
      o(l(l48), "collapsed", false);
      o(l(l48), "elementsDraggable", void 0);
      o(l(l48), "droppable", void 0);
      o(l(l48), "enabled", void 0);
      o(l(l48), "orphan", void 0);
      o(l(l48), "constrain", void 0);
      o(l(l48), "proxied", void 0);
      o(l(l48), "ghost", void 0);
      o(l(l48), "revert", void 0);
      o(l(l48), "prune", void 0);
      o(l(l48), "dropOverride", void 0);
      o(l(l48), "elastic", void 0);
      o(l(l48), "contentArea", void 0);
      o(l(l48), "anchor", void 0);
      o(l(l48), "endpoint", void 0);
      o(l(l48), "connections", { source: [], target: [], internal: [] });
      o(l(l48), "manager", void 0);
      var u52 = l48.el;
      l48.contentArea = l48.instance.getGroupContentArea(l(l48));
      u52._isJsPlumbGroup = true;
      u52._jsPlumbGroup = l(l48);
      l48.orphan = s40.orphan === true;
      l48.revert = l48.orphan === true ? false : s40.revert !== false;
      l48.droppable = s40.droppable !== false;
      l48.ghost = s40.ghost === true;
      l48.enabled = s40.enabled !== false;
      l48.elastic = s40.elastic === true;
      l48.elementsDraggable = s40.elementsDraggable !== false;
      l48.prune = l48.orphan !== true && s40.prune === true;
      l48.constrain = l48.ghost || s40.constrain === true;
      l48.proxied = s40.proxied !== false;
      l48.id = n91.id;
      l48.dropOverride = s40.dropOverride === true;
      l48.anchor = s40.anchor;
      l48.endpoint = s40.endpoint;
      l48.anchor = s40.anchor;
      r53.setAttribute(o42, d5, "");
      return l48;
    }
    n(g31, [{ key: "overrideDrop", value: function e78(t61, r53) {
      return this.dropOverride && (this.revert || this.prune || this.orphan);
    } }, { key: "getAnchor", value: function e78(t61, r53) {
      return this.anchor || "Continuous";
    } }, { key: "getEndpoint", value: function e78(t61, r53) {
      return this.endpoint || { type: u23.type, options: { radius: 10 } };
    } }, { key: "add", value: function e78(t61, r53, n91) {
      var i45 = this.contentArea;
      var o42 = t61;
      if (o42._jsPlumbParentGroup != null) {
        if (o42._jsPlumbParentGroup === this) {
          return;
        } else {
          o42._jsPlumbParentGroup.remove(t61, true, n91, false);
        }
      }
      o42._jsPlumbParentGroup = this;
      this.children.push(new v27(this.instance, t61, r53));
      this.instance._appendElement(o42, i45);
      this.manager._updateConnectionsForGroup(this);
    } }, { key: "resolveNode", value: function e78(t61) {
      return t61 == null ? null : S2(this.children, function(e79) {
        return e79.el === t61;
      });
    } }, { key: "remove", value: function e78(t61, r53, n91, i45, o42) {
      var s40 = this.resolveNode(t61);
      if (s40 != null) {
        this._doRemove(s40, r53, n91, i45, o42);
      }
    } }, { key: "_doRemove", value: function e78(t61, r53, n91, i45, o42) {
      var s40 = t61.el;
      delete s40._jsPlumbParentGroup;
      E(this.children, function(e79) {
        return e79 === t61;
      });
      if (r53) {
        try {
          this.instance._removeElement(s40);
        } catch (e79) {
          Q("Could not remove element from Group " + e79);
        }
      }
      if (!n91) {
        var a48 = { group: this, el: s40 };
        if (o42) {
          a48.targetGroup = o42;
        }
        this.instance.fire(m16, a48);
      }
      if (!i45) {
        this.manager._updateConnectionsForGroup(this);
      }
    } }, { key: "removeAll", value: function e78(t61, r53) {
      for (var n91 = 0, i45 = this.children.length; n91 < i45; n91++) {
        var o42 = this.children[0];
        this._doRemove(o42, t61, r53, true);
        this.instance.unmanage(o42.el, true);
      }
      this.children.length = 0;
      this.manager._updateConnectionsForGroup(this);
    } }, { key: "orphanAll", value: function e78() {
      var t61 = {};
      for (var r53 = 0; r53 < this.children.length; r53++) {
        var n91 = this.manager.orphan(this.children[r53].el, false);
        t61[n91.id] = n91.pos;
      }
      this.children.length = 0;
      return t61;
    } }, { key: "addGroup", value: function e78(t61) {
      if (this.instance.allowNestedGroups && t61 !== this) {
        if (this.instance.groupManager.isAncestor(this, t61)) {
          return false;
        }
        if (t61.uiGroup != null) {
          t61.uiGroup.removeGroup(t61);
        }
        var r53 = this.instance.getManagedElements()[t61.id];
        r53.group = this.id;
        var n91 = this.instance.getOffsetRelativeToRoot(t61.el);
        var i45 = this.collapsed ? this.instance.getOffsetRelativeToRoot(this.el) : this.instance.getOffsetRelativeToRoot(this.contentArea);
        t61.el._jsPlumbParentGroup = this;
        this.children.push(t61);
        this.instance._appendElementToGroup(this, t61.el);
        t61.uiGroup = this;
        var o42 = { x: n91.x - i45.x, y: n91.y - i45.y };
        this.instance.setPosition(t61.el, o42);
        this.instance.fire(s13, { parent: this, child: t61 });
        return true;
      } else {
        return false;
      }
    } }, { key: "removeGroup", value: function e78(t61) {
      if (t61.uiGroup === this) {
        var r53 = t61.el;
        var n91 = this.contentArea;
        if (n91 === r53.parentNode) {
          this.instance._removeElement(t61.el);
        }
        var i45 = this.instance.getId(t61.el);
        var o42 = this.instance.getManagedElements()[i45];
        if (o42) {
          delete o42.group;
        }
        this.children = this.children.filter(function(e79) {
          return e79.id !== t61.id;
        });
        delete t61.uiGroup;
        delete r53._jsPlumbParentGroup;
        this.instance.fire(h16, { parent: this, child: t61 });
      }
    } }, { key: "getGroups", value: function e78() {
      return this.children.filter(function(e79) {
        return e79.constructor === g31;
      });
    } }, { key: "getNodes", value: function e78() {
      return this.children.filter(function(e79) {
        return e79.constructor === v27;
      });
    } }, { key: "collapseParent", get: function e78() {
      var t61 = null;
      if (this.uiGroup == null) {
        return null;
      } else {
        var r53 = this.uiGroup;
        while (r53 != null) {
          if (r53.collapsed) {
            t61 = r53;
          }
          r53 = r53.uiGroup;
        }
        return t61;
      }
    } }]);
    return g31;
  }(v27);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/group/group-manager.js
  var M12 = function() {
    function M20(e78) {
      var o42 = this;
      t(this, M20);
      this.instance = e78;
      o(this, "groupMap", {});
      o(this, "_connectionSourceMap", {});
      o(this, "_connectionTargetMap", {});
      e78.bind(n10, function(e79) {
        var n91 = o42.getGroupFor(e79.source);
        var t61 = o42.getGroupFor(e79.target);
        if (n91 != null && t61 != null && n91 === t61) {
          o42._connectionSourceMap[e79.connection.id] = n91;
          o42._connectionTargetMap[e79.connection.id] = n91;
          F(n91.connections.internal, e79.connection);
        } else {
          if (n91 != null) {
            if (e79.target._jsPlumbGroup === n91) {
              F(n91.connections.internal, e79.connection);
            } else {
              F(n91.connections.source, e79.connection);
            }
            o42._connectionSourceMap[e79.connection.id] = n91;
          }
          if (t61 != null) {
            if (e79.source._jsPlumbGroup === t61) {
              F(t61.connections.internal, e79.connection);
            } else {
              F(t61.connections.target, e79.connection);
            }
            o42._connectionTargetMap[e79.connection.id] = t61;
          }
        }
      });
      e78.bind(c15, function(e79) {
        o42._cleanupDetachedConnection(e79.connection);
      });
      e78.bind(o16, function(e79) {
        var n91 = e79.originalEndpoint.element, t61 = o42.getGroupFor(n91), i45 = e79.connection.endpoints[e79.index], r53 = i45.element, a48 = o42.getGroupFor(r53), s40 = e79.index === 0 ? o42._connectionSourceMap : o42._connectionTargetMap, c47 = e79.index === 0 ? o42._connectionTargetMap : o42._connectionSourceMap;
        if (a48 != null) {
          s40[e79.connection.id] = a48;
          if (e79.connection.source === e79.connection.target) {
            c47[e79.connection.id] = a48;
          }
        } else {
          delete s40[e79.connection.id];
          if (e79.connection.source === e79.connection.target) {
            delete c47[e79.connection.id];
          }
        }
        if (t61 != null) {
          o42._updateConnectionsForGroup(t61);
        }
        if (a48 != null) {
          o42._updateConnectionsForGroup(a48);
        }
      });
    }
    n(M20, [{ key: "_cleanupDetachedConnection", value: function e78(n91) {
      n91.proxies.length = 0;
      var t61 = this._connectionSourceMap[n91.id], o42;
      if (t61 != null) {
        o42 = function e79(t62) {
          return t62.id === n91.id;
        };
        E(t61.connections.source, o42);
        E(t61.connections.target, o42);
        E(t61.connections.internal, o42);
        delete this._connectionSourceMap[n91.id];
      }
      t61 = this._connectionTargetMap[n91.id];
      if (t61 != null) {
        o42 = function e79(t62) {
          return t62.id === n91.id;
        };
        E(t61.connections.source, o42);
        E(t61.connections.target, o42);
        E(t61.connections.internal, o42);
        delete this._connectionTargetMap[n91.id];
      }
    } }, { key: "addGroup", value: function e78(n91, t61) {
      var o42 = t61.el;
      if (this.groupMap[n91.id] != null) {
        throw new Error("cannot create Group [" + n91.id + "]; a Group with that ID exists");
      }
      if (o42._isJsPlumbGroup != null) {
        throw new Error("cannot create Group [" + n91.id + "]; the given element is already a Group");
      }
      var r53 = new f27(this.instance, n91, t61.el, t61);
      this.groupMap[r53.id] = r53;
      if (t61.collapsed) {
        this.collapseGroup(r53);
      }
      this.instance.manage(r53.el, n91.id);
      this.instance.addClass(r53.el, l20);
      r53.manager = this;
      this._updateConnectionsForGroup(r53);
      this.instance.fire(t7, { group: r53 });
      return r53;
    } }, { key: "getGroup", value: function e78(n91) {
      var t61 = n91;
      if (l2(n91)) {
        t61 = this.groupMap[n91];
        if (t61 == null) {
          throw new Error("No such group [" + n91 + "]");
        }
      }
      return t61;
    } }, { key: "getGroupFor", value: function e78(n91) {
      var t61 = n91;
      var o42 = this.instance.getContainer();
      var i45 = false, r53 = null;
      while (!i45) {
        if (t61 == null || t61 === o42) {
          i45 = true;
        } else {
          if (t61._jsPlumbParentGroup) {
            r53 = t61._jsPlumbParentGroup;
            i45 = true;
          } else {
            t61 = t61.parentNode;
          }
        }
      }
      return r53;
    } }, { key: "getGroups", value: function e78() {
      var n91 = [];
      for (var t61 in this.groupMap) {
        n91.push(this.groupMap[t61]);
      }
      return n91;
    } }, { key: "removeGroup", value: function e78(n91, t61, o42, i45) {
      var r53 = this;
      var a48 = this.getGroup(n91);
      this.expandGroup(a48, true);
      var s40 = {};
      j2(a48.children, function(e79) {
        var n92 = r53.instance.getManagedElements()[r53.instance.getId(e79.el)];
        if (n92) {
          delete n92.group;
        }
      });
      if (t61) {
        j2(a48.getGroups(), function(e79) {
          return r53.removeGroup(e79, t61, o42);
        });
        a48.removeAll(o42, i45);
      } else {
        if (a48.uiGroup) {
          j2(a48.children, function(e79) {
            return a48.uiGroup.add(e79.el, e79.id);
          });
        }
        s40 = a48.orphanAll();
      }
      if (a48.uiGroup) {
        a48.uiGroup.removeGroup(a48);
      }
      this.instance.unmanage(a48.el, true);
      delete this.groupMap[a48.id];
      this.instance.fire(u16, { group: a48 });
      return s40;
    } }, { key: "removeAllGroups", value: function e78(n91, t61, o42) {
      for (var i45 in this.groupMap) {
        this.removeGroup(this.groupMap[i45], n91, t61, o42);
      }
    } }, { key: "forEach", value: function e78(n91) {
      for (var t61 in this.groupMap) {
        n91(this.groupMap[t61]);
      }
    } }, { key: "orphan", value: function e78(n91, t61) {
      var o42 = n91;
      if (o42._jsPlumbParentGroup) {
        var i45 = o42._jsPlumbParentGroup;
        var r53 = this.instance.getId(o42);
        var a48 = this.instance.getOffset(n91);
        if (t61 !== true && i45.uiGroup) {
          this.instance._appendElementToGroup(i45.uiGroup, n91);
        } else {
          this.instance._appendElementToContainer(n91);
        }
        this.instance.setPosition(n91, a48);
        delete o42._jsPlumbParentGroup;
        return { id: r53, pos: a48 };
      }
    } }, { key: "_updateConnectionsForGroup", value: function e78(n91) {
      var t61 = this;
      n91.connections.source.length = 0;
      n91.connections.target.length = 0;
      n91.connections.internal.length = 0;
      var o42 = n91.children.slice().map(function(e79) {
        return e79.el;
      });
      var i45 = [];
      j2(o42, function(e79) {
        Array.prototype.push.apply(i45, t61.instance.getSelector(e79, y4));
      });
      Array.prototype.push.apply(o42, i45);
      if (o42.length > 0) {
        var r53 = this.instance.getConnections({ source: o42, scope: d9 }, true);
        var a48 = this.instance.getConnections({ target: o42, scope: d9 }, true);
        var s40 = {};
        var c47, u52;
        var l48 = function e79(o43) {
          for (var i46 = 0; i46 < o43.length; i46++) {
            if (s40[o43[i46].id]) {
              continue;
            }
            s40[o43[i46].id] = true;
            c47 = t61.getGroupFor(o43[i46].source);
            u52 = t61.getGroupFor(o43[i46].target);
            if (o43[i46].source === n91.el && u52 === n91 || o43[i46].target === n91.el && c47 === n91) {
              n91.connections.internal.push(o43[i46]);
            } else if (c47 === n91) {
              if (u52 !== n91) {
                n91.connections.source.push(o43[i46]);
              } else {
                n91.connections.internal.push(o43[i46]);
              }
              t61._connectionSourceMap[o43[i46].id] = n91;
            } else if (u52 === n91) {
              n91.connections.target.push(o43[i46]);
              t61._connectionTargetMap[o43[i46].id] = n91;
            }
          }
        };
        l48(r53);
        l48(a48);
      }
    } }, { key: "_collapseConnection", value: function e78(n91, t61, o42) {
      var i45 = n91.endpoints[t61 === 0 ? 1 : 0].element;
      if (i45._jsPlumbParentGroup && !i45._jsPlumbParentGroup.proxied && i45._jsPlumbParentGroup.collapsed) {
        return false;
      }
      var r53 = n91.endpoints[0].element, a48 = r53._jsPlumbParentGroup, s40 = a48 != null ? a48.collapseParent || a48 : null, c47 = n91.endpoints[1].element, u52 = c47._jsPlumbParentGroup, l48 = u52 != null ? u52.collapseParent || u52 : null;
      if (s40 == null || l48 == null || s40.id !== l48.id) {
        var p49 = o42.el;
        this.instance.getId(p49);
        this.instance.proxyConnection(n91, t61, p49, function(e79, n92) {
          return o42.getEndpoint(e79, n92);
        }, function(e79, n92) {
          return o42.getAnchor(e79, n92);
        });
        return true;
      } else {
        return false;
      }
    } }, { key: "_expandConnection", value: function e78(n91, t61, o42) {
      this.instance.unproxyConnection(n91, t61);
    } }, { key: "isElementDescendant", value: function e78(n91, t61) {
      var o42 = this.instance.getContainer();
      var i45 = false;
      while (!i45) {
        if (n91 == null || n91 === o42) {
          return false;
        } else {
          if (n91 === t61) {
            return true;
          } else {
            n91 = n91.parentNode;
          }
        }
      }
    } }, { key: "collapseGroup", value: function e78(n91) {
      var t61 = this;
      var o42 = this.getGroup(n91);
      if (o42 == null || o42.collapsed) {
        return;
      }
      var i45 = o42.el;
      if (o42.collapseParent == null) {
        this.instance.setGroupVisible(o42, false);
        o42.collapsed = true;
        this.instance.removeClass(i45, l20);
        this.instance.addClass(i45, p24);
        if (o42.proxied) {
          var r53 = /* @__PURE__ */ new Set();
          var a48 = function e79(n92, i46) {
            for (var a49 = 0; a49 < n92.length; a49++) {
              var s40 = n92[a49];
              if (t61._collapseConnection(s40, i46, o42) === true) {
                r53.add(s40.id);
              }
            }
          };
          a48(o42.connections.source, 0);
          a48(o42.connections.target, 1);
          j2(o42.getGroups(), function(e79) {
            t61.cascadeCollapse(o42, e79, r53);
          });
        }
        this.instance.revalidate(i45);
        this.repaintGroup(o42);
        this.instance.fire(p15, { group: o42 });
      } else {
        o42.collapsed = true;
        this.instance.removeClass(i45, l20);
        this.instance.addClass(i45, p24);
      }
    } }, { key: "cascadeCollapse", value: function e78(n91, t61, o42) {
      var i45 = this;
      if (n91.proxied) {
        var r53 = function e79(t62, r54) {
          for (var a48 = 0; a48 < t62.length; a48++) {
            var s40 = t62[a48];
            if (!o42.has(s40.id)) {
              if (i45._collapseConnection(s40, r54, n91) === true) {
                o42.add(s40.id);
              }
            }
          }
        };
        r53(t61.connections.source, 0);
        r53(t61.connections.target, 1);
      }
      j2(t61.getGroups(), function(e79) {
        i45.cascadeCollapse(n91, e79, o42);
      });
    } }, { key: "expandGroup", value: function e78(n91, t61) {
      var o42 = this;
      var i45 = this.getGroup(n91);
      if (i45 == null) {
        return;
      }
      var r53 = i45.el;
      if (i45.collapseParent == null) {
        this.instance.setGroupVisible(i45, true);
        i45.collapsed = false;
        this.instance.addClass(r53, l20);
        this.instance.removeClass(r53, p24);
        if (i45.proxied) {
          var a48 = function e79(n92, t62) {
            for (var r54 = 0; r54 < n92.length; r54++) {
              var a49 = n92[r54];
              o42._expandConnection(a49, t62, i45);
            }
          };
          a48(i45.connections.source, 0);
          a48(i45.connections.target, 1);
          var s40 = function e79(n92, t62) {
            if (t62 || n92.collapsed) {
              var i46 = function e80(t63, i47) {
                for (var r54 = 0; r54 < t63.length; r54++) {
                  var a49 = t63[r54];
                  o42._collapseConnection(a49, i47, n92.collapseParent || n92);
                }
              };
              i46(n92.connections.source, 0);
              i46(n92.connections.target, 1);
              j2(n92.connections.internal, function(e80) {
                return B8.setVisible(e80, false);
              });
              j2(n92.getGroups(), function(n93) {
                return e79(n93, true);
              });
            } else {
              o42.expandGroup(n92, true);
            }
          };
          j2(i45.getGroups(), s40);
        }
        this.instance.revalidate(r53);
        this.repaintGroup(i45);
        if (!t61) {
          this.instance.fire(i12, { group: i45 });
        }
      } else {
        i45.collapsed = false;
        this.instance.addClass(r53, l20);
        this.instance.removeClass(r53, p24);
      }
    } }, { key: "toggleGroup", value: function e78(n91) {
      n91 = this.getGroup(n91);
      if (n91 != null) {
        if (n91.collapsed) {
          this.expandGroup(n91);
        } else {
          this.collapseGroup(n91);
        }
      }
    } }, { key: "repaintGroup", value: function e78(n91) {
      var t61 = this.getGroup(n91);
      var o42 = t61.children;
      for (var i45 = 0; i45 < o42.length; i45++) {
        this.instance.revalidate(o42[i45].el);
      }
    } }, { key: "addToGroup", value: function e78(n91, t61) {
      var o42 = this;
      var i45 = this.getGroup(n91);
      if (i45) {
        var r53 = i45.el;
        var a48 = function e79(n92) {
          var a49 = n92;
          var s41 = a49._isJsPlumbGroup != null, c48 = a49._jsPlumbGroup;
          var u53 = a49._jsPlumbParentGroup;
          if (u53 !== i45) {
            var l48 = o42.instance.getId(n92);
            var p49 = o42.instance.manage(n92);
            var d32 = o42.instance.getOffset(n92);
            var v41 = i45.collapsed ? o42.instance.getOffsetRelativeToRoot(r53) : o42.instance.getOffset(i45.contentArea);
            p49.group = i45.id;
            if (u53 != null) {
              u53.remove(n92, false, t61, false, i45);
              o42._updateConnectionsForGroup(u53);
            }
            if (s41) {
              i45.addGroup(c48);
            } else {
              i45.add(n92, l48, t61);
            }
            var h35 = function e80(n93, t62) {
              var r54 = t62 === 0 ? 1 : 0;
              n93.each(function(e81) {
                B8.setVisible(e81, false);
                if (e81.endpoints[r54].element._jsPlumbGroup === i45) {
                  m17.setVisible(e81.endpoints[r54], false);
                  o42._expandConnection(e81, r54, i45);
                } else {
                  m17.setVisible(e81.endpoints[t62], false);
                  o42._collapseConnection(e81, t62, i45);
                }
              });
            };
            if (i45.collapsed) {
              h35(o42.instance.select({ source: n92 }), 0);
              h35(o42.instance.select({ target: n92 }), 1);
            }
            var g31 = { x: d32.x - v41.x, y: d32.y - v41.y };
            o42._updateConnectionsForGroup(i45);
            o42.instance.revalidate(n92);
            if (!t61) {
              var G17 = { group: i45, el: n92, pos: g31 };
              if (u53) {
                G17.sourceGroup = u53;
              }
              o42.instance.fire(g11, G17);
            }
          }
        };
        for (var s40 = arguments.length, c47 = new Array(s40 > 2 ? s40 - 2 : 0), u52 = 2; u52 < s40; u52++) {
          c47[u52 - 2] = arguments[u52];
        }
        j2(c47, a48);
      }
    } }, { key: "removeFromGroup", value: function e78(n91, t61) {
      var o42 = this;
      var i45 = this.getGroup(n91);
      if (i45) {
        var r53 = function e79(n92) {
          if (i45.collapsed) {
            var r54 = function e80(t62, r55) {
              for (var a50 = 0; a50 < t62.length; a50++) {
                var s41 = t62[a50];
                if (s41.proxies) {
                  for (var c48 = 0; c48 < s41.proxies.length; c48++) {
                    if (s41.proxies[c48] != null) {
                      var u52 = s41.proxies[c48].originalEp.element;
                      if (u52 === n92 || o42.isElementDescendant(u52, n92)) {
                        o42._expandConnection(s41, r55, i45);
                      }
                    }
                  }
                }
              }
            };
            r54(i45.connections.source.slice(), 0);
            r54(i45.connections.target.slice(), 1);
          }
          i45.remove(n92, null, t61);
          var a49 = o42.instance.getManagedElements()[o42.instance.getId(n92)];
          if (a49) {
            delete a49.group;
          }
        };
        for (var a48 = arguments.length, s40 = new Array(a48 > 2 ? a48 - 2 : 0), c47 = 2; c47 < a48; c47++) {
          s40[c47 - 2] = arguments[c47];
        }
        j2(s40, r53);
      }
    } }, { key: "getAncestors", value: function e78(n91) {
      var t61 = [];
      var o42 = n91.uiGroup;
      while (o42 != null) {
        t61.push(o42);
        o42 = o42.uiGroup;
      }
      return t61;
    } }, { key: "isAncestor", value: function e78(n91, t61) {
      if (n91 == null || t61 == null) {
        return false;
      }
      return this.getAncestors(n91).indexOf(t61) !== -1;
    } }, { key: "getDescendants", value: function e78(n91) {
      var t61 = [];
      var i45 = function e79(n92) {
        var i46 = n92.getGroups();
        t61.push.apply(t61, h(i46));
        j2(i46, e79);
      };
      i45(n91);
      return t61;
    } }, { key: "isDescendant", value: function e78(n91, t61) {
      if (n91 == null || t61 == null) {
        return false;
      }
      return this.getDescendants(t61).indexOf(n91) !== -1;
    } }, { key: "reset", value: function e78() {
      this._connectionSourceMap = {};
      this._connectionTargetMap = {};
      this.groupMap = {};
    } }]);
    return M20;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/selection/common.js
  var m28 = function() {
    function m44(e78, n91) {
      t(this, m44);
      this.instance = e78;
      this.entries = n91;
    }
    n(m44, [{ key: "length", get: function e78() {
      return this.entries.length;
    } }, { key: "each", value: function e78(t61) {
      j2(this.entries, function(e79) {
        return t61(e79);
      });
      return this;
    } }, { key: "get", value: function e78(t61) {
      return this.entries[t61];
    } }, { key: "addClass", value: function e78(t61, r53) {
      this.each(function(e79) {
        if (_5(e79)) {
          B8.addClass(e79, t61, r53);
        } else if (C9(e79)) {
          m17.addClass(e79, t61, r53);
        }
      });
      return this;
    } }, { key: "removeClass", value: function e78(t61, r53) {
      this.each(function(e79) {
        if (_5(e79)) {
          B8.removeClass(e79, t61, r53);
        } else if (C9(e79)) {
          m17.removeClass(e79, t61, r53);
        }
      });
      return this;
    } }, { key: "removeAllOverlays", value: function e78() {
      this.each(function(e79) {
        if (_5(e79)) {
          V8(e79);
        }
      });
      return this;
    } }, { key: "setLabel", value: function e78(t61) {
      this.each(function(e79) {
        if (_5(e79)) {
          w13(e79, t61);
        }
      });
      return this;
    } }, { key: "clear", value: function e78() {
      this.entries.length = 0;
      return this;
    } }, { key: "map", value: function e78(t61) {
      var n91 = [];
      this.each(function(e79) {
        return n91.push(t61(e79));
      });
      return n91;
    } }, { key: "addOverlay", value: function e78(t61) {
      this.each(function(e79) {
        if (_5(e79)) {
          P9(e79, t61);
        }
      });
      return this;
    } }, { key: "removeOverlay", value: function e78(t61) {
      this.each(function(e79) {
        if (_5(e79)) {
          k12(e79, t61);
        }
      });
      return this;
    } }, { key: "removeOverlays", value: function e78() {
      this.each(function(e79) {
        if (_5(e79)) {
          A10(e79);
        }
      });
      return this;
    } }, { key: "showOverlay", value: function e78(t61) {
      this.each(function(e79) {
        if (_5(e79)) {
          _8(e79, t61);
        }
      });
      return this;
    } }, { key: "hideOverlay", value: function e78(t61) {
      this.each(function(e79) {
        if (_5(e79)) {
          I9(e79, t61);
        }
      });
      return this;
    } }, { key: "setPaintStyle", value: function e78(t61) {
      this.each(function(e79) {
        return D8.setPaintStyle(e79, t61);
      });
      return this;
    } }, { key: "setHoverPaintStyle", value: function e78(t61) {
      this.each(function(e79) {
        return D8.setHoverPaintStyle(e79, t61);
      });
      return this;
    } }, { key: "setParameter", value: function e78(t61, n91) {
      this.each(function(e79) {
        return e79.parameters[t61] = n91;
      });
      return this;
    } }, { key: "setParameters", value: function e78(t61) {
      this.each(function(e79) {
        return e79.parameters = t61;
      });
      return this;
    } }, { key: "setVisible", value: function e78(t61) {
      this.each(function(e79) {
        if (_5(e79)) {
          B8.setVisible(e79, t61);
        } else if (C9(e79)) {
          m17.setVisible(e79, t61);
        }
      });
      return this;
    } }, { key: "addType", value: function e78(t61) {
      this.each(function(e79) {
        return D8.addType(e79, t61);
      });
      return this;
    } }, { key: "toggleType", value: function e78(t61) {
      this.each(function(e79) {
        return D8.toggleType(e79, t61);
      });
      return this;
    } }, { key: "removeType", value: function e78(t61) {
      this.each(function(e79) {
        return D8.removeType(e79, t61);
      });
      return this;
    } }, { key: "setHover", value: function e78(t61) {
      var n91 = this;
      this.each(function(e79) {
        return n91.instance.setHover(e79, t61);
      });
      return this;
    } }]);
    return m44;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/selection/endpoint-selection.js
  var s29 = function(i45) {
    a(u52, i45);
    var s40 = s(u52);
    function u52() {
      t(this, u52);
      return s40.apply(this, arguments);
    }
    n(u52, [{ key: "setEnabled", value: function e78(t61) {
      this.each(function(e79) {
        return e79.enabled = t61;
      });
      return this;
    } }, { key: "setAnchor", value: function e78(t61) {
      this.each(function(e79) {
        return m17.setAnchor(e79, t61);
      });
      return this;
    } }, { key: "deleteEveryConnection", value: function e78() {
      this.each(function(e79) {
        return m17.deleteEveryConnection(e79);
      });
      return this;
    } }, { key: "deleteAll", value: function e78() {
      var t61 = this;
      this.each(function(e79) {
        return t61.instance.deleteEndpoint(e79);
      });
      this.clear();
      return this;
    } }]);
    return u52;
  }(m28);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/selection/connection-selection.js
  var c34 = function(i45) {
    a(o42, i45);
    var c47 = s(o42);
    function o42() {
      t(this, o42);
      return c47.apply(this, arguments);
    }
    n(o42, [{ key: "setDetachable", value: function t61(e78) {
      this.each(function(t62) {
        return t62.detachable = e78 === true;
      });
      return this;
    } }, { key: "setReattach", value: function t61(e78) {
      this.each(function(t62) {
        return t62.reattach = e78 === true;
      });
      return this;
    } }, { key: "setConnector", value: function t61(e78) {
      this.each(function(t62) {
        return B8._setConnector(t62, e78);
      });
      return this;
    } }, { key: "deleteAll", value: function t61() {
      var e78 = this;
      this.each(function(t62) {
        return e78.instance.deleteConnection(t62);
      });
      this.clear();
    } }, { key: "repaint", value: function t61() {
      var e78 = this;
      this.each(function(t62) {
        return e78.instance._paintConnection(t62);
      });
      return this;
    } }]);
    return o42;
  }(m28);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/viewport.js
  var h25 = function t35() {
    t(this, t35);
    o(this, "affectedElements", /* @__PURE__ */ new Set());
  };
  function c35() {
    return { x: 0, y: 0, w: 0, h: 0, r: 0, c: { x: 0, y: 0 }, x2: 0, y2: 0, t: { x: 0, y: 0, c: { x: 0, y: 0 }, w: 0, h: 0, r: 0, x2: 0, y2: 0, cr: 0, sr: 0 }, dirty: true };
  }
  function d24(t61, e78, n91, s40, i45) {
    var r53 = { x: t61 + n91 / 2, y: e78 + s40 / 2 }, l48 = Math.cos(i45 / 360 * Math.PI * 2), a48 = Math.sin(i45 / 360 * Math.PI * 2), u52 = function t62(e79, n92) {
      return { x: r53.x + Math.round((e79 - r53.x) * l48 - (n92 - r53.y) * a48), y: r53.y + Math.round((n92 - r53.y) * l48 - (e79 - r53.x) * a48) };
    };
    var o42 = u52(t61, e78), m44 = u52(t61 + n91, e78), h35 = u52(t61 + n91, e78 + s40), c47 = u52(t61, e78 + s40), d32 = u52(t61 + n91 / 2, e78 + s40 / 2);
    var y34 = Math.min(o42.x, m44.x, h35.x, c47.x), x27 = Math.max(o42.x, m44.x, h35.x, c47.x), f45 = Math.min(o42.y, m44.y, h35.y, c47.y), _17 = Math.max(o42.y, m44.y, h35.y, c47.y);
    return { x: y34, y: f45, w: x27 - y34, h: _17 - f45, c: d32, r: i45, x2: x27, y2: _17, cr: l48, sr: a48 };
  }
  var y20 = function t36(e78, n91) {
    var s40 = 0;
    if (n91[1] > e78[1]) {
      s40 = -1;
    } else if (n91[1] < e78[1]) {
      s40 = 1;
    }
    return s40;
  };
  var x16 = function t37(e78, n91) {
    return y20(e78, n91) * -1;
  };
  function f28(t61, e78, n91, s40) {
    V([t61, e78], n91, y20, s40);
  }
  function _10(t61, e78) {
    var n91 = O2(e78, function(e79) {
      return e79[0] === t61;
    });
    if (n91 > -1) {
      e78.splice(n91, 1);
    }
  }
  var E10 = function(l48) {
    a(o42, l48);
    var u52 = s(o42);
    function o42(t61) {
      var e78;
      t(this, o42);
      e78 = u52.call(this);
      e78.instance = t61;
      o(l(e78), "_currentTransaction", null);
      o(l(e78), "_sortedElements", { xmin: [], xmax: [], ymin: [], ymax: [] });
      o(l(e78), "_elementMap", /* @__PURE__ */ new Map());
      o(l(e78), "_transformedElementMap", /* @__PURE__ */ new Map());
      o(l(e78), "_bounds", { minx: 0, maxx: 0, miny: 0, maxy: 0 });
      return e78;
    }
    n(o42, [{ key: "_updateBounds", value: function t61(e78, n91, s40) {
      if (n91 != null) {
        _10(e78, this._sortedElements.xmin);
        _10(e78, this._sortedElements.xmax);
        _10(e78, this._sortedElements.ymin);
        _10(e78, this._sortedElements.ymax);
        f28(e78, n91.t.x, this._sortedElements.xmin, false);
        f28(e78, n91.t.x + n91.t.w, this._sortedElements.xmax, true);
        f28(e78, n91.t.y, this._sortedElements.ymin, false);
        f28(e78, n91.t.y + n91.t.h, this._sortedElements.ymax, true);
        if (s40 !== true) {
          this._recalculateBounds();
        }
      }
    } }, { key: "_recalculateBounds", value: function t61() {
      this._bounds.minx = this._sortedElements.xmin.length > 0 ? this._sortedElements.xmin[0][1] : 0;
      this._bounds.maxx = this._sortedElements.xmax.length > 0 ? this._sortedElements.xmax[0][1] : 0;
      this._bounds.miny = this._sortedElements.ymin.length > 0 ? this._sortedElements.ymin[0][1] : 0;
      this._bounds.maxy = this._sortedElements.ymax.length > 0 ? this._sortedElements.ymax[0][1] : 0;
    } }, { key: "recomputeBounds", value: function t61() {
      var e78 = this;
      this._sortedElements.xmin.length = 0;
      this._sortedElements.xmax.length = 0;
      this._sortedElements.ymin.length = 0;
      this._sortedElements.ymax.length = 0;
      this._elementMap.forEach(function(t62, n91) {
        e78._sortedElements.xmin.push([n91, t62.t.x]);
        e78._sortedElements.xmax.push([n91, t62.t.x + t62.t.w]);
        e78._sortedElements.ymin.push([n91, t62.t.y]);
        e78._sortedElements.ymax.push([n91, t62.t.y + t62.t.h]);
      });
      this._sortedElements.xmin.sort(y20);
      this._sortedElements.ymin.sort(y20);
      this._sortedElements.xmax.sort(x16);
      this._sortedElements.ymax.sort(x16);
      this._recalculateBounds();
    } }, { key: "_finaliseUpdate", value: function t61(e78, n91, s40) {
      n91.t = d24(n91.x, n91.y, n91.w, n91.h, n91.r);
      this._transformedElementMap.set(e78, n91.t);
      if (s40 !== true) {
        this._updateBounds(e78, n91, s40);
      }
    } }, { key: "shouldFireEvent", value: function t61(e78, n91, s40) {
      return true;
    } }, { key: "startTransaction", value: function t61() {
      if (this._currentTransaction != null) {
        throw new Error("Viewport: cannot start transaction; a transaction is currently active.");
      }
      this._currentTransaction = new h25();
    } }, { key: "endTransaction", value: function t61() {
      var e78 = this;
      if (this._currentTransaction != null) {
        this._currentTransaction.affectedElements.forEach(function(t62) {
          var n91 = e78.getPosition(t62);
          e78._finaliseUpdate(t62, n91, true);
        });
        this.recomputeBounds();
        this._currentTransaction = null;
      }
    } }, { key: "updateElements", value: function t61(e78) {
      var n91 = this;
      j2(e78, function(t62) {
        return n91.updateElement(t62.id, t62.x, t62.y, t62.width, t62.height, t62.rotation);
      });
    } }, { key: "updateElement", value: function t61(e78, n91, s40, i45, r53, l49, a48) {
      var u53 = f3(this._elementMap, e78, c35);
      u53.dirty = n91 == null && u53.x == null || s40 == null && u53.y == null || i45 == null && u53.w == null || r53 == null && u53.h == null;
      if (n91 != null) {
        u53.x = n91;
      }
      if (s40 != null) {
        u53.y = s40;
      }
      if (i45 != null) {
        u53.w = i45;
      }
      if (r53 != null) {
        u53.h = r53;
      }
      if (l49 != null) {
        u53.r = l49 || 0;
      }
      u53.c.x = u53.x + u53.w / 2;
      u53.c.y = u53.y + u53.h / 2;
      u53.x2 = u53.x + u53.w;
      u53.y2 = u53.y + u53.h;
      if (this._currentTransaction == null) {
        this._finaliseUpdate(e78, u53, a48);
      } else {
        this._currentTransaction.affectedElements.add(e78);
      }
      return u53;
    } }, { key: "refreshElement", value: function t61(e78, n91) {
      var s40 = this.instance.getManagedElements();
      var i45 = s40[e78] ? s40[e78].el : null;
      if (i45 != null) {
        var r53 = this.getSize(i45);
        var l49 = this.getOffset(i45);
        return this.updateElement(e78, l49.x, l49.y, r53.w, r53.h, null, n91);
      } else {
        return null;
      }
    } }, { key: "getSize", value: function t61(e78) {
      return this.instance.getSize(e78);
    } }, { key: "getOffset", value: function t61(e78) {
      return this.instance.getOffset(e78);
    } }, { key: "registerElement", value: function t61(e78, n91) {
      return this.updateElement(e78, 0, 0, 0, 0, 0, n91);
    } }, { key: "addElement", value: function t61(e78, n91, s40, i45, r53, l49) {
      return this.updateElement(e78, n91, s40, i45, r53, l49);
    } }, { key: "rotateElement", value: function t61(e78, n91) {
      var s40 = f3(this._elementMap, e78, c35);
      s40.r = n91 || 0;
      this._finaliseUpdate(e78, s40);
      return s40;
    } }, { key: "getBoundsWidth", value: function t61() {
      return this._bounds.maxx - this._bounds.minx;
    } }, { key: "getBoundsHeight", value: function t61() {
      return this._bounds.maxy - this._bounds.miny;
    } }, { key: "getX", value: function t61() {
      return this._bounds.minx;
    } }, { key: "getY", value: function t61() {
      return this._bounds.miny;
    } }, { key: "setSize", value: function t61(e78, n91, s40) {
      if (this._elementMap.has(e78)) {
        return this.updateElement(e78, null, null, n91, s40, null);
      }
    } }, { key: "setPosition", value: function t61(e78, n91, s40) {
      if (this._elementMap.has(e78)) {
        return this.updateElement(e78, n91, s40, null, null, null);
      }
    } }, { key: "reset", value: function t61() {
      this._sortedElements.xmin.length = 0;
      this._sortedElements.xmax.length = 0;
      this._sortedElements.ymin.length = 0;
      this._sortedElements.ymax.length = 0;
      this._elementMap.clear();
      this._transformedElementMap.clear();
      this._recalculateBounds();
    } }, { key: "remove", value: function t61(e78) {
      _10(e78, this._sortedElements.xmin);
      _10(e78, this._sortedElements.xmax);
      _10(e78, this._sortedElements.ymin);
      _10(e78, this._sortedElements.ymax);
      this._elementMap.delete(e78);
      this._transformedElementMap.delete(e78);
      this._recalculateBounds();
    } }, { key: "getPosition", value: function t61(e78) {
      return this._elementMap.get(e78);
    } }, { key: "getElements", value: function t61() {
      return this._elementMap;
    } }, { key: "isEmpty", value: function t61() {
      return this._elementMap.size === 0;
    } }]);
    return o42;
  }(a17);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/router/lightweight-router.js
  var P11;
  function F14(t61, n91, o42, e78, i45) {
    var r53 = o42 ? t61.w : t61.h;
    var a48 = o42 ? t61.h : t61.w;
    var c47 = [], s40 = r53 / (n91.length + 1);
    for (var u52 = 0; u52 < n91.length; u52++) {
      var h35 = (u52 + 1) * s40, l48 = e78 * a48;
      if (i45) {
        h35 = r53 - h35;
      }
      var f45 = o42 ? h35 : l48, d32 = t61.x + f45, p49 = f45 / t61.w;
      var v41 = o42 ? l48 : h35, y34 = t61.y + v41, m44 = v41 / t61.h;
      if (t61.r !== 0 && t61.r != null) {
        var _17 = q({ x: d32, y: y34 }, t61.c, t61.r);
        d32 = _17.x;
        y34 = _17.y;
      }
      c47.push({ x: d32, y: y34, xLoc: p49, yLoc: m44, c: n91[u52].c });
    }
    return c47;
  }
  function M13(t61, n91) {
    return n91.theta - t61.theta;
  }
  function j18(t61, n91) {
    var o42 = t61.theta < 0 ? -Math.PI - t61.theta : Math.PI - t61.theta, e78 = n91.theta < 0 ? -Math.PI - n91.theta : Math.PI - n91.theta;
    return o42 - e78;
  }
  var b19 = (P11 = {}, o(P11, o20, j18), o(P11, i17, M13), o(P11, e46, M13), o(P11, n16, j18), P11);
  function S14(t61) {
    return t61.isContinuous === true;
  }
  function O15(t61) {
    return t61.isContinuous === true;
  }
  function R10(t61) {
    return t61.locations.length > 1;
  }
  function Y9(t61) {
    return [t61.currentLocation, t61.locations[t61.currentLocation]];
  }
  var T8 = function() {
    function P18(n91) {
      var e78 = this;
      t(this, P18);
      this.instance = n91;
      o(this, "anchorLists", /* @__PURE__ */ new Map());
      o(this, "anchorLocations", /* @__PURE__ */ new Map());
      n91.bind(c15, function(t61) {
        if (t61.sourceEndpoint._anchor.isContinuous) {
          e78._removeEndpointFromAnchorLists(t61.sourceEndpoint);
        }
        if (t61.targetEndpoint._anchor.isContinuous) {
          e78._removeEndpointFromAnchorLists(t61.targetEndpoint);
        }
      });
      n91.bind(v15, function(t61) {
        e78._removeEndpointFromAnchorLists(t61);
      });
    }
    n(P18, [{ key: "getAnchorOrientation", value: function t61(n91) {
      var o42 = this.anchorLocations.get(n91.id);
      return o42 ? [o42.ox, o42.oy] : [0, 0];
    } }, { key: "_distance", value: function t61(n91, o42, e78, i45, r53, a48, c47) {
      var s40 = i45.x + n91.x * r53.w, u52 = i45.y + n91.y * r53.h;
      if (a48 != null && a48.length > 0) {
        var h35 = this.instance._applyRotations([s40, u52, 0, 0], a48);
        s40 = h35.x;
        u52 = h35.y;
      }
      return Math.sqrt(Math.pow(o42 - s40, 2) + Math.pow(e78 - u52, 2));
    } }, { key: "_anchorSelector", value: function t61(n91, o42, e78, i45, r53, a48, c47, s40) {
      var u52 = e78.x + i45.w / 2, h35 = e78.y + i45.h / 2;
      var l48 = -1, f45 = Infinity;
      for (var d32 = 0; d32 < c47.length; d32++) {
        var p49 = this._distance(c47[d32], u52, h35, n91, o42, r53, a48);
        if (p49 < f45) {
          l48 = d32 + 0;
          f45 = p49;
        }
      }
      return [l48, c47[l48]];
    } }, { key: "_floatingAnchorCompute", value: function t61(n91, o42) {
      var e78 = o42.xy;
      var i45 = { curX: e78.x + n91.size.w / 2, curY: e78.y + n91.size.h / 2, x: 0, y: 0, ox: 0, oy: 0 };
      return this._setComputedPosition(n91, i45);
    } }, { key: "_setComputedPosition", value: function t61(n91, o42, e78) {
      this.anchorLocations.set(n91.id, o42);
      n91.computedPosition = o42;
      if (e78) {
        n91.timestamp = e78;
      }
      return o42;
    } }, { key: "_computeSingleLocation", value: function t61(n91, o42, e78, i45) {
      var r53;
      var a48 = i45.rotation;
      var c47 = { curX: o42.x + n91.x * e78.w + n91.offx, curY: o42.y + n91.y * e78.h + n91.offy, x: n91.x, y: n91.y, ox: 0, oy: 0 };
      if (a48 != null && a48.length > 0) {
        var s40 = [n91.iox, n91.ioy], u52 = { x: c47.curX, y: c47.curY, cr: 0, sr: 0 };
        j2(a48, function(t62) {
          u52 = q(u52, t62.c, t62.r);
          var n92 = [Math.round(s40[0] * u52.cr - s40[1] * u52.sr), Math.round(s40[1] * u52.cr + s40[0] * u52.sr)];
          s40 = n92.slice();
        });
        n91.ox = s40[0];
        n91.oy = s40[1];
        r53 = { curX: u52.x, curY: u52.y, x: n91.x, y: n91.y, ox: s40[0], oy: s40[1] };
      } else {
        n91.ox = n91.iox;
        n91.oy = n91.ioy;
        r53 = u2({ ox: n91.iox, oy: n91.ioy }, c47);
      }
      return r53;
    } }, { key: "_singleAnchorCompute", value: function t61(n91, o42) {
      var i45 = o42.xy, r53 = o42.wh, a48 = o42.timestamp, c47 = this.anchorLocations.get(n91.id);
      if (c47 != null && a48 && a48 === n91.timestamp) {
        return c47;
      }
      var s40 = Y9(n91), u52 = b(s40, 2);
      u52[0];
      var h35 = u52[1];
      c47 = this._computeSingleLocation(h35, i45, r53, o42);
      return this._setComputedPosition(n91, c47, a48);
    } }, { key: "_setCurrentLocation", value: function t61(n91, o42, e78) {
      var i45 = n91.currentLocation !== o42;
      n91.currentLocation = o42;
      if (i45 && e78) {
        this.instance.fire(B, { connector: e78, connection: e78.connection, edge: e78.connection.edge, anchorIndex: o42, anchor: n91 });
      }
    } }, { key: "_defaultAnchorCompute", value: function t61(n91, o42) {
      var r53;
      if (n91.locations.length === 1) {
        return this._singleAnchorCompute(n91, o42);
      }
      var a48 = o42.xy, c47 = o42.wh, s40 = o42.txy, u52 = o42.twh;
      var h35 = Y9(n91), l48 = b(h35, 2), f45 = l48[0], d32 = l48[1];
      if (n91.locked || s40 == null || u52 == null) {
        r53 = this._computeSingleLocation(d32, a48, c47, o42);
      } else {
        var p49 = this._anchorSelector(a48, c47, s40, u52, o42.rotation, o42.tRotation, n91.locations, o42.otherAnchor), v41 = b(p49, 2), y34 = v41[0], g31 = v41[1];
        if (y34 !== f45) {
          n91.cssClass = g31.cls || n91.cssClass;
          m17._anchorLocationChanged(o42.element, n91);
          this._setCurrentLocation(n91, y34, o42.connection.connector);
        }
        r53 = this._computeSingleLocation(g31, a48, c47, o42);
      }
      return this._setComputedPosition(n91, r53, o42.timestamp);
    } }, { key: "_placeAnchors", value: function t61(n91, o42) {
      var e78 = this;
      var i45 = this.instance.viewport.getPosition(n91), u52 = function t62(o43, c47, s40, u53, h35, l48) {
        if (s40.length > 0) {
          var f45 = s40.sort(b19[o43]), d32 = o43 === i17 || o43 === o20, p49 = F14(i45, f45, u53, h35, d32);
          for (var v41 = 0; v41 < p49.length; v41++) {
            var y34 = p49[v41].c, g31 = y34.endpoints[0].elementId === n91, m44 = g31 ? y34.endpoints[0] : y34.endpoints[1];
            e78._setComputedPosition(m44._anchor, { curX: p49[v41].x, curY: p49[v41].y, x: p49[v41].xLoc, y: p49[v41].yLoc, ox: l48[0], oy: l48[1] });
          }
        }
      };
      u52(e46, i45, o42.bottom, true, 1, [0, 1]);
      u52(o20, i45, o42.top, true, 0, [0, -1]);
      u52(n16, i45, o42.left, false, 0, [-1, 0]);
      u52(i17, i45, o42.right, false, 1, [1, 0]);
    } }, { key: "_updateAnchorList", value: function t61(n91, o42, e78, i45, r53, a48, c47, s40, u52, h35, l48) {
      var f45 = i45.endpoints[c47], d32 = f45.id, p49 = [1, 0][c47], v41 = { theta: o42, order: e78, c: i45, b: r53, elId: a48, epId: d32 }, y34 = n91[u52], g31 = f45._continuousAnchorEdge ? n91[f45._continuousAnchorEdge] : null, m44;
      if (g31) {
        var x27 = O2(g31, function(t62) {
          return t62.epId === d32;
        });
        if (x27 !== -1) {
          g31.splice(x27, 1);
          for (var L18 = 0; L18 < g31.length; L18++) {
            m44 = g31[L18].c;
            if (m44.placeholder !== true) {
              h35.add(m44);
            }
            l48.add(g31[L18].c.endpoints[c47]);
            l48.add(g31[L18].c.endpoints[p49]);
          }
        }
      }
      for (var k20 = 0; k20 < y34.length; k20++) {
        m44 = y34[k20].c;
        if (m44.placeholder !== true) {
          h35.add(m44);
        }
        l48.add(y34[k20].c.endpoints[c47]);
        l48.add(y34[k20].c.endpoints[p49]);
      }
      {
        var A19 = s40 ? 0 : y34.length;
        y34.splice(A19, 0, v41);
      }
      f45._continuousAnchorEdge = u52;
    } }, { key: "_removeEndpointFromAnchorLists", value: function t61(n91) {
      var o42 = this.anchorLists.get(n91.elementId);
      var e78 = 0;
      (function(t62, n92) {
        if (t62) {
          var o43 = function t63(o44) {
            return o44.epId === n92;
          };
          E(t62.top, o43);
          E(t62.left, o43);
          E(t62.bottom, o43);
          E(t62.right, o43);
          e78 += t62.top.length;
          e78 += t62.left.length;
          e78 += t62.bottom.length;
          e78 += t62.right.length;
        }
      })(o42, n91.id);
      if (e78 === 0) {
        this.anchorLists.delete(n91.elementId);
      }
      this.anchorLocations.delete(n91._anchor.id);
    } }, { key: "computeAnchorLocation", value: function t61(n91, o42) {
      var e78;
      if (S14(n91)) {
        e78 = this.anchorLocations.get(n91.id) || { curX: 0, curY: 0, x: 0, y: 0, ox: 0, oy: 0 };
      } else if (O15(n91)) {
        e78 = this._floatingAnchorCompute(n91, o42);
      } else {
        e78 = this._defaultAnchorCompute(n91, o42);
      }
      n91.timestamp = o42.timestamp;
      return e78;
    } }, { key: "computePath", value: function t61(n91, o42) {
      var e78 = this.instance.viewport.getPosition(n91.sourceId), i45 = this.instance.viewport.getPosition(n91.targetId), r53 = n91.endpoints[0], a48 = n91.endpoints[1];
      var c47 = this.getEndpointLocation(r53, { xy: e78, wh: e78, element: r53, timestamp: o42, rotation: this.instance._getRotations(n91.sourceId) }), s40 = this.getEndpointLocation(a48, { xy: i45, wh: i45, element: a48, timestamp: o42, rotation: this.instance._getRotations(n91.targetId) });
      v20(n91.connector);
      b13(n91.connector, { sourcePos: c47, targetPos: s40, sourceEndpoint: n91.endpoints[0], targetEndpoint: n91.endpoints[1], strokeWidth: n91.paintStyleInUse.strokeWidth, sourceInfo: e78, targetInfo: i45 });
    } }, { key: "getEndpointLocation", value: function t61(n91, o42) {
      o42 = o42 || {};
      var e78 = n91._anchor;
      var i45 = this.anchorLocations.get(e78.id);
      if (i45 == null || o42.timestamp != null && e78.timestamp !== o42.timestamp) {
        i45 = this.computeAnchorLocation(e78, o42);
        this._setComputedPosition(e78, i45, o42.timestamp);
      }
      return i45;
    } }, { key: "getEndpointOrientation", value: function t61(n91) {
      return n91._anchor ? this.getAnchorOrientation(n91._anchor) : [0, 0];
    } }, { key: "setAnchorOrientation", value: function t61(n91, o42) {
      var e78 = this.anchorLocations.get(n91.id);
      if (e78 != null) {
        e78.ox = o42[0];
        e78.oy = o42[1];
      }
    } }, { key: "isDynamicAnchor", value: function t61(n91) {
      return n91._anchor ? !S14(n91._anchor) && n91._anchor.locations.length > 1 : false;
    } }, { key: "isFloating", value: function t61(n91) {
      return n91._anchor ? O15(n91._anchor) : false;
    } }, { key: "prepareAnchor", value: function t61(n91) {
      return _7(n91);
    } }, { key: "redraw", value: function t61(n91, o42, e78) {
      var i45 = this;
      var a48 = /* @__PURE__ */ new Set(), c47 = /* @__PURE__ */ new Set(), s40 = /* @__PURE__ */ new Set();
      if (!this.instance._suspendDrawing) {
        var u52 = this.instance.endpointsByElement[n91] || [];
        o42 = o42 || $();
        var h35 = {}, l48, f45;
        for (var d32 = 0; d32 < u52.length; d32++) {
          f45 = u52[d32];
          if (f45.visible === false) {
            continue;
          }
          c47.add(f45);
          l48 = f45._anchor;
          if (f45.connections.length === 0) {
            if (S14(l48)) {
              if (!this.anchorLists.has(n91)) {
                this.anchorLists.set(n91, { top: [], right: [], bottom: [], left: [] });
              }
              this._updateAnchorList(this.anchorLists.get(n91), -Math.PI / 2, 0, { endpoints: [f45, f45], placeholder: true }, false, n91, 0, false, p20(l48), a48, c47);
              s40.add(n91);
            }
          } else {
            for (var p49 = 0; p49 < f45.connections.length; p49++) {
              var v41 = f45.connections[p49], y34 = v41.sourceId, g31 = v41.targetId, m44 = S14(v41.endpoints[0]._anchor), _17 = S14(v41.endpoints[1]._anchor);
              if (m44 || _17) {
                var x27 = (v41.endpoints[0]._anchor.faces || []).join("-"), k20 = (v41.endpoints[1]._anchor.faces || []).join("-"), A19 = [y34, x27, g31, k20].join("-"), C19 = h35[A19], I17 = v41.sourceId === n91 ? 1 : 0;
                if (m44 && !this.anchorLists.has(y34)) {
                  this.anchorLists.set(y34, { top: [], right: [], bottom: [], left: [] });
                }
                if (_17 && !this.anchorLists.has(g31)) {
                  this.anchorLists.set(g31, { top: [], right: [], bottom: [], left: [] });
                }
                var E17 = this.instance.viewport.getPosition(g31), P19 = this.instance.viewport.getPosition(y34);
                if (g31 === y34 && (m44 || _17)) {
                  this._updateAnchorList(this.anchorLists.get(y34), -Math.PI / 2, 0, v41, false, g31, 0, false, o20, a48, c47);
                  this._updateAnchorList(this.anchorLists.get(g31), -Math.PI / 2, 0, v41, false, y34, 1, false, o20, a48, c47);
                } else {
                  var F17 = this.instance._getRotations(y34);
                  var M20 = this.instance._getRotations(g31);
                  if (!C19) {
                    C19 = this._calculateOrientation(y34, g31, P19, E17, v41.endpoints[0]._anchor, v41.endpoints[1]._anchor, F17, M20, v41);
                    h35[A19] = C19;
                  }
                  if (m44) {
                    this._updateAnchorList(this.anchorLists.get(y34), C19.theta, 0, v41, false, g31, 0, false, C19.a[0], a48, c47);
                  }
                  if (_17) {
                    this._updateAnchorList(this.anchorLists.get(g31), C19.theta2, -1, v41, true, y34, 1, true, C19.a[1], a48, c47);
                  }
                }
                if (m44) {
                  s40.add(y34);
                }
                if (_17) {
                  s40.add(g31);
                }
                a48.add(v41);
                if (m44 && I17 === 0 || _17 && I17 === 1) {
                  c47.add(v41.endpoints[I17]);
                }
              } else {
                var j26 = f45.connections[p49].endpoints[v41.sourceId === n91 ? 1 : 0], b28 = j26._anchor;
                if (R10(b28)) {
                  this.instance._paintEndpoint(j26, { elementWithPrecedence: n91, timestamp: o42, otherAnchor: b28 });
                  a48.add(f45.connections[p49]);
                  for (var O22 = 0; O22 < j26.connections.length; O22++) {
                    if (j26.connections[O22] !== f45.connections[p49]) {
                      a48.add(j26.connections[O22]);
                    }
                  }
                } else {
                  a48.add(f45.connections[p49]);
                }
              }
            }
          }
        }
        s40.forEach(function(t62) {
          i45._placeAnchors(t62, i45.anchorLists.get(t62));
        });
        c47.forEach(function(t62) {
          var n92 = i45.instance.viewport.getPosition(t62.elementId);
          i45.instance._paintEndpoint(t62, { timestamp: o42, offset: n92 });
        });
        a48.forEach(function(t62) {
          i45.instance._paintConnection(t62, { timestamp: o42 });
        });
      }
      return { c: a48, e: c47 };
    } }, { key: "reset", value: function t61() {
      this.anchorLocations.clear();
      this.anchorLists.clear();
    } }, { key: "setAnchor", value: function t61(n91, o42) {
      if (o42 != null) {
        n91._anchor = o42;
      }
    } }, { key: "setConnectionAnchors", value: function t61(n91, o42) {
      n91.endpoints[0]._anchor = o42[0];
      n91.endpoints[1]._anchor = o42[1];
    } }, { key: "_calculateOrientation", value: function n91(o42, e78, i45, u52, h35, l48, f45, d32, y34) {
      var g31 = this;
      var m44 = { HORIZONTAL: "horizontal", VERTICAL: "vertical", DIAGONAL: "diagonal", IDENTITY: "identity" };
      if (o42 === e78) {
        return { orientation: m44.IDENTITY, a: [o20, o20] };
      }
      var _17 = Math.atan2(u52.c.y - i45.c.y, u52.c.x - i45.c.x), x27 = Math.atan2(i45.c.y - u52.c.y, i45.c.x - u52.c.x);
      var L18 = [], A19 = {};
      (function(n92, o43) {
        for (var e79 = 0; e79 < n92.length; e79++) {
          var i46;
          A19[n92[e79]] = (i46 = {}, o(i46, n16, { x: o43[e79][0].x, y: o43[e79][0].c.y }), o(i46, i17, { x: o43[e79][0].x + o43[e79][0].w, y: o43[e79][0].c.y }), o(i46, o20, { x: o43[e79][0].c.x, y: o43[e79][0].y }), o(i46, e46, { x: o43[e79][0].c.x, y: o43[e79][0].y + o43[e79][0].h }), i46);
          if (o43[e79][1] != null && o43[e79][1].length > 0) {
            for (var u53 in A19[n92[e79]]) {
              A19[n92[e79]][u53] = g31.instance._applyRotationsXY(A19[n92[e79]][u53], o43[e79][1]);
            }
          }
        }
      })([t3, e9], [[i45, f45], [u52, d32]]);
      var C19 = [o20, n16, i17, e46];
      for (var I17 = 0; I17 < C19.length; I17++) {
        for (var w23 = 0; w23 < C19.length; w23++) {
          L18.push({ source: C19[I17], target: C19[w23], dist: o13(A19.source[C19[I17]], A19.target[C19[w23]]) });
        }
      }
      L18.sort(function(n92, o43) {
        if (n92.dist < o43.dist) {
          return -1;
        } else if (o43.dist < n92.dist) {
          return 1;
        } else {
          var e79;
          var i46 = (e79 = {}, o(e79, n16, 0), o(e79, o20, 1), o(e79, i17, 2), o(e79, e46, 3), e79), u53 = i46[n92.source], h36 = i46[o43.source], l49 = i46[n92.target], f46 = i46[o43.target];
          return u53 < h36 ? -1 : h36 < u53 ? 1 : l49 < f46 ? -1 : f46 < l49 ? 1 : 0;
        }
      });
      var P19 = L18[0].source, F17 = L18[0].target;
      for (var M20 = 0; M20 < L18.length; M20++) {
        if (S14(h35) && h35.locked) {
          P19 = h35.currentFace;
        } else if (!h35.isContinuous || C11(h35, L18[M20].source)) {
          P19 = L18[M20].source;
        } else {
          P19 = null;
        }
        if (l48.isContinuous && l48.locked) {
          F17 = l48.currentFace;
        } else if (!l48.isContinuous || C11(l48, L18[M20].target)) {
          F17 = L18[M20].target;
        } else {
          F17 = null;
        }
        if (P19 != null && F17 != null) {
          break;
        }
      }
      if (h35.isContinuous) {
        this._setCurrentContinuousAnchorFace(h35, P19, y34.connector, 0);
      }
      if (l48.isContinuous) {
        this._setCurrentContinuousAnchorFace(l48, F17, y34.connector, 1);
      }
      return { a: [P19, F17], theta: _17, theta2: x27 };
    } }, { key: "_setCurrentContinuousAnchorFace", value: function t61(n91, o42, e78, i45, r53) {
      var a48 = n91.currentFace != null && n91.currentFace !== o42;
      var c47 = false;
      n91.currentFace = o42;
      if (r53 && n91.lockedFace != null) {
        n91.lockedFace = n91.currentFace;
        c47 = true;
      }
      if (a48) {
        this.instance.fire("internal.anchor:changed", { connector: e78, connection: e78.connection, edge: e78.connection.edge, face: o42, locked: c47, anchorIndex: i45, a: n91 });
      }
    } }, { key: "lock", value: function t61(n91) {
      n91.locked = true;
      if (S14(n91)) {
        n91.lockedFace = n91.currentFace;
      }
    } }, { key: "unlock", value: function t61(n91) {
      n91.locked = false;
      if (S14(n91)) {
        n91.lockedFace = null;
      }
    } }, { key: "selectAnchorLocation", value: function t61(n91, o42) {
      var e78 = O2(n91.locations, function(t62) {
        return t62.x === o42.x && t62.y === o42.y;
      });
      if (e78 !== -1) {
        n91.currentLocation = e78;
        return true;
      } else {
        return false;
      }
    } }, { key: "lockCurrentAxis", value: function t61(n91) {
      if (n91.currentFace != null) {
        n91.lockedAxis = n91.currentFace === n16 || n91.currentFace === i17 ? u25 : r25;
      }
    } }, { key: "unlockCurrentAxis", value: function t61(n91) {
      n91.lockedAxis = null;
    } }, { key: "anchorsEqual", value: function t61(n91, o42) {
      if (!n91 || !o42) {
        return false;
      }
      var e78 = n91.locations[n91.currentLocation], i45 = o42.locations[o42.currentLocation];
      return e78.x === i45.x && e78.y === i45.y && e78.offx === i45.offx && e78.offy === i45.offy && e78.ox === i45.ox && e78.oy === i45.oy;
    } }]);
    return P18;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/connector/abstract-connector.js
  function a33() {
    return { sx: 0, sy: 0, tx: 0, ty: 0, xSpan: 0, ySpan: 0, mx: 0, my: 0, so: [0, 0], to: [0, 0], x: 0, y: 0, w: 0, h: 0, segment: 0, startStubX: 0, startStubY: 0, endStubX: 0, endStubY: 0, isXGreaterThanStubTimes2: false, isYGreaterThanStubTimes2: false, opposite: false, perpendicular: false, orthogonal: false, sourceAxis: "x", points: [0, 0, 0, 0, 0, 0, 0, 0], stubs: [0, 0] };
  }
  function i25(t61, o42, r53) {
    return { x: t61.x, y: t61.y, ox: t61.ox, oy: t61.oy, curX: t61.curX + o42, curY: t61.curY + r53 };
  }
  function c36(t61, o42, r53, e78) {
    var n91 = r53.gap || 0;
    var i45 = r53.stub || e78, c47 = Array.isArray(i45) ? i45[0] : i45, u52 = Array.isArray(i45) ? i45[1] : i45, l48 = Math.max(c47, u52);
    var y34 = { connection: o42, type: t61, segments: [], segmentProportionalLengths: [], segmentProportions: [], totalLength: 0, cssClass: r53.cssClass || "", hoverClass: r53.hoverClass || "", gap: n91, stub: i45, sourceStub: c47, targetStub: u52, maxStub: l48, sourceGap: Array.isArray(n91) ? n91[0] : n91, targetGap: Array.isArray(n91) ? n91[1] : n91, typeDescriptor: "connector", geometry: null, idPrefix: "_jsplumb_connector", bounds: X(), x: 0, y: 0, w: 0, h: 0, edited: false, strokeWidth: 1, typeId: null, segment: 0, paintInfo: a33() };
    return y34;
  }
  function u32(s40, a48, i45) {
    var c47 = a48.endpoints[i45]._anchor;
    if (S14(c47)) {
      var u52 = o20;
      if (s40.x === 0) {
        u52 = n16;
      } else if (s40.x === 1) {
        u52 = i17;
      } else if (s40.y === 1) {
        u52 = e46;
      }
      c47.currentFace = u52;
    } else if (c47.isDynamic) {
      a48.instance.router.selectAnchorLocation(c47, { x: s40.x, y: s40.y });
    } else {
      c47.locations[0].x = s40.x;
      c47.locations[0].y = s40.y;
      c47.locations[0].ox = s40.ox;
      c47.locations[0].oy = s40.oy;
      c47.locations[0].iox = s40.ox;
      c47.locations[0].ioy = s40.oy;
    }
    a48.instance.router.lock(c47);
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/common/abstract-segment.js
  function e64() {
    return { d: Infinity, x: null, y: null, l: null, x1: null, y1: null, x2: null, y2: null };
  }
  function l27(n91, t61, l48) {
    return e64();
  }
  function u33(n91, t61, e78, l48, u52) {
    return [];
  }
  function r34(n91, e78, l48, u52, r53) {
    var i45 = [];
    i45.push.apply(i45, e47.lineIntersection(n91, e78, l48, e78 + u52, l48));
    i45.push.apply(i45, e47.lineIntersection(n91, e78 + u52, l48, e78 + u52, l48 + r53));
    i45.push.apply(i45, e47.lineIntersection(n91, e78 + u52, l48 + r53, e78, l48 + r53));
    i45.push.apply(i45, e47.lineIntersection(n91, e78, l48 + r53, e78, l48));
    return i45;
  }
  function i26(n91, t61) {
    return r34(n91, t61.x, t61.y, t61.w, t61.h);
  }
  function o26(t61) {
    return Object.assign({ extents: X() }, t61);
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/connector/straight-segment.js
  var e65 = "Straight";
  function r35(n91, t61, y34) {
    return y34 > t61 ? t61 <= n91 && n91 <= y34 : t61 >= n91 && n91 >= y34;
  }
  function a34(n91, t61, y34) {
    return y34 >= Math.min(n91, t61) && y34 <= Math.max(n91, t61);
  }
  function o27(n91, t61, y34) {
    return Math.abs(y34 - n91) < Math.abs(y34 - t61) ? n91 : t61;
  }
  var s30 = { create: function y21(i45) {
    var x27 = o26(i45);
    var r53 = Math.sqrt(Math.pow(x27.x2 - x27.x1, 2) + Math.pow(x27.y2 - x27.y1, 2));
    var a48 = h11({ x: x27.x1, y: x27.y1 }, { x: x27.x2, y: x27.y2 });
    var o42 = -1 / a48;
    var s40 = { xmin: Math.min(x27.x1, x27.x2), ymin: Math.min(x27.y1, x27.y2), xmax: Math.max(x27.x1, x27.x2), ymax: Math.max(x27.y1, x27.y2) };
    return Object.assign(x27, { length: r53, m: a48, m2: o42, extents: s40, type: e65 });
  }, boundingBoxIntersection: function n53(t61, y34) {
    return s30.boxIntersection(t61, y34.x, y34.y, y34.w, y34.h);
  }, boxIntersection: function n54(t61, y34, i45, x27, e78) {
    var r53 = [];
    r53.push.apply(r53, s30.lineIntersection(t61, y34, i45, y34 + x27, i45));
    r53.push.apply(r53, s30.lineIntersection(t61, y34 + x27, i45, y34 + x27, i45 + e78));
    r53.push.apply(r53, s30.lineIntersection(t61, y34 + x27, i45 + e78, y34, i45 + e78));
    r53.push.apply(r53, s30.lineIntersection(t61, y34, i45 + e78, y34, i45));
    return r53;
  }, findClosestPointOnPath: function n55(t61, i45, x27) {
    var e78 = { d: Infinity, x: null, y: null, l: null, x1: t61.x1, x2: t61.x2, y1: t61.y1, y2: t61.y2 };
    if (t61.m === 0) {
      e78.y = t61.y1;
      e78.x = a34(t61.x1, t61.x2, i45) ? i45 : o27(t61.x1, t61.x2, i45);
    } else if (t61.m === Infinity || t61.m === -Infinity) {
      e78.x = t61.x1;
      e78.y = a34(t61.y1, t61.y2, x27) ? x27 : o27(t61.y1, t61.y2, x27);
    } else {
      var r53 = t61.y1 - t61.m * t61.x1, s40 = x27 - t61.m2 * i45, f45 = (s40 - r53) / (t61.m - t61.m2), u52 = t61.m * f45 + r53;
      e78.x = a34(t61.x1, t61.x2, f45) ? f45 : o27(t61.x1, t61.x2, f45);
      e78.y = a34(t61.y1, t61.y2, u52) ? u52 : o27(t61.y1, t61.y2, u52);
    }
    var h35 = o13({ x: e78.x, y: e78.y }, { x: t61.x1, y: t61.y1 });
    e78.d = o13({ x: i45, y: x27 }, e78);
    e78.l = h35 / t61.length;
    return e78;
  }, getLength: function n56(t61) {
    return t61.length;
  }, getPath: function n57(t61, y34) {
    return (y34 ? "M " + t61.x1 + " " + t61.y1 + " " : "") + "L " + t61.x2 + " " + t61.y2;
  }, gradientAtPoint: function n58(t61, y34, i45) {
    return t61.m;
  }, lineIntersection: function n59(y34, i45, x27, e78, a48) {
    var o42 = Math.abs(h11({ x: i45, y: x27 }, { x: e78, y: a48 })), s40 = Math.abs(y34.m), f45 = s40 === Infinity ? y34.x1 : y34.y1 - s40 * y34.x1, u52 = [], h35 = o42 === Infinity ? i45 : x27 - o42 * i45;
    if (o42 !== s40) {
      if (o42 === Infinity && s40 === 0) {
        if (r35(i45, y34.x1, y34.x2) && r35(y34.y1, x27, a48)) {
          u52.push({ x: i45, y: y34.y1 });
        }
      } else if (o42 === 0 && s40 === Infinity) {
        if (r35(x27, y34.y1, y34.y2) && r35(y34.x1, i45, e78)) {
          u52.push({ x: y34.x1, y: x27 });
        }
      } else {
        var m44, l48;
        if (o42 === Infinity) {
          m44 = i45;
          if (r35(m44, y34.x1, y34.x2)) {
            l48 = s40 * i45 + f45;
            if (r35(l48, x27, a48)) {
              u52.push({ x: m44, y: l48 });
            }
          }
        } else if (o42 === 0) {
          l48 = x27;
          if (r35(l48, y34.y1, y34.y2)) {
            m44 = (x27 - f45) / s40;
            if (r35(m44, i45, e78)) {
              u52.push({ x: m44, y: l48 });
            }
          }
        } else {
          m44 = (h35 - f45) / (s40 - o42);
          l48 = s40 * m44 + f45;
          if (r35(m44, y34.x1, y34.x2) && r35(l48, y34.y1, y34.y2)) {
            u52.push({ x: m44, y: l48 });
          }
        }
      }
    }
    return u52;
  }, pointAlongPathFrom: function n60(t61, y34, x27, e78) {
    var r53 = s30.pointOnPath(t61, y34, e78), a48 = x27 <= 0 ? { x: t61.x1, y: t61.y1 } : { x: t61.x2, y: t61.y2 };
    if (x27 <= 0 && Math.abs(x27) > 1) {
      x27 *= -1;
    }
    return d11(r53, a48, x27);
  }, pointOnPath: function n61(t61, y34, x27) {
    if (y34 === 0 && !x27) {
      return { x: t61.x1, y: t61.y1 };
    } else if (y34 === 1 && !x27) {
      return { x: t61.x2, y: t61.y2 };
    } else {
      var e78 = x27 ? y34 > 0 ? y34 : t61.length + y34 : y34 * t61.length;
      return d11({ x: t61.x1, y: t61.y1 }, { x: t61.x2, y: t61.y2 }, e78);
    }
  } };
  n35(e65, s30);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/connector/straight-connector.js
  var i27 = "Straight";
  function m29(t61, r53, e78) {
    g14(t61, e65, { x1: r53.sx, y1: r53.sy, x2: r53.startStubX, y2: r53.startStubY });
    g14(t61, e65, { x1: r53.startStubX, y1: r53.startStubY, x2: r53.endStubX, y2: r53.endStubY });
    g14(t61, e65, { x1: r53.endStubX, y1: r53.endStubY, x2: r53.tx, y2: r53.ty });
    t61.geometry = { source: e78.sourcePos, target: e78.targetPos };
  }
  function y22(t61, r53, o42) {
    return { source: i25(t61.source, r53, o42), target: i25(t61.target, r53, o42) };
  }
  i18.register(i27, { compute: m29, create: g20, setAnchorOrientation: function t38(r53, e78, o42) {
  }, geometryImporter: u26, geometryExporter: a26, transformGeometry: y22 });
  function g20(t61, r53) {
    var e78 = c36(i27, t61, r53, [0, 0]);
    return e78;
  }
  var p28 = function r36() {
    t(this, r36);
  };
  o(p28, "type", i27);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/connector/connection-impl.js
  var E11 = "_jsplumb_connection";
  var b20 = function(d32) {
    a(C19, d32);
    var b28 = s(C19);
    function C19(e78, t61) {
      var a48;
      t(this, C19);
      a48 = b28.call(this, e78, "_jsPlumb_c", t61);
      a48.instance = e78;
      o(l(a48), "edge", void 0);
      o(l(a48), "objectType", S10);
      o(l(a48), "overlays", {});
      o(l(a48), "overlayPositions", {});
      o(l(a48), "overlayPlacements", {});
      o(l(a48), "connector", void 0);
      o(l(a48), "defaultLabelLocation", 0.5);
      o(l(a48), "scope", void 0);
      o(l(a48), "_pathEditing", void 0);
      o(l(a48), "typeId", E11);
      o(l(a48), "idPrefix", "_jsPlumb_c");
      o(l(a48), "previousConnection", void 0);
      o(l(a48), "sourceId", void 0);
      o(l(a48), "targetId", void 0);
      o(l(a48), "source", void 0);
      o(l(a48), "target", void 0);
      o(l(a48), "detachable", true);
      o(l(a48), "reattach", false);
      o(l(a48), "cost", 1);
      o(l(a48), "directed", void 0);
      o(l(a48), "endpoints", [null, null]);
      o(l(a48), "endpointStyles", void 0);
      o(l(a48), "endpointSpec", void 0);
      o(l(a48), "endpointsSpec", void 0);
      o(l(a48), "endpointStyle", {});
      o(l(a48), "endpointHoverStyle", {});
      o(l(a48), "endpointHoverStyles", void 0);
      o(l(a48), "suspendedEndpoint", void 0);
      o(l(a48), "suspendedIndex", void 0);
      o(l(a48), "suspendedElement", void 0);
      o(l(a48), "suspendedElementId", void 0);
      o(l(a48), "suspendedElementType", void 0);
      o(l(a48), "_forceReattach", void 0);
      o(l(a48), "_forceDetach", void 0);
      o(l(a48), "proxies", []);
      o(l(a48), "pending", false);
      a48.edge = t61.edge;
      a48.id = t61.id;
      a48.previousConnection = t61.previousConnection;
      a48.overlays = {};
      a48.overlayPositions = {};
      var d33 = t61.overlays || [], c47 = {};
      var _17 = a48.getDefaultOverlayKey();
      if (_17) {
        var I17 = a48.instance.defaults[_17];
        if (I17) {
          d33.push.apply(d33, h(I17));
        }
        for (var P18 = 0; P18 < d33.length; P18++) {
          var j26 = v17(d33[P18]);
          c47[j26.options.id] = j26;
        }
      }
      a48._defaultType.overlays = c47;
      if (t61.label) {
        a48._defaultType.overlays[d19] = { type: u22.type, options: { label: t61.label, useHTMLElement: t61.useHTMLLabel === true, location: t61.labelLocation || a48.defaultLabelLocation, id: d19, cssClass: v23 } };
      }
      a48.source = t61.source;
      a48.target = t61.target;
      if (t61.sourceEndpoint) {
        a48.source = t61.sourceEndpoint.element;
        a48.sourceId = t61.sourceEndpoint.elementId;
      } else {
        a48.sourceId = e78.getId(a48.source);
      }
      if (t61.targetEndpoint) {
        a48.target = t61.targetEndpoint.element;
        a48.targetId = t61.targetEndpoint.elementId;
      } else {
        a48.targetId = e78.getId(a48.target);
      }
      a48.scope = t61.scope;
      var T18 = t61.anchors ? t61.anchors[0] : t61.anchor;
      var H12 = t61.anchors ? t61.anchors[1] : t61.anchor;
      e78.manage(a48.source);
      e78.manage(a48.target);
      a48.visible = true;
      a48.params = { cssClass: t61.cssClass, hoverClass: t61.hoverClass, "pointer-events": t61["pointer-events"], overlays: t61.overlays };
      a48.lastPaintedAt = null;
      if (t61.type) {
        t61.endpoints = t61.endpoints || a48.instance._deriveEndpointAndAnchorSpec(t61.type).endpoints;
      }
      a48.endpointSpec = t61.endpoint;
      a48.endpointsSpec = t61.endpoints || [null, null];
      a48.endpointStyle = t61.endpointStyle;
      a48.endpointHoverStyle = t61.endpointHoverStyle;
      a48.endpointStyles = t61.endpointStyles || [null, null];
      a48.endpointHoverStyles = t61.endpointHoverStyles || [null, null];
      a48.paintStyle = t61.paintStyle;
      a48.hoverPaintStyle = t61.hoverPaintStyle;
      B8.makeEndpoint(l(a48), true, a48.source, a48.sourceId, T18, t61.sourceEndpoint);
      B8.makeEndpoint(l(a48), false, a48.target, a48.targetId, H12, t61.targetEndpoint);
      if (!a48.scope) {
        a48.scope = a48.endpoints[0].scope;
      }
      if (t61.deleteEndpointsOnEmpty != null) {
        a48.endpoints[0].deleteOnEmpty = t61.deleteEndpointsOnEmpty;
        a48.endpoints[1].deleteOnEmpty = t61.deleteEndpointsOnEmpty;
      }
      var D18 = a48.instance.defaults.connectionsDetachable;
      if (t61.detachable === false) {
        D18 = false;
      }
      if (a48.endpoints[0].connectionsDetachable === false) {
        D18 = false;
      }
      if (a48.endpoints[1].connectionsDetachable === false) {
        D18 = false;
      }
      a48.endpointsSpec = t61.endpoints || [null, null];
      a48.endpointSpec = t61.endpoint || null;
      var k20 = t61.reattach || a48.endpoints[0].reattachConnections || a48.endpoints[1].reattachConnections || a48.instance.defaults.reattachConnections;
      var L18 = u2({}, a48.endpoints[0].connectorStyle || a48.endpoints[1].connectorStyle || t61.paintStyle || a48.instance.defaults.paintStyle);
      D8.appendToDefaultType(l(a48), { detachable: D18, reattach: k20, paintStyle: L18, hoverPaintStyle: u2({}, a48.endpoints[0].connectorHoverStyle || a48.endpoints[1].connectorHoverStyle || t61.hoverPaintStyle || a48.instance.defaults.hoverPaintStyle) });
      if (t61.outlineWidth) {
        L18.outlineWidth = t61.outlineWidth;
      }
      if (t61.outlineColor) {
        L18.outlineStroke = t61.outlineColor;
      }
      if (t61.lineWidth) {
        L18.strokeWidth = t61.lineWidth;
      }
      if (t61.color) {
        L18.stroke = t61.color;
      }
      if (!a48.instance._suspendDrawing) {
        var x27 = a48.instance._suspendedAt || $();
        a48.instance._paintEndpoint(a48.endpoints[0], { timestamp: x27 });
        a48.instance._paintEndpoint(a48.endpoints[1], { timestamp: x27 });
      }
      a48.cost = t61.cost || a48.endpoints[0].connectionCost;
      a48.directed = t61.directed;
      if (t61.directed == null) {
        a48.directed = a48.endpoints[0].connectionsDirected;
      }
      var O22 = u2({}, a48.endpoints[1].parameters);
      u2(O22, a48.endpoints[0].parameters);
      u2(O22, a48.parameters);
      a48.parameters = O22;
      a48.paintStyleInUse = a48.paintStyle || {};
      B8._setConnector(l(a48), a48.endpoints[0].connector || a48.endpoints[1].connector || t61.connector || a48.instance.defaults.connector, true);
      var W12 = t61.data == null || !a2(t61.data) ? {} : t61.data;
      D8.setData(l(a48), W12);
      var A19 = [r7, a48.endpoints[0].edgeType, a48.endpoints[1].edgeType, t61.type].join(" ");
      if (/[^\s]/.test(A19)) {
        D8.addType(l(a48), A19, t61.data);
      }
      return a48;
    }
    n(C19, [{ key: "getDefaultOverlayKey", value: function e78() {
      return z2;
    } }, { key: "getXY", value: function e78() {
      return { x: this.connector.x, y: this.connector.y };
    } }]);
    return C19;
  }(w12);
  o(b20, "type", S10);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/core.js
  function ve(e78, n91) {
    var t61 = e78.scope.split(/\s/), i45 = n91.scope.split(/\s/);
    for (var o42 = 0; o42 < t61.length; o42++) {
      for (var r53 = 0; r53 < i45.length; r53++) {
        if (i45[r53] === t61[o42]) {
          return true;
        }
      }
    }
    return false;
  }
  function me(e78, n91, t61) {
    var i45 = [];
    var o42 = function n92(t62) {
      if (l2(t62)) {
        return t62;
      } else {
        return e78.getId(t62);
      }
    };
    if (n91) {
      if (typeof n91 === "string") {
        if (n91 === "*") {
          return n91;
        }
        i45.push(n91);
      } else {
        if (t61) {
          i45 = n91;
        } else {
          if (n91.length != null) {
            var r53;
            (r53 = i45).push.apply(r53, h(h(n91).map(o42)));
          } else {
            i45.push(o42(n91));
          }
        }
      }
    }
    return i45;
  }
  function ge(e78, n91) {
    if (e78 != null) {
      e78.endpoints.push(n91);
    }
  }
  function ye(e78, n91) {
    if (e78 != null) {
      E(e78.endpoints, function(e79) {
        return e79 === n91;
      });
    }
  }
  function Ee2(e78, n91, t61) {
    if (n91 != null) {
      n91.connections.push(e78);
      if (n91.connections.length === 1) {
        e78.instance.addClass(e78.source, e78.instance.connectedClass);
      }
    }
    if (t61 != null) {
      if (n91 == null || e78.sourceId !== e78.targetId) {
        t61.connections.push(e78);
        if (t61.connections.length === 1) {
          e78.instance.addClass(e78.target, e78.instance.connectedClass);
        }
      }
    }
  }
  function _e(e78, n91, t61) {
    if (n91 != null) {
      var i45 = n91.connections.length;
      E(n91.connections, function(n92) {
        return e78.id === n92.id;
      });
      if (i45 > 0 && n91.connections.length === 0) {
        e78.instance.removeClass(e78.source, e78.instance.connectedClass);
      }
    }
    if (t61 != null) {
      var o42 = t61.connections.length;
      if (n91 == null || e78.sourceId !== e78.targetId) {
        E(t61.connections, function(n92) {
          return e78.id === n92.id;
        });
      }
      if (o42 > 0 && t61.connections.length === 0) {
        e78.instance.removeClass(e78.target, e78.instance.connectedClass);
      }
    }
  }
  var ke2 = function(s40) {
    a(ke3, s40);
    var ae2 = s(ke3);
    function ke3(e78, n91, r53) {
      var s41;
      t(this, ke3);
      s41 = ae2.call(this);
      s41.toolkit = e78;
      o(l(s41), "defaults", void 0);
      o(l(s41), "_initialDefaults", {});
      o(l(s41), "isConnectionBeingDragged", false);
      o(l(s41), "currentlyDragging", false);
      o(l(s41), "hoverSuspended", false);
      o(l(s41), "_suspendDrawing", false);
      o(l(s41), "_suspendedAt", null);
      o(l(s41), "connectorClass", t29);
      o(l(s41), "connectorOutlineClass", n49);
      o(l(s41), "connectedClass", o23);
      o(l(s41), "endpointClass", r32);
      o(l(s41), "endpointConnectedClass", e61);
      o(l(s41), "endpointFullClass", a32);
      o(l(s41), "endpointFloatingClass", d21);
      o(l(s41), "endpointDropAllowedClass", v24);
      o(l(s41), "endpointDropForbiddenClass", j14);
      o(l(s41), "endpointAnchorClassPrefix", k14);
      o(l(s41), "overlayClass", c28);
      o(l(s41), "labelOverlayClass", i22);
      o(l(s41), "connections", []);
      o(l(s41), "endpointsByElement", {});
      o(l(s41), "endpointsByUUID", /* @__PURE__ */ new Map());
      o(l(s41), "sourceSelectors", []);
      o(l(s41), "targetSelectors", []);
      o(l(s41), "allowNestedGroups", void 0);
      o(l(s41), "_curIdStamp", 1);
      o(l(s41), "viewport", new E10(l(s41)));
      o(l(s41), "router", void 0);
      o(l(s41), "groupManager", void 0);
      o(l(s41), "_connectionTypes", /* @__PURE__ */ new Map());
      o(l(s41), "_endpointTypes", /* @__PURE__ */ new Map());
      o(l(s41), "_container", void 0);
      o(l(s41), "_managedElements", {});
      o(l(s41), "DEFAULT_SCOPE", void 0);
      o(l(s41), "_zoom", 1);
      o(l(s41), "_connectionEstablished", void 0);
      s41._connectionEstablished = n91.connectionEstablished || function(e79) {
      };
      s41.defaults = { anchor: a25.Continuous, anchors: [null, null], connectionsDetachable: true, connectionOverlays: [], connector: i27, endpoint: o19.type, endpoints: [null, null], endpointStyle: { fill: "#456" }, endpointStyles: [null, null], endpointHoverStyle: null, endpointHoverStyles: [null, null], hoverPaintStyle: null, listStyle: {}, maxConnections: 1, paintStyle: { strokeWidth: 2, stroke: "#456" }, reattachConnections: false, scope: "jsplumb_defaultscope", allowNestedGroups: true };
      if (r53) {
        u2(s41.defaults, r53);
      }
      u2(s41._initialDefaults, s41.defaults);
      if (s41._initialDefaults[u20] != null) {
        s41._initialDefaults[u20].strokeWidth = s41._initialDefaults[u20].strokeWidth || 2;
      }
      s41.DEFAULT_SCOPE = s41.defaults[z7];
      s41.allowNestedGroups = s41._initialDefaults[a21] !== false;
      s41.router = new T8(l(s41));
      s41.groupManager = new M12(l(s41));
      s41.setContainer(n91.container);
      return s41;
    }
    n(ke3, [{ key: "defaultScope", get: function e78() {
      return this.DEFAULT_SCOPE;
    } }, { key: "currentZoom", get: function e78() {
      return this._zoom;
    } }, { key: "areDefaultAnchorsSet", value: function e78() {
      return this.validAnchorsSpec(this.defaults.anchors);
    } }, { key: "validAnchorsSpec", value: function e78(n91) {
      return n91 != null && n91[0] != null && n91[1] != null;
    } }, { key: "getContainer", value: function e78() {
      return this._container;
    } }, { key: "setZoom", value: function e78(n91, t61) {
      this._zoom = n91;
      if (t61) {
        this.repaintEverything();
      }
      return true;
    } }, { key: "_idstamp", value: function e78() {
      return "" + this._curIdStamp++;
    } }, { key: "getId", value: function e78(n91, t61) {
      if (n91 == null) {
        return null;
      }
      var i45 = this.getAttribute(n91, f7);
      if (!i45 || i45 === "undefined") {
        if (arguments.length === 2 && arguments[1] !== void 0) {
          i45 = t61;
        } else if (arguments.length === 1 || arguments.length === 3 && !arguments[2]) {
          i45 = "jsplumb-".concat(this._idstamp());
        }
        this.setAttribute(n91, f7, i45);
      }
      return i45;
    } }, { key: "getConnections", value: function e78(n91, t61) {
      if (!n91) {
        n91 = {};
      } else if (n91.constructor === String) {
        n91 = { scope: n91 };
      }
      var i45 = n91.scope || this.defaultScope, o42 = me(this, i45, true), r53 = me(this, n91.source), s41 = me(this, n91.target), a48 = !t61 && o42.length > 1 ? {} : [], l48 = function e79(n92, i46) {
        if (!t61 && o42.length > 1) {
          var r54 = a48[n92];
          if (r54 == null) {
            r54 = a48[n92] = [];
          }
          r54.push(i46);
        } else {
          a48.push(i46);
        }
      };
      for (var u52 = 0, c47 = this.connections.length; u52 < c47; u52++) {
        var d32 = this.connections[u52], p49 = d32.proxies && d32.proxies[0] ? d32.proxies[0].originalEp.elementId : d32.sourceId, f45 = d32.proxies && d32.proxies[1] ? d32.proxies[1].originalEp.elementId : d32.targetId;
        if (e2(o42, d32.scope) && e2(r53, p49) && e2(s41, f45)) {
          l48(d32.scope, d32);
        }
      }
      return a48;
    } }, { key: "select", value: function e78(n91) {
      n91 = n91 || {};
      n91.scope = n91.scope || "*";
      return new c34(this, n91.connections || this.getConnections(n91, true));
    } }, { key: "selectEndpoints", value: function e78(n91) {
      n91 = n91 || {};
      n91.scope = n91.scope || d9;
      var t61 = !n91.element && !n91.source && !n91.target, i45 = t61 ? d9 : me(this, n91.element), o42 = t61 ? d9 : me(this, n91.source), r53 = t61 ? d9 : me(this, n91.target), s41 = me(this, n91.scope, true);
      var a48 = [];
      for (var l48 in this.endpointsByElement) {
        var u52 = e2(i45, l48, true), c47 = e2(o42, l48, true), d32 = o42 !== "*", p49 = e2(r53, l48, true), f45 = r53 !== "*";
        if (u52 || c47 || p49) {
          e:
            for (var h35 = 0, v41 = this.endpointsByElement[l48].length; h35 < v41; h35++) {
              var m44 = this.endpointsByElement[l48][h35];
              if (e2(s41, m44.scope, true)) {
                var g31 = d32 && o42.length > 0 && !m44.isSource, y34 = f45 && r53.length > 0 && !m44.isTarget;
                if (g31 || y34) {
                  continue e;
                }
                a48.push(m44);
              }
            }
        }
      }
      return new s29(this, a48);
    } }, { key: "setContainer", value: function e78(n91) {
      this._container = n91;
    } }, { key: "_set", value: function e78(n91, t61, i45) {
      var o42 = [{ el: "source", elId: "sourceId" }, { el: "target", elId: "targetId" }];
      var r53, s41 = o42[i45], a48 = n91[s41.elId], l48, u52 = n91.endpoints[i45];
      var d32 = { index: i45, originalEndpoint: u52, originalSourceId: i45 === 0 ? a48 : n91.sourceId, newSourceId: n91.sourceId, originalTargetId: i45 === 1 ? a48 : n91.targetId, newTargetId: n91.targetId, connection: n91, newEndpoint: u52 };
      if (C9(t61)) {
        r53 = t61;
        m17.addConnection(t61, n91);
      } else {
        l48 = this.getId(t61);
        if (l48 === n91[s41.elId]) {
          r53 = null;
        } else {
          r53 = B8.makeEndpoint(n91, i45 === 0, t61, l48);
        }
      }
      if (r53 != null) {
        d32.newEndpoint = r53;
        m17.detachFromConnection(u52, n91);
        n91.endpoints[i45] = r53;
        n91[s41.el] = r53.element;
        n91[s41.elId] = r53.elementId;
        d32[i45 === 0 ? "newSourceId" : "newTargetId"] = r53.elementId;
        this.fireMoveEvent(d32);
        this._paintConnection(n91);
      }
      return d32;
    } }, { key: "setSource", value: function e78(n91, t61) {
      _e(n91, this._managedElements[n91.sourceId]);
      var i45 = this._set(n91, t61, 0);
      Ee2(n91, this._managedElements[i45.newSourceId]);
    } }, { key: "setTarget", value: function e78(n91, t61) {
      _e(n91, this._managedElements[n91.targetId]);
      var i45 = this._set(n91, t61, 1);
      Ee2(n91, this._managedElements[i45.newTargetId]);
    } }, { key: "setConnectionType", value: function e78(n91, t61, i45) {
      D8.setType(n91, t61, i45);
      this._paintConnection(n91);
    } }, { key: "isHoverSuspended", value: function e78() {
      return this.hoverSuspended;
    } }, { key: "setSuspendDrawing", value: function e78(n91, t61) {
      var i45 = this._suspendDrawing;
      this._suspendDrawing = n91;
      if (n91) {
        this._suspendedAt = "" + (/* @__PURE__ */ new Date()).getTime();
      } else {
        this._suspendedAt = null;
        this.viewport.recomputeBounds();
      }
      if (t61) {
        this.repaintEverything();
      }
      return i45;
    } }, { key: "getSuspendedAt", value: function e78() {
      return this._suspendedAt;
    } }, { key: "batch", value: function e78(n91, t61) {
      var i45 = this._suspendDrawing === true;
      if (!i45) {
        this.setSuspendDrawing(true);
      }
      n91();
      if (!i45) {
        this.setSuspendDrawing(false, !t61);
      }
    } }, { key: "each", value: function e78(n91, t61) {
      if (n91 == null) {
        return;
      }
      if (n91.length != null) {
        for (var i45 = 0; i45 < n91.length; i45++) {
          t61(n91[i45]);
        }
      } else {
        t61(n91);
      }
      return this;
    } }, { key: "updateOffset", value: function e78(n91) {
      var t61 = n91.elId;
      if (n91.recalc) {
        return this.viewport.refreshElement(t61);
      } else {
        return this.viewport.getPosition(t61);
      }
    } }, { key: "deleteConnection", value: function e78(n91, t61) {
      if (n91 != null && n91.deleted !== true) {
        t61 = t61 || {};
        if (t61.force || this.beforeDetach(n91) === true) {
          _e(n91, this._managedElements[n91.sourceId], this._managedElements[n91.targetId]);
          this.fireDetachEvent(n91, !n91.pending && t61.fireEvent !== false, t61.originalEvent);
          var i45 = n91.endpoints[0];
          var o42 = n91.endpoints[1];
          if (i45 !== t61.endpointToIgnore) {
            m17.detachFromConnection(i45, n91, null, true);
          }
          if (o42 !== t61.endpointToIgnore) {
            m17.detachFromConnection(o42, n91, null, true);
          }
          E(this.connections, function(e79) {
            return n91.id === e79.id;
          });
          B8.destroy(n91);
          if (i45 !== t61.endpointToIgnore && i45.deleteOnEmpty && i45.connections.length === 0) {
            this.deleteEndpoint(i45);
          }
          if (o42 !== t61.endpointToIgnore && o42.deleteOnEmpty && o42.connections.length === 0) {
            this.deleteEndpoint(o42);
          }
          return true;
        }
      }
      return false;
    } }, { key: "deleteEveryConnection", value: function e78(n91) {
      var t61 = this;
      n91 = n91 || {};
      var i45 = this.connections.length, o42 = 0;
      this.batch(function() {
        for (var e79 = 0; e79 < i45; e79++) {
          o42 += t61.deleteConnection(t61.connections[0], n91) ? 1 : 0;
        }
      });
      return o42;
    } }, { key: "deleteConnectionsForElement", value: function e78(n91, t61) {
      var i45 = this.getId(n91), o42 = this._managedElements[i45];
      if (o42) {
        var r53 = o42.connections.length;
        for (var s41 = 0; s41 < r53; s41++) {
          this.deleteConnection(o42.connections[0], t61);
        }
      }
      return this;
    } }, { key: "fireDetachEvent", value: function e78(n91, t61, i45) {
      var o42 = n91.id != null, r53 = o42 ? { connection: n91, source: n91.source, target: n91.target, sourceId: n91.sourceId, targetId: n91.targetId, sourceEndpoint: n91.endpoints[0], targetEndpoint: n91.endpoints[1] } : n91;
      if (t61) {
        this.fire(a16, r53, i45);
      }
      this.fire(c15, r53, i45);
    } }, { key: "fireMoveEvent", value: function e78(n91, t61) {
      this.fire(o16, n91, t61);
    } }, { key: "manageAll", value: function e78(n91, t61) {
      var i45 = l2(n91) ? this.getSelector(this.getContainer(), n91) : n91;
      for (var o42 = 0; o42 < i45.length; o42++) {
        this.manage(i45[o42], null, t61);
      }
    } }, { key: "manage", value: function e78(n91, t61, i45) {
      if (this.getAttribute(n91, f7) == null) {
        t61 = t61 || this.getAttribute(n91, "id") || $();
        this.setAttribute(n91, f7, t61);
      }
      var o42 = this.getId(n91);
      if (!this._managedElements[o42]) {
        var r53 = { el: n91, endpoints: [], connections: [], rotation: 0, data: {} };
        this._managedElements[o42] = r53;
        if (this._suspendDrawing) {
          r53.viewportElement = this.viewport.registerElement(o42, true);
        } else {
          r53.viewportElement = this.updateOffset({ elId: o42, recalc: true });
        }
      } else {
        if (i45) {
          this._managedElements[o42].viewportElement = this.updateOffset({ elId: o42, timestamp: null, recalc: true });
        }
      }
      return this._managedElements[o42];
    } }, { key: "getManagedData", value: function e78(n91, t61, i45) {
      if (this._managedElements[n91]) {
        var o42 = this._managedElements[n91].data[t61];
        return o42 != null ? o42[i45] : null;
      }
    } }, { key: "setManagedData", value: function e78(n91, t61, i45, o42) {
      if (this._managedElements[n91]) {
        this._managedElements[n91].data[t61] = this._managedElements[n91].data[t61] || {};
        this._managedElements[n91].data[t61][i45] = o42;
      }
    } }, { key: "getManagedElement", value: function e78(n91) {
      return this._managedElements[n91] ? this._managedElements[n91].el : null;
    } }, { key: "unmanage", value: function e78(n91, t61) {
      var i45 = this;
      this.removeAllEndpoints(n91, true);
      var o42 = function e79(n92) {
        var o43 = i45.getId(n92);
        i45.removeAttribute(n92, f7);
        delete i45._managedElements[o43];
        i45.viewport.remove(o43);
        if (n92 && t61) {
          i45._removeElement(n92);
        }
      };
      this._getAssociatedElements(n91).map(o42);
      o42(n91);
    } }, { key: "rotate", value: function e78(n91, t61, i45) {
      var o42 = this.getId(n91);
      if (this._managedElements[o42]) {
        this._managedElements[o42].rotation = t61;
        this.viewport.rotateElement(o42, t61);
        if (i45 !== true) {
          return this.revalidate(n91);
        }
      }
      return { c: /* @__PURE__ */ new Set(), e: /* @__PURE__ */ new Set() };
    } }, { key: "_getRotation", value: function e78(n91) {
      var t61 = this._managedElements[n91];
      if (t61 != null) {
        return t61.rotation || 0;
      } else {
        return 0;
      }
    } }, { key: "_getRotations", value: function e78(n91) {
      var t61 = this;
      var i45 = [];
      var o42 = this._managedElements[n91];
      var r53 = function e79(n92) {
        if (n92.group != null) {
          var o43 = t61._managedElements[n92.group];
          if (o43 != null) {
            i45.push({ r: o43.viewportElement.r, c: o43.viewportElement.c });
            e79(o43);
          }
        }
      };
      if (o42 != null) {
        i45.push({ r: o42.viewportElement.r || 0, c: o42.viewportElement.c });
        r53(o42);
      }
      return i45;
    } }, { key: "_applyRotations", value: function e78(n91, t61) {
      var i45 = n91.slice();
      var o42 = { x: i45[0], y: i45[1], cr: 0, sr: 0 };
      j2(t61, function(e79) {
        o42 = q(o42, e79.c, e79.r);
      });
      return o42;
    } }, { key: "_applyRotationsXY", value: function e78(n91, t61) {
      j2(t61, function(e79) {
        n91 = q(n91, e79.c, e79.r);
      });
      return n91;
    } }, { key: "_internal_newEndpoint", value: function e78(n91) {
      var t61 = u2({}, n91);
      var i45 = this.manage(t61.element);
      t61.elementId = this.getId(t61.element);
      t61.id = "ep_" + this._idstamp();
      t61.useHTMLLabel = true;
      var o42 = new h18(this, t61);
      ge(i45, o42);
      if (n91.uuid) {
        this.endpointsByUUID.set(n91.uuid, o42);
      }
      _(this.endpointsByElement, o42.elementId, o42);
      if (!this._suspendDrawing) {
        this._paintEndpoint(o42, { timestamp: this._suspendedAt });
      }
      return o42;
    } }, { key: "_deriveEndpointAndAnchorSpec", value: function e78(n91, t61) {
      var i45 = ((t61 ? "" : "default ") + n91).split(/[\s]/), o42 = null, r53 = null, s41 = null, a48 = null;
      for (var l48 = 0; l48 < i45.length; l48++) {
        var u52 = this.getConnectionType(i45[l48]);
        if (u52) {
          if (u52.endpoints) {
            o42 = u52.endpoints;
          }
          if (u52.endpoint) {
            r53 = u52.endpoint;
          }
          if (u52.anchors) {
            a48 = u52.anchors;
          }
          if (u52.anchor) {
            s41 = u52.anchor;
          }
        }
      }
      return { endpoints: o42 ? o42 : [r53, r53], anchors: a48 ? a48 : [s41, s41] };
    } }, { key: "revalidate", value: function e78(n91, t61) {
      var i45 = this.getId(n91);
      this.updateOffset({ elId: i45, recalc: true, timestamp: t61 });
      return this.repaint(n91);
    } }, { key: "repaintEverything", value: function e78() {
      var n91 = $(), t61;
      for (t61 in this._managedElements) {
        this.viewport.refreshElement(t61, true);
      }
      this.viewport.recomputeBounds();
      for (t61 in this._managedElements) {
        this.repaint(this._managedElements[t61].el, n91, true);
      }
      return this;
    } }, { key: "setElementPosition", value: function e78(n91, t61, i45, o42) {
      var r53 = this.getId(n91);
      this.viewport.setPosition(r53, t61, i45);
      if (!o42) {
        return this.repaint(n91);
      } else {
        return e63();
      }
    } }, { key: "repaint", value: function e78(n91, t61, i45) {
      var o42 = { c: /* @__PURE__ */ new Set(), e: /* @__PURE__ */ new Set() };
      var r53 = function e79(n92) {
        n92.c.forEach(function(e80) {
          return o42.c.add(e80);
        });
        n92.e.forEach(function(e80) {
          return o42.e.add(e80);
        });
      };
      if (!this._suspendDrawing) {
        var s41 = this.getId(n91);
        if (n91 != null) {
          var a48 = this._getAssociatedElements(n91);
          if (t61 == null) {
            t61 = $();
          }
          if (!i45) {
            for (var l48 = 0; l48 < a48.length; l48++) {
              this.updateOffset({ elId: this.getId(a48[l48]), recalc: true, timestamp: t61 });
            }
          }
          r53(this.router.redraw(s41, t61, null));
          if (a48.length > 0) {
            for (var u52 = 0; u52 < a48.length; u52++) {
              r53(this.router.redraw(this.getId(a48[u52]), t61, null));
            }
          }
        }
      }
      return o42;
    } }, { key: "unregisterEndpoint", value: function e78(n91) {
      var t61 = n91.uuid;
      if (t61) {
        this.endpointsByUUID.delete(t61);
      }
      ye(this._managedElements[n91.elementId], n91);
      var i45 = this.endpointsByElement[n91.elementId];
      if (i45 != null) {
        this.endpointsByElement[n91.elementId] = i45.filter(function(e79) {
          return e79 !== n91;
        });
      }
      this.fire(v15, n91);
    } }, { key: "_maybePruneEndpoint", value: function e78(n91) {
      if (n91.deleteOnEmpty && n91.connections.length === 0) {
        this.deleteEndpoint(n91);
        return true;
      } else {
        return false;
      }
    } }, { key: "deleteEndpoint", value: function e78(n91) {
      var t61 = this;
      var i45 = typeof n91 === "string" ? this.endpointsByUUID.get(n91) : n91;
      if (i45) {
        var o42 = i45.proxiedBy;
        var r53 = i45.connections.slice();
        j2(r53, function(e79) {
          m17.detachFromConnection(i45, e79, null, true);
        });
        this.unregisterEndpoint(i45);
        m17.destroy(i45);
        j2(r53, function(e79) {
          t61.deleteConnection(e79, { force: true, endpointToIgnore: i45 });
        });
        if (o42 != null) {
          this.deleteEndpoint(o42);
        }
      }
      return this;
    } }, { key: "addEndpoint", value: function e78(n91, t61, i45) {
      i45 = i45 || {};
      var o42 = u2({}, i45);
      u2(o42, t61 || {});
      var r53 = u2({ element: n91 }, o42);
      return this._internal_newEndpoint(r53);
    } }, { key: "addEndpoints", value: function e78(n91, t61, i45) {
      var o42 = [];
      for (var r53 = 0, s41 = t61.length; r53 < s41; r53++) {
        o42.push(this.addEndpoint(n91, t61[r53], i45));
      }
      return o42;
    } }, { key: "reset", value: function e78() {
      var n91 = this;
      this.silently(function() {
        n91.endpointsByElement = {};
        n91._managedElements = {};
        n91.endpointsByUUID.clear();
        n91.viewport.reset();
        n91.router.reset();
        n91.groupManager.reset();
        n91.connections.length = 0;
      });
    } }, { key: "destroy", value: function e78() {
      this.reset();
      this.unbind();
      this.sourceSelectors.length = 0;
      this.targetSelectors.length = 0;
      this._connectionTypes.clear();
      this._endpointTypes.clear();
    } }, { key: "getEndpoints", value: function e78(n91) {
      return this.endpointsByElement[this.getId(n91)] || [];
    } }, { key: "getEndpoint", value: function e78(n91) {
      return this.endpointsByUUID.get(n91);
    } }, { key: "connect", value: function e78(n91, t61, i45) {
      try {
        var o42 = this._prepareConnectionParams(n91, t61), r53 = this._newConnection(o42);
        this._finaliseConnection(r53, i45, o42, null);
        return r53;
      } catch (e79) {
        Q(e79);
        return;
      }
    } }, { key: "_prepareConnectionParams", value: function e78(n91, t61) {
      var i45 = u2({}, n91);
      if (t61) {
        u2(i45, t61);
      }
      var o42 = i45;
      if (o42.source && C9(o42.source)) {
        o42.sourceEndpoint = o42.source;
      }
      if (o42.target && C9(o42.target)) {
        o42.targetEndpoint = o42.target;
      }
      if (o42.sourceEndpoint != null) {
        if (m17.isFull(o42.sourceEndpoint)) {
          throw m6;
        }
        if (!o42.type) {
          o42.type = o42.sourceEndpoint.edgeType;
        }
        if (o42.sourceEndpoint.connectorOverlays) {
          o42.overlays = o42.overlays || [];
          for (var r53 = 0, s41 = o42.sourceEndpoint.connectorOverlays.length; r53 < s41; r53++) {
            o42.overlays.push(o42.sourceEndpoint.connectorOverlays[r53]);
          }
        }
        if (o42.sourceEndpoint.scope) {
          o42.scope = o42.sourceEndpoint.scope;
        }
      } else {
        if (o42.source == null) {
          throw S4;
        }
      }
      if (o42.targetEndpoint != null) {
        if (m17.isFull(o42.targetEndpoint)) {
          throw O4;
        }
      } else {
        if (o42.target == null) {
          throw q2;
        }
      }
      if (o42.sourceEndpoint && o42.targetEndpoint) {
        if (!ve(o42.sourceEndpoint, o42.targetEndpoint)) {
          throw "Cannot establish connection: scopes do not match";
        }
      }
      return o42;
    } }, { key: "_newConnection", value: function e78(n91) {
      n91.id = "con_" + this._idstamp();
      var t61 = new b20(this, n91);
      Ee2(t61, this._managedElements[t61.sourceId], this._managedElements[t61.targetId]);
      this._paintConnection(t61);
      return t61;
    } }, { key: "_finaliseConnection", value: function e78(n91, t61, i45, o42) {
      if (!n91.suspendedEndpoint) {
        this.connections.push(n91);
      }
      n91.pending = null;
      n91.endpoints[0].isTemporarySource = false;
      this.repaint(n91.source);
      var r53 = { connection: n91, source: n91.source, target: n91.target, sourceId: n91.sourceId, targetId: n91.targetId, sourceEndpoint: n91.endpoints[0], targetEndpoint: n91.endpoints[1], addedByMouse: t61 };
      this._connectionEstablished(r53);
      this.fire(n10, r53, o42);
      this.fire(r16, r53, o42);
    } }, { key: "removeAllEndpoints", value: function e78(n91, t61) {
      var i45 = this;
      var o42 = function e79(n92) {
        var t62 = i45.getId(n92), o43 = i45.endpointsByElement[t62], r53, s41;
        if (o43) {
          for (r53 = 0, s41 = o43.length; r53 < s41; r53++) {
            i45.deleteEndpoint(o43[r53]);
          }
        }
        delete i45.endpointsByElement[t62];
      };
      if (t61) {
        this._getAssociatedElements(n91).map(o42);
      }
      o42(n91);
      return this;
    } }, { key: "_createSourceDefinition", value: function e78(n91, t61) {
      var i45 = u2({}, t61);
      u2(i45, n91);
      i45.edgeType = i45.edgeType || r7;
      var o42 = this._deriveEndpointAndAnchorSpec(i45.edgeType);
      i45.endpoint = i45.endpoint || o42.endpoints[0];
      i45.anchor = i45.anchor || o42.anchors[0];
      var r53 = i45.maxConnections || -1;
      var s41 = { def: u2({}, i45), uniqueEndpoint: i45.uniqueEndpoint, maxConnections: r53, enabled: true, endpoint: null };
      return s41;
    } }, { key: "addSourceSelector", value: function e78(n91, t61) {
      var i45 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var o42 = this._createSourceDefinition(t61);
      var r53 = new i24(n91, o42, i45);
      this.sourceSelectors.push(r53);
      return r53;
    } }, { key: "removeSourceSelector", value: function e78(n91) {
      E(this.sourceSelectors, function(e79) {
        return e79 === n91;
      });
    } }, { key: "removeTargetSelector", value: function e78(n91) {
      E(this.targetSelectors, function(e79) {
        return e79 === n91;
      });
    } }, { key: "addTargetSelector", value: function e78(n91, t61) {
      var i45 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var o42 = this._createTargetDefinition(t61);
      var r53 = new i24(n91, o42, i45);
      this.targetSelectors.push(r53);
      return r53;
    } }, { key: "_createTargetDefinition", value: function e78(n91, t61) {
      var i45 = u2({}, t61);
      u2(i45, n91);
      i45.edgeType = i45.edgeType || r7;
      var o42 = i45.maxConnections || -1;
      var r53 = { def: u2({}, i45), uniqueEndpoint: i45.uniqueEndpoint, maxConnections: o42, enabled: true, endpoint: null };
      return r53;
    } }, { key: "show", value: function e78(n91, t61) {
      return this._setVisible(n91, o7, t61);
    } }, { key: "hide", value: function e78(n91, t61) {
      return this._setVisible(n91, v5, t61);
    } }, { key: "_setVisible", value: function e78(n91, t61, i45) {
      var o42 = t61 === o7;
      var r53 = null;
      if (i45) {
        r53 = function e79(n92) {
          m17.setVisible(n92, o42, true, true);
        };
      }
      var s41 = this.getId(n91);
      this._operation(n91, function(e79) {
        if (o42 && i45) {
          var n92 = e79.sourceId === s41 ? 1 : 0;
          if (e79.endpoints[n92].visible) {
            B8.setVisible(e79, true);
          }
        } else {
          B8.setVisible(e79, o42);
        }
      }, r53);
      return this;
    } }, { key: "toggleVisible", value: function e78(n91, t61) {
      var i45 = null;
      if (t61) {
        i45 = function e79(n92) {
          m17.setVisible(n92, !n92.visible);
        };
      }
      this._operation(n91, function(e79) {
        B8.setVisible(e79, !e79.visible);
      }, i45);
    } }, { key: "_operation", value: function e78(n91, t61, i45) {
      var o42 = this.getId(n91);
      var r53 = this.endpointsByElement[o42];
      if (r53 && r53.length) {
        for (var s41 = 0, a48 = r53.length; s41 < a48; s41++) {
          for (var l48 = 0, u52 = r53[s41].connections.length; l48 < u52; l48++) {
            var c47 = t61(r53[s41].connections[l48]);
            if (c47) {
              return;
            }
          }
          if (i45) {
            i45(r53[s41]);
          }
        }
      }
    } }, { key: "registerConnectionType", value: function e78(n91, t61) {
      this._connectionTypes.set(n91, u2({}, t61));
      if (t61.overlays) {
        var i45 = {};
        for (var o42 = 0; o42 < t61.overlays.length; o42++) {
          var r53 = v17(t61.overlays[o42]);
          i45[r53.options.id] = r53;
        }
        this._connectionTypes.get(n91).overlays = i45;
      }
    } }, { key: "registerConnectionTypes", value: function e78(n91) {
      for (var t61 in n91) {
        this.registerConnectionType(t61, n91[t61]);
      }
    } }, { key: "registerEndpointType", value: function e78(n91, t61) {
      this._endpointTypes.set(n91, u2({}, t61));
      if (t61.overlays) {
        var i45 = {};
        for (var o42 = 0; o42 < t61.overlays.length; o42++) {
          var r53 = v17(t61.overlays[o42]);
          i45[r53.options.id] = r53;
        }
        this._endpointTypes.get(n91).overlays = i45;
      }
    } }, { key: "registerEndpointTypes", value: function e78(n91) {
      for (var t61 in n91) {
        this.registerEndpointType(t61, n91[t61]);
      }
    } }, { key: "getType", value: function e78(n91, t61) {
      return t61 === "connection" ? this.getConnectionType(n91) : this.getEndpointType(n91);
    } }, { key: "getConnectionType", value: function e78(n91) {
      return this._connectionTypes.get(n91);
    } }, { key: "getEndpointType", value: function e78(n91) {
      return this._endpointTypes.get(n91);
    } }, { key: "importDefaults", value: function e78(n91) {
      for (var t61 in n91) {
        this.defaults[t61] = n91[t61];
      }
      if (this.defaults[u20] != null) {
        this.defaults[u20].strokeWidth = this.defaults[u20].strokeWidth || 2;
      }
      return this;
    } }, { key: "restoreDefaults", value: function e78() {
      this.defaults = u2({}, this._initialDefaults);
      return this;
    } }, { key: "getManagedElements", value: function e78() {
      return this._managedElements;
    } }, { key: "proxyConnection", value: function e78(n91, t61, i45, o42, r53) {
      var s41 = n91.proxies[t61] != null, a48, l48 = s41 ? n91.proxies[t61].originalEp.elementId : n91.endpoints[t61].elementId, u52 = s41 ? n91.proxies[t61].originalEp : n91.endpoints[t61], d32 = this.getId(i45);
      if (n91.proxies[t61]) {
        if (n91.proxies[t61].ep.elementId === d32) {
          a48 = n91.proxies[t61].ep;
        } else {
          m17.detachFromConnection(n91.proxies[t61].ep, n91, t61);
          a48 = this._internal_newEndpoint({ element: i45, endpoint: o42(n91, t61), anchor: r53(n91, t61), parameters: { isProxyEndpoint: true } });
        }
      } else {
        a48 = this._internal_newEndpoint({ element: i45, endpoint: o42(n91, t61), anchor: r53(n91, t61), parameters: { isProxyEndpoint: true } });
      }
      a48.deleteOnEmpty = true;
      n91.proxies[t61] = { ep: a48, originalEp: u52 };
      this.sourceOrTargetChanged(l48, d32, n91, i45, t61);
      m17.detachFromConnection(u52, n91, null, true);
      a48.connections = [n91];
      n91.endpoints[t61] = a48;
      u52.proxiedBy = a48;
      m17.setVisible(u52, false);
      B8.setVisible(n91, true);
      this.revalidate(i45);
    } }, { key: "unproxyConnection", value: function e78(n91, t61) {
      if (n91.proxies == null || n91.proxies[t61] == null) {
        return;
      }
      var i45 = n91.proxies[t61].originalEp.element, o42 = n91.proxies[t61].originalEp.elementId, r53 = n91.proxies[t61].ep.elementId;
      n91.endpoints[t61] = n91.proxies[t61].originalEp;
      delete n91.proxies[t61].originalEp.proxiedBy;
      this.sourceOrTargetChanged(r53, o42, n91, i45, t61);
      m17.detachFromConnection(n91.proxies[t61].ep, n91, null);
      m17.addConnection(n91.proxies[t61].originalEp, n91);
      if (n91.visible) {
        m17.setVisible(n91.proxies[t61].originalEp, true);
      }
      n91.proxies[t61] = null;
      if (O2(n91.proxies, function(e79) {
        return e79 != null;
      }) === -1) {
        n91.proxies.length = 0;
      }
    } }, { key: "sourceOrTargetChanged", value: function e78(n91, t61, i45, o42, r53) {
      if (n91 !== t61) {
        if (r53 === 0) {
          i45.sourceId = t61;
          i45.source = o42;
        } else if (r53 === 1) {
          i45.targetId = t61;
          i45.target = o42;
        }
        _e(i45, this._managedElements[n91]);
        Ee2(i45, this._managedElements[t61]);
      }
    } }, { key: "getGroup", value: function e78(n91) {
      return this.groupManager.getGroup(n91);
    } }, { key: "getGroupFor", value: function e78(n91) {
      return this.groupManager.getGroupFor(n91);
    } }, { key: "addGroup", value: function e78(n91, t61) {
      return this.groupManager.addGroup(n91, t61);
    } }, { key: "addToGroup", value: function e78(n91) {
      var t61;
      for (var i45 = arguments.length, o42 = new Array(i45 > 1 ? i45 - 1 : 0), r53 = 1; r53 < i45; r53++) {
        o42[r53 - 1] = arguments[r53];
      }
      return (t61 = this.groupManager).addToGroup.apply(t61, [n91, false].concat(o42));
    } }, { key: "collapseGroup", value: function e78(n91) {
      this.groupManager.collapseGroup(n91);
    } }, { key: "expandGroup", value: function e78(n91) {
      this.groupManager.expandGroup(n91);
    } }, { key: "toggleGroup", value: function e78(n91) {
      this.groupManager.toggleGroup(n91);
    } }, { key: "removeGroup", value: function e78(n91, t61, i45, o42) {
      return this.groupManager.removeGroup(n91, t61, i45, o42);
    } }, { key: "removeAllGroups", value: function e78(n91, t61) {
      this.groupManager.removeAllGroups(n91, t61, false);
    } }, { key: "removeFromGroup", value: function e78(n91, t61, i45) {
      this.groupManager.removeFromGroup(n91, i45, t61);
      this._appendElement(t61, this.getContainer());
      this.updateOffset({ recalc: true, elId: this.getId(t61) });
    } }, { key: "_paintEndpoint", value: function e78(n91, t61) {
      function i45(e79) {
        var n92 = 0;
        if (t61.elementWithPrecedence != null) {
          for (var i46 = 0; i46 < e79.connections.length; i46++) {
            if (e79.connections[i46].sourceId === t61.elementWithPrecedence || e79.connections[i46].targetId === t61.elementWithPrecedence) {
              n92 = i46;
              break;
            }
          }
        }
        return e79.connections[n92];
      }
      t61 = t61 || {};
      var o42 = t61.timestamp, r53 = !(t61.recalc === false);
      if (!o42 || n91.timestamp !== o42) {
        var s41 = this.viewport.getPosition(n91.elementId);
        var a48 = t61.offset ? { x: t61.offset.x, y: t61.offset.y } : { x: s41.x, y: s41.y };
        if (a48 != null) {
          var l48 = t61.anchorLoc;
          if (l48 == null) {
            var u52 = { xy: a48, wh: s41, element: n91, timestamp: o42, otherAnchor: t61.otherAnchor };
            if (r53 && this.router.isDynamicAnchor(n91) && n91.connections.length > 0) {
              var c47 = i45(n91), d32 = c47.endpoints[0] === n91 ? 1 : 0, p49 = d32 === 0 ? c47.sourceId : c47.targetId, f45 = this.viewport.getPosition(p49);
              u52.index = d32 === 0 ? 1 : 0;
              u52.connection = c47;
              u52.txy = f45;
              u52.twh = f45;
              u52.tElement = c47.endpoints[d32];
              u52.tRotation = this._getRotations(p49);
            } else if (n91.connections.length > 0) {
              u52.connection = n91.connections[0];
            }
            u52.rotation = this._getRotations(n91.elementId);
            l48 = this.router.computeAnchorLocation(n91._anchor, u52);
          }
          n91.endpoint.computedValue = c21.compute(n91.endpoint, l48, this.router.getEndpointOrientation(n91), n91.paintStyleInUse);
          n91.endpoint.bounds.xmin = n91.endpoint.x;
          n91.endpoint.bounds.ymin = n91.endpoint.y;
          n91.endpoint.bounds.xmax = n91.endpoint.x + n91.endpoint.w;
          n91.endpoint.bounds.ymax = n91.endpoint.y + n91.endpoint.h;
          this.renderEndpoint(n91, n91.paintStyleInUse);
          n91.timestamp = o42;
        }
      }
    } }, { key: "_paintConnection", value: function e78(n91, t61) {
      if (!this._suspendDrawing && n91.visible !== false) {
        t61 = t61 || {};
        var i45 = t61.timestamp;
        if (i45 != null && i45 === n91.lastPaintedAt) {
          return;
        }
        if (i45 == null || i45 !== n91.lastPaintedAt) {
          this.router.computePath(n91, i45);
          var o42 = { xmin: Infinity, ymin: Infinity, xmax: -Infinity, ymax: -Infinity };
          for (var r53 in n91.overlays) {
            if (n91.overlays.hasOwnProperty(r53)) {
              var s41 = n91.overlays[r53];
              if (s41.isVisible()) {
                n91.overlayPlacements[r53] = this.drawOverlay(s41, n91.connector, n91.paintStyleInUse, B8.getAbsoluteOverlayPosition(n91, s41));
                o42.xmin = Math.min(o42.xmin, n91.overlayPlacements[r53].xmin);
                o42.xmax = Math.max(o42.xmax, n91.overlayPlacements[r53].xmax);
                o42.ymin = Math.min(o42.ymin, n91.overlayPlacements[r53].ymin);
                o42.ymax = Math.max(o42.ymax, n91.overlayPlacements[r53].ymax);
              }
            }
          }
          var a48 = parseFloat("" + n91.paintStyleInUse.strokeWidth || "1") / 2, l48 = parseFloat("" + n91.paintStyleInUse.strokeWidth || "0"), u52 = { xmin: Math.min(n91.connector.bounds.xmin - (a48 + l48), o42.xmin), ymin: Math.min(n91.connector.bounds.ymin - (a48 + l48), o42.ymin), xmax: Math.max(n91.connector.bounds.xmax + (a48 + l48), o42.xmax), ymax: Math.max(n91.connector.bounds.ymax + (a48 + l48), o42.ymax) };
          this.paintConnector(n91.connector, n91.paintStyleInUse, u52);
          for (var c47 in n91.overlays) {
            if (n91.overlays.hasOwnProperty(c47)) {
              var d32 = n91.overlays[c47];
              if (d32.isVisible()) {
                this._paintOverlay(d32, n91.overlayPlacements[c47], u52);
              }
            }
          }
        }
        n91.lastPaintedAt = i45;
      }
    } }, { key: "_refreshEndpoint", value: function e78(n91) {
      if (!n91._anchor.isFloating) {
        if (n91.connections.length > 0) {
          this.addEndpointClass(n91, this.endpointConnectedClass);
        } else {
          this.removeEndpointClass(n91, this.endpointConnectedClass);
        }
        if (m17.isFull(n91)) {
          this.addEndpointClass(n91, this.endpointFullClass);
        } else {
          this.removeEndpointClass(n91, this.endpointFullClass);
        }
      }
    } }, { key: "addOverlay", value: function e78(n91, t61, i45) {
      var o42 = P9(n91, t61);
      if (o42 != null) {
        o42.ignoreTypes = true;
        if (!i45) {
          var r53 = n91.source;
          this.revalidate(r53);
        }
      }
      return o42;
    } }, { key: "removeOverlay", value: function e78(n91, t61) {
      k12(n91, t61);
      var i45 = n91.source;
      this.revalidate(i45);
    } }, { key: "setOutlineColor", value: function e78(n91, t61) {
      n91.paintStyleInUse.outlineStroke = t61;
      this._paintConnection(n91);
    } }, { key: "setOutlineWidth", value: function e78(n91, t61) {
      n91.paintStyleInUse.outlineWidth = t61;
      this._paintConnection(n91);
    } }, { key: "setColor", value: function e78(n91, t61) {
      n91.paintStyleInUse.stroke = t61;
      this._paintConnection(n91);
    } }, { key: "setLineWidth", value: function e78(n91, t61) {
      n91.paintStyleInUse.strokeWidth = t61;
      this._paintConnection(n91);
    } }, { key: "setLineStyle", value: function e78(n91, t61) {
      if (t61.lineWidth != null) {
        n91.paintStyleInUse.strokeWidth = t61.lineWidth;
      }
      if (t61.outlineWidth != null) {
        n91.paintStyleInUse.outlineWidth = t61.outlineWidth;
      }
      if (t61.color != null) {
        n91.paintStyleInUse.stroke = t61.color;
      }
      if (t61.outlineColor != null) {
        n91.paintStyleInUse.outlineStroke = t61.outlineColor;
      }
      this._paintConnection(n91);
    } }, { key: "getModelObjectFromEndpoint", value: function e78(n91) {
      var t61 = n91.parameters, i45 = this.toolkit.getNode(t61.vertexId), o42 = t61.portId ? i45.addPort({ id: t61.portId, type: t61.portType }) : i45;
      return o42;
    } }, { key: "getPathData", value: function e78(n91) {
      var t61 = "";
      for (var i45 = 0; i45 < n91.segments.length; i45++) {
        t61 += e47.getPath(n91.segments[i45], i45 === 0);
        t61 += " ";
      }
      return t61;
    } }]);
    return ke3;
  }(f17);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/browser-ui-renderer/dot-endpoint-renderer.js
  var i28 = "circle";
  var n62 = function n63() {
    ft(u23.type, { makeNode: function r53(t61, e78) {
      return D3(i28, { cx: t61.w / 2, cy: t61.h / 2, r: t61.radius });
    }, updateNode: function r53(o42, e78) {
      z3(e78, { cx: "" + o42.w / 2, cy: "" + o42.h / 2, r: "" + o42.radius });
    } });
  };

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/browser-ui-renderer/blank-endpoint-renderer.js
  var o28 = { width: 10, height: 0, fill: "transparent", stroke: "transparent" };
  var i29 = function i30() {
    ft(o19.type, { makeNode: function t61(n91, e78) {
      return D3("rect", o28);
    }, updateNode: function t61(r53, e78) {
      z3(e78, o28);
    } });
  };

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/browser-ui-renderer/rectangle-endpoint-renderer.js
  var i31 = "rect";
  var n64 = function n65() {
    ft(o18.type, { makeNode: function t61(o42, r53) {
      return D3(i31, { width: o42.w, height: o42.h });
    }, updateNode: function t61(e78, r53) {
      z3(r53, { width: e78.w, height: e78.h });
    } });
  };

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/browser-ui-renderer/browser-jsplumb-instance.js
  var ht = {};
  function ft(e78, t61) {
    ht[e78] = t61;
  }
  function dt(t61, n91, o42) {
    var r53 = n91;
    var i45 = e(n91.getBoundingClientRect) !== a10 ? n91.getBoundingClientRect() : { left: 0, top: 0, width: 0, height: 0 }, a48 = document.body, s40 = document.documentElement, l48 = window.pageYOffset || s40.scrollTop || a48.scrollTop, c47 = window.pageXOffset || s40.scrollLeft || a48.scrollLeft, u52 = s40.clientTop || a48.clientTop || 0, v41 = s40.clientLeft || a48.clientLeft || 0, h35 = 0, f45 = 0, d32 = i45.top + l48 - u52 + h35 * o42, g31 = i45.left + c47 - v41 + f45 * o42, p49 = q4(t61), m44 = i45.width || r53.offsetWidth * o42, y34 = i45.height || r53.offsetHeight * o42, C19 = (p49.x - g31) / m44, _17 = (p49.y - d32) / y34;
    return { x: C19, y: _17 };
  }
  function gt(e78) {
    return m27(e78) || l24(e78) || n52(e78);
  }
  function pt(e78) {
    return c19(e78) && e78.useHTMLElement !== true;
  }
  function mt(e78, t61) {
    if (e78.canvas) {
      e78.canvas.style.display = t61 ? "block" : "none";
    }
  }
  function yt(e78) {
    if (e78.canvas) {
      e78.canvas.parentNode.removeChild(e78.canvas);
    }
    delete e78.canvas;
  }
  function Ct(e78) {
    return e78.canvas;
  }
  function _t(e78) {
    if (e78.useHTMLElement) {
      var t61 = c31.getElement(e78);
      h5(t61, e78.instance.labelOverlayClass);
      return t61;
    } else {
      f25(e78);
      return e78.textElement;
    }
  }
  function Mt(e78) {
    return c31.getElement(e78, e78.component, function(t61) {
      var n91 = e78.create(t61);
      h5(n91, e78.instance.overlayClass);
      return n91;
    });
  }
  n62();
  i29();
  n64();
  var bt = function(T18) {
    a(at, T18);
    var Be = s(at);
    function at(e78, t61, n91) {
      var a48;
      t(this, at);
      a48 = Be.call(this, e78, t61, n91);
      a48.toolkit = e78;
      o(l(a48), "containerType", null);
      o(l(a48), "dragSelection", void 0);
      o(l(a48), "dragManager", void 0);
      o(l(a48), "_connectorClick", void 0);
      o(l(a48), "_connectorDblClick", void 0);
      o(l(a48), "_connectorTap", void 0);
      o(l(a48), "_connectorDblTap", void 0);
      o(l(a48), "_endpointClick", void 0);
      o(l(a48), "_endpointDblClick", void 0);
      o(l(a48), "_overlayClick", void 0);
      o(l(a48), "_overlayDblClick", void 0);
      o(l(a48), "_overlayTap", void 0);
      o(l(a48), "_overlayDblTap", void 0);
      o(l(a48), "_connectorMouseover", void 0);
      o(l(a48), "_connectorMouseout", void 0);
      o(l(a48), "_endpointMouseover", void 0);
      o(l(a48), "_endpointMouseout", void 0);
      o(l(a48), "_connectorContextmenu", void 0);
      o(l(a48), "_connectorMousedown", void 0);
      o(l(a48), "_connectorMouseup", void 0);
      o(l(a48), "_endpointMousedown", void 0);
      o(l(a48), "_endpointMouseup", void 0);
      o(l(a48), "_overlayMouseover", void 0);
      o(l(a48), "_overlayMouseout", void 0);
      o(l(a48), "_elementClick", void 0);
      o(l(a48), "_elementTap", void 0);
      o(l(a48), "_elementDblTap", void 0);
      o(l(a48), "_elementMouseenter", void 0);
      o(l(a48), "_elementMouseexit", void 0);
      o(l(a48), "_elementMousemove", void 0);
      o(l(a48), "_elementMouseup", void 0);
      o(l(a48), "_elementMousedown", void 0);
      o(l(a48), "_elementContextmenu", void 0);
      o(l(a48), "_resizeObserver", void 0);
      o(l(a48), "eventManager", void 0);
      o(l(a48), "draggingClass", "jtk-dragging");
      o(l(a48), "elementDraggingClass", "jtk-element-dragging");
      o(l(a48), "hoverClass", "jtk-hover");
      o(l(a48), "sourceElementDraggingClass", "jtk-source-element-dragging");
      o(l(a48), "targetElementDraggingClass", "jtk-target-element-dragging");
      o(l(a48), "hoverSourceClass", "jtk-source-hover");
      o(l(a48), "hoverTargetClass", "jtk-target-hover");
      o(l(a48), "dragSelectClass", "jtk-drag-select");
      o(l(a48), "managedElementsSelector", void 0);
      o(l(a48), "_hoverEvents", void 0);
      o(l(a48), "getEffectiveVisibleZoom", void 0);
      o(l(a48), "elementsDraggable", void 0);
      o(l(a48), "elementDragHandler", void 0);
      o(l(a48), "groupDragOptions", void 0);
      o(l(a48), "elementDragOptions", void 0);
      o(l(a48), "onElementDragInit", void 0);
      o(l(a48), "svg", { node: function e79(t62, n92) {
        return D3(t62, n92);
      }, attr: function e79(t62, n92) {
        return z3(t62, n92);
      }, pos: function e79(t62) {
        return E3(t62);
      } });
      o(l(a48), "beforeDetach", void 0);
      o(l(a48), "beforeDrag", void 0);
      o(l(a48), "beforeStartDetach", void 0);
      o(l(a48), "beforeDrop", void 0);
      n91 = n91 || {};
      a48.containerType = b4(a48.getContainer());
      a48.elementsDraggable = n91 && n91.elementsDraggable !== false;
      a48._hoverEvents = n91.hoverEvents === true;
      a48.onElementDragInit = t61.onElementDragInit || function(e79) {
        return null;
      };
      a48.managedElementsSelector = n91 ? n91.managedElementsSelector || y4 : y4;
      a48.eventManager = new oe();
      a48.dragSelection = new l22(l(a48));
      a48.dragManager = new y18(l(a48), a48.dragSelection, { useSvgContainer: n91.useSvgContainer, getCompoundZoom: t61.getCompoundZoom });
      a48.dragManager.addHandler(new ne2(l(a48)));
      a48.getEffectiveVisibleZoom = function() {
        var e79 = t61.getCompoundZoom ? t61.getCompoundZoom() : 1;
        return a48.currentZoom * e79;
      };
      var s40 = new c30(l(a48), a48.dragSelection, function(e79) {
        return a48.onElementDragInit(e79);
      });
      var l48 = s40.getConstrainFunction();
      a48.groupDragOptions = { constrainFunction: l48 };
      a48.beforeDetach = t61.beforeDetach || function(e79, t62) {
        return true;
      };
      a48.beforeDrag = t61.beforeDrag || function(e79) {
        return true;
      };
      a48.beforeStartDetach = t61.beforeStartDetach || function(e79) {
        return true;
      };
      a48.beforeDrop = t61.beforeDrop || function(e79) {
        return true;
      };
      a48.dragManager.addHandler(s40, a48.groupDragOptions);
      a48.elementDragHandler = new I12(l(a48), a48.dragSelection, function(e79) {
        return a48.onElementDragInit(e79);
      });
      a48.elementDragOptions = n91 && n91.dragOptions || {};
      a48.dragManager.addHandler(a48.elementDragHandler, a48.elementDragOptions);
      if (n91 && n91.dragOptions && n91.dragOptions.filter) {
        a48.dragManager.addFilter(n91.dragOptions.filter);
      }
      a48._createEventListeners();
      a48._attachEventDelegates();
      if (n91.resizeObserver !== false) {
        try {
          a48._resizeObserver = new ResizeObserver(function(e79) {
            var t62 = e79.filter(function(e80) {
              var t63 = a48.getAttribute(e80.target, f7);
              if (t63 != null) {
                var n92 = a48.viewport._elementMap.get(t63);
                return n92 ? n92.w !== e80.contentRect.width || n92.h !== e80.contentRect.height : false;
              } else {
                return false;
              }
            });
            t62.forEach(function(e80) {
              a48.revalidate(e80.target);
            });
          });
        } catch (e79) {
          Q("WARN: ResizeObserver could not be attached.");
        }
      }
      return a48;
    }
    n(at, [{ key: "fireOverlayMethod", value: function e78(t61, n91, o42) {
      var r53 = j15;
      var i45 = "".concat(r53, ":").concat(n91);
      o42._jsPlumbOverlay = t61;
      t61.fire(n91, { e: o42, overlay: t61 });
      this.fire(i45, t61.component, o42);
    } }, { key: "addDragFilter", value: function e78(t61, n91) {
      this.dragManager.addFilter(t61, n91);
    } }, { key: "removeDragFilter", value: function e78(t61) {
      this.dragManager.removeFilter(t61);
    } }, { key: "setDragGrid", value: function e78(t61) {
      this.dragManager.setOption(this.elementDragHandler, { grid: t61 });
    } }, { key: "setDragConstrainFunction", value: function e78(t61) {
      this.dragManager.setOption(this.elementDragHandler, { constrainFunction: t61 });
    } }, { key: "_removeElement", value: function e78(t61) {
      t61.parentNode && t61.parentNode.removeChild(t61);
    } }, { key: "_appendElement", value: function e78(t61, n91) {
      if (n91) {
        n91.appendChild(t61);
      }
    } }, { key: "_appendElementToGroup", value: function e78(t61, n91) {
      this._appendElement(n91, t61.contentArea);
    } }, { key: "_appendElementToContainer", value: function e78(t61) {
      this._appendElement(t61, this.getContainer());
    } }, { key: "_getAssociatedElements", value: function e78(t61) {
      var n91 = [];
      if (t61.nodeType !== 3 && t61.nodeType !== 8) {
        var o42 = t61.querySelectorAll(y4);
        Array.prototype.push.apply(n91, o42);
      }
      return n91.filter(function(e79) {
        return e79.nodeType !== 3 && e79.nodeType !== 8;
      });
    } }, { key: "getClass", value: function e78(t61) {
      return v4(t61);
    } }, { key: "addClass", value: function e78(t61, n91) {
      h5(t61, n91);
    } }, { key: "hasClass", value: function e78(t61, n91) {
      return g4(t61, n91);
    } }, { key: "removeClass", value: function e78(t61, n91) {
      y3(t61, n91);
    } }, { key: "toggleClass", value: function e78(t61, n91) {
      L2(t61, n91);
    } }, { key: "setAttribute", value: function e78(t61, n91, o42) {
      t61.setAttribute(n91, o42);
    } }, { key: "getAttribute", value: function e78(t61, n91) {
      return t61.getAttribute(n91);
    } }, { key: "setAttributes", value: function e78(t61, n91) {
      for (var o42 in n91) {
        t61.setAttribute(o42, n91[o42]);
      }
    } }, { key: "removeAttribute", value: function e78(t61, n91) {
      t61.removeAttribute && t61.removeAttribute(n91);
    } }, { key: "on", value: function e78(t61, n91, o42, r53) {
      var i45 = this;
      var a48 = function e79(t62) {
        if (r53 == null) {
          i45.eventManager.on(t62, n91, o42);
        } else {
          i45.eventManager.on(t62, n91, o42, r53);
        }
      };
      if (p4(t61)) {
        j2(t61, function(e79) {
          return a48(e79);
        });
      } else {
        a48(t61);
      }
      return this;
    } }, { key: "off", value: function e78(t61, n91, o42) {
      var r53 = this;
      if (p4(t61)) {
        j2(t61, function(e79) {
          return r53.eventManager.off(e79, n91, o42);
        });
      } else {
        this.eventManager.off(t61, n91, o42);
      }
      return this;
    } }, { key: "trigger", value: function e78(t61, n91, o42, r53, i45) {
      this.eventManager.trigger(t61, n91, o42, r53, i45);
    } }, { key: "getOffsetRelativeToRoot", value: function e78(t61) {
      return S3(t61);
    } }, { key: "_adjustForParents", value: function e78(t61, n91, o42) {
      function r53(e79) {
        if (e79.offsetParent != null) {
          return e79.offsetParent;
        } else {
          return e79.parentNode;
        }
      }
      var i45 = t61 !== o42 && r53(t61) !== o42 ? r53(t61) : null, a48 = function e79(t62) {
        if (t62 != null && t62 !== document.body && !isNaN(t62.scrollTop) && !isNaN(t62.scrollLeft) && (t62.scrollTop > 0 || t62.scrollLeft > 0)) {
          n91.x -= t62.scrollLeft;
          n91.y -= t62.scrollTop;
        }
      };
      while (i45 != null) {
        var s40 = a7(i45) || { x: 0, y: 0 };
        n91.x += s40.x;
        n91.y += s40.y;
        a48(i45);
        i45 = r53(i45) === o42 ? null : r53(i45);
      }
    } }, { key: "getOffset", value: function e78(t61) {
      var n91 = t61;
      var o42 = this.getContainer();
      var r53 = a7(n91);
      this._adjustForParents(n91, r53, o42);
      if (o42 != null && !isNaN(o42.scrollTop) && !isNaN(o42.scrollLeft) && (o42.scrollTop > 0 || o42.scrollLeft > 0)) {
        var i45 = n91.offsetParent != null ? this.getStyle(n91.offsetParent, k15) : u7, a48 = this.getStyle(n91, k15);
        if (a48 !== s5 && a48 !== l6 && i45 !== s5 && i45 !== l6) {
          r53.x -= o42.scrollLeft;
          r53.y -= o42.scrollTop;
        }
      }
      return r53;
    } }, { key: "getSize", value: function e78(t61) {
      return n5(t61, this.currentZoom);
    } }, { key: "getInternalSize", value: function e78(t61) {
      return r5(t61);
    } }, { key: "getPosition", value: function e78(t61) {
      return a7(t61);
    } }, { key: "getStyle", value: function t61(n91, o42) {
      if (e(window.getComputedStyle) !== a10) {
        return getComputedStyle(n91, null).getPropertyValue(o42);
      } else {
        return n91.currentStyle[o42];
      }
    } }, { key: "getGroupContentArea", value: function e78(t61) {
      var n91 = this.getSelector(t61.el, g18);
      return n91 && n91.length > 0 ? n91[0] : t61.el;
    } }, { key: "getSelector", value: function e78(t61, n91) {
      return A3.apply(null, arguments);
    } }, { key: "setPosition", value: function e78(t61, n91) {
      i7(t61, n91);
    } }, { key: "setDraggable", value: function e78(t61, n91) {
      if (n91) {
        this.removeAttribute(t61, h6);
      } else {
        this.setAttribute(t61, h6, e11);
      }
    } }, { key: "isDraggable", value: function e78(t61) {
      var n91 = this.getAttribute(t61, h6);
      return n91 == null || n91 === v9;
    } }, { key: "toggleDraggable", value: function e78(t61) {
      var n91 = this.isDraggable(t61);
      this.setDraggable(t61, !n91);
      return !n91;
    } }, { key: "_createEventListeners", value: function e78() {
      var t61 = function e79(t62, n92) {
        if (!n92.defaultPrevented && n92._jsPlumbOverlay == null) {
          var o43 = u6(o6(n92), f23, this.getContainer(), true);
          this.fire(t62, o43.jtk.connector.connection, n92);
        }
      };
      this._connectorClick = t61.bind(this, Q2);
      this._connectorDblClick = t61.bind(this, R2);
      this._connectorTap = t61.bind(this, Y3);
      this._connectorDblTap = t61.bind(this, S5);
      var n91 = function e79(t62, n92) {
        var o43 = o6(n92).parentNode;
        if (o43.jtk && o43.jtk.connector) {
          var r54 = o43.jtk.connector;
          var i46 = r54.connection;
          this.setConnectorHover(r54, t62);
          if (t62) {
            this.addClass(i46.source, this.hoverSourceClass);
            this.addClass(i46.target, this.hoverTargetClass);
          } else {
            this.removeClass(i46.source, this.hoverSourceClass);
            this.removeClass(i46.target, this.hoverTargetClass);
          }
          this.fire(t62 ? U2 : T2, o43.jtk.connector.connection, n92);
        }
      };
      this._connectorMouseover = n91.bind(this, true);
      this._connectorMouseout = n91.bind(this, false);
      var o42 = function e79(t62, n92) {
        var o43 = o6(n92).parentNode;
        if (o43.jtk && o43.jtk.connector) {
          this.fire(t62 ? V4 : W3, o43.jtk.connector.connection, n92);
        }
      };
      this._connectorMouseup = o42.bind(this, true);
      this._connectorMousedown = o42.bind(this, false);
      this._connectorContextmenu = function(e79) {
        var t62 = o6(e79).parentNode;
        if (t62.jtk && t62.jtk.connector) {
          this.fire(X3, t62.jtk.connector.connection, e79);
        }
      }.bind(this);
      var r53 = function e79(t62, n92, o43) {
        if (!n92.defaultPrevented && n92._jsPlumbOverlay == null) {
          this.fire(t62, o43.jtk.endpoint, n92);
        }
      };
      this._endpointClick = r53.bind(this, I3);
      this._endpointDblClick = r53.bind(this, J2);
      var i45 = function e79(t62, n92) {
        var o43 = o6(n92);
        if (o43.jtk && o43.jtk.endpoint) {
          this.setEndpointHover(o43.jtk.endpoint, t62);
          this.fire(t62 ? M4 : L3, o43.jtk.endpoint, n92);
        }
      };
      this._endpointMouseover = i45.bind(this, true);
      this._endpointMouseout = i45.bind(this, false);
      var a48 = function e79(t62, n92) {
        var o43 = o6(n92);
        if (o43.jtk && o43.jtk.endpoint) {
          this.fire(t62 ? N3 : O6, o43.jtk.endpoint, n92);
        }
      };
      this._endpointMouseup = a48.bind(this, true);
      this._endpointMousedown = a48.bind(this, false);
      var s40 = function(e79, t62) {
        var n92 = u6(o6(t62), u30, this.getContainer(), true);
        var o43 = n92.jtk.overlay;
        if (o43) {
          this.fireOverlayMethod(o43, e79, t62);
        }
      }.bind(this);
      this._overlayClick = s40.bind(this, e10);
      this._overlayDblClick = s40.bind(this, n6);
      this._overlayTap = s40.bind(this, l9);
      this._overlayDblTap = s40.bind(this, a9);
      var l48 = function e79(t62, n92) {
        var o43 = u6(o6(n92), u30, this.getContainer(), true);
        var r54 = o43.jtk.overlay;
        if (r54) {
          this.setOverlayHover(r54, t62);
        }
      };
      this._overlayMouseover = l48.bind(this, true);
      this._overlayMouseout = l48.bind(this, false);
      var c47 = function e79(t62, n92, o43) {
        if (!n92.defaultPrevented) {
          this.fire(n92.detail === 1 ? y7 : z4, o43, n92);
        }
      };
      this._elementClick = c47.bind(this, y7);
      var u52 = function e79(t62, n92, o43) {
        if (!n92.defaultPrevented) {
          this.fire(H2, o43, n92);
        }
      };
      this._elementTap = u52.bind(this, H2);
      var v41 = function e79(t62, n92, o43) {
        if (!n92.defaultPrevented) {
          this.fire(A5, o43, n92);
        }
      };
      this._elementDblTap = v41.bind(this, A5);
      var h35 = function e79(t62, n92) {
        this.fire(t62 ? C3 : B4, o6(n92), n92);
      };
      this._elementMouseenter = h35.bind(this, true);
      this._elementMouseexit = h35.bind(this, false);
      this._elementMousemove = function(e79) {
        this.fire(D4, o6(e79), e79);
      }.bind(this);
      this._elementMouseup = function(e79) {
        this.fire(E4, o6(e79), e79);
      }.bind(this);
      this._elementMousedown = function(e79) {
        this.fire(F4, o6(e79), e79);
      }.bind(this);
      this._elementContextmenu = function(e79) {
        this.fire(G3, o6(e79), e79);
      }.bind(this);
    } }, { key: "_attachEventDelegates", value: function e78() {
      var t61 = this.getContainer();
      this.eventManager.on(t61, e10, u30, this._overlayClick);
      this.eventManager.on(t61, n6, u30, this._overlayDblClick);
      this.eventManager.on(t61, l9, u30, this._overlayTap);
      this.eventManager.on(t61, a9, u30, this._overlayDblTap);
      this.eventManager.on(t61, e10, f23, this._connectorClick);
      this.eventManager.on(t61, n6, f23, this._connectorDblClick);
      this.eventManager.on(t61, l9, f23, this._connectorTap);
      this.eventManager.on(t61, a9, f23, this._connectorDblTap);
      this.eventManager.on(t61, e10, l21, this._endpointClick);
      this.eventManager.on(t61, n6, l21, this._endpointDblClick);
      this.eventManager.on(t61, e10, this.managedElementsSelector, this._elementClick);
      this.eventManager.on(t61, l9, this.managedElementsSelector, this._elementTap);
      this.eventManager.on(t61, a9, this.managedElementsSelector, this._elementDblTap);
      this.eventManager.on(t61, o11, f23, this._connectorContextmenu);
      this.eventManager.on(t61, u11, f23, this._connectorMouseup);
      this.eventManager.on(t61, t4, f23, this._connectorMousedown);
      this.eventManager.on(t61, u11, l21, this._endpointMouseup);
      this.eventManager.on(t61, t4, l21, this._endpointMousedown);
      if (this._hoverEvents === true) {
        this.eventManager.on(t61, d8, f23, this._connectorMouseover);
        this.eventManager.on(t61, i8, f23, this._connectorMouseout);
        this.eventManager.on(t61, d8, l21, this._endpointMouseover);
        this.eventManager.on(t61, i8, l21, this._endpointMouseout);
        this.eventManager.on(t61, d8, u30, this._overlayMouseover);
        this.eventManager.on(t61, i8, u30, this._overlayMouseout);
        this.eventManager.on(t61, d8, y4, this._elementMouseenter);
        this.eventManager.on(t61, i8, y4, this._elementMouseexit);
        this.eventManager.on(t61, m10, y4, this._elementMousemove);
      }
      this.eventManager.on(t61, u11, y4, this._elementMouseup);
      this.eventManager.on(t61, t4, y4, this._elementMousedown);
      this.eventManager.on(t61, o11, y4, this._elementContextmenu);
    } }, { key: "_detachEventDelegates", value: function e78() {
      var t61 = this.getContainer();
      if (t61) {
        this.eventManager.off(t61, e10, this._connectorClick);
        this.eventManager.off(t61, n6, this._connectorDblClick);
        this.eventManager.off(t61, l9, this._connectorTap);
        this.eventManager.off(t61, a9, this._connectorDblTap);
        this.eventManager.off(t61, e10, this._endpointClick);
        this.eventManager.off(t61, n6, this._endpointDblClick);
        this.eventManager.off(t61, e10, this._overlayClick);
        this.eventManager.off(t61, n6, this._overlayDblClick);
        this.eventManager.off(t61, l9, this._overlayTap);
        this.eventManager.off(t61, a9, this._overlayDblTap);
        this.eventManager.off(t61, e10, this._elementClick);
        this.eventManager.off(t61, l9, this._elementTap);
        this.eventManager.off(t61, a9, this._elementDblTap);
        this.eventManager.off(t61, o11, this._connectorContextmenu);
        this.eventManager.off(t61, u11, this._connectorMouseup);
        this.eventManager.off(t61, t4, this._connectorMousedown);
        this.eventManager.off(t61, u11, this._endpointMouseup);
        this.eventManager.off(t61, t4, this._endpointMousedown);
        if (this._hoverEvents === true) {
          this.eventManager.off(t61, d8, this._connectorMouseover);
          this.eventManager.off(t61, i8, this._connectorMouseout);
          this.eventManager.off(t61, d8, this._endpointMouseover);
          this.eventManager.off(t61, i8, this._endpointMouseout);
          this.eventManager.off(t61, d8, this._overlayMouseover);
          this.eventManager.off(t61, i8, this._overlayMouseout);
          this.eventManager.off(t61, v8, this._elementMouseenter);
          this.eventManager.off(t61, c8, this._elementMouseexit);
          this.eventManager.off(t61, m10, this._elementMousemove);
        }
        this.eventManager.off(t61, u11, this._elementMouseup);
        this.eventManager.off(t61, t4, this._elementMousedown);
        this.eventManager.off(t61, o11, this._elementContextmenu);
      }
    } }, { key: "setContainer", value: function e78(t61) {
      var n91 = this;
      if (t61 === document || t61 === document.body) {
        throw new Error("Cannot set document or document.body as container element");
      }
      this._detachEventDelegates();
      var o42;
      if (this.dragManager != null) {
        o42 = this.dragManager.reset();
      }
      this.setAttribute(t61, e62, $().replace("-", ""));
      var r53 = this.getContainer();
      if (r53 != null) {
        r53.removeAttribute(e62);
        var i45 = C(r53.childNodes).filter(function(e79) {
          return e79 != null && (n91.hasClass(e79, t29) || n91.hasClass(e79, r32) || n91.hasClass(e79, c28) || e79.getAttribute && e79.getAttribute(f7) != null);
        });
        j2(i45, function(e79) {
          t61.appendChild(e79);
        });
      }
      p(u(at.prototype), "setContainer", this).call(this, t61);
      this.containerType = b4(t61);
      if (this.eventManager != null) {
        this._attachEventDelegates();
      }
      if (this.dragManager != null) {
        this.dragManager.addHandler(new ne2(this));
        this.dragManager.addHandler(new c30(this, this.dragSelection, function(e79) {
          return n91.onElementDragInit(e79);
        }), this.groupDragOptions);
        this.elementDragHandler = new I12(this, this.dragSelection, function(e79) {
          return n91.onElementDragInit(e79);
        });
        this.dragManager.addHandler(this.elementDragHandler, this.elementDragOptions);
        if (o42 != null) {
          this.dragManager.setFilters(o42);
        }
      }
    } }, { key: "reset", value: function e78() {
      p(u(at.prototype), "reset", this).call(this);
      if (this._resizeObserver) {
        this._resizeObserver.disconnect();
      }
      var t61 = this.getContainer();
      var n91 = t61.querySelectorAll([y4, l21, f23, u30].join(","));
      j2(n91, function(e79) {
        return e79.parentNode && e79.parentNode.removeChild(e79);
      });
    } }, { key: "destroy", value: function e78() {
      this._detachEventDelegates();
      if (this.dragManager != null) {
        this.dragManager.reset();
      }
      this.clearDragSelection();
      p(u(at.prototype), "destroy", this).call(this);
    } }, { key: "unmanage", value: function e78(t61, n91) {
      if (this._resizeObserver != null) {
        this._resizeObserver.unobserve(t61);
      }
      this.removeFromDragSelection(t61);
      p(u(at.prototype), "unmanage", this).call(this, t61, n91);
    } }, { key: "addToDragSelection", value: function e78() {
      var t61 = this;
      for (var n91 = arguments.length, o42 = new Array(n91), r53 = 0; r53 < n91; r53++) {
        o42[r53] = arguments[r53];
      }
      j2(o42, function(e79) {
        return t61.dragSelection.add(e79);
      });
    } }, { key: "clearDragSelection", value: function e78() {
      this.dragSelection.clear();
    } }, { key: "removeFromDragSelection", value: function e78() {
      var t61 = this;
      for (var n91 = arguments.length, o42 = new Array(n91), r53 = 0; r53 < n91; r53++) {
        o42[r53] = arguments[r53];
      }
      j2(o42, function(e79) {
        return t61.dragSelection.remove(e79);
      });
    } }, { key: "toggleDragSelection", value: function e78() {
      var t61 = this;
      for (var n91 = arguments.length, o42 = new Array(n91), r53 = 0; r53 < n91; r53++) {
        o42[r53] = arguments[r53];
      }
      j2(o42, function(e79) {
        return t61.dragSelection.toggle(e79);
      });
    } }, { key: "addToDragGroup", value: function e78(t61) {
      var n91;
      for (var o42 = arguments.length, r53 = new Array(o42 > 1 ? o42 - 1 : 0), i45 = 1; i45 < o42; i45++) {
        r53[i45 - 1] = arguments[i45];
      }
      (n91 = this.elementDragHandler).addToDragGroup.apply(n91, [t61].concat(r53));
    } }, { key: "removeFromDragGroup", value: function e78() {
      var t61;
      (t61 = this.elementDragHandler).removeFromDragGroup.apply(t61, arguments);
    } }, { key: "setDragGroupState", value: function e78(t61) {
      var n91;
      for (var o42 = arguments.length, r53 = new Array(o42 > 1 ? o42 - 1 : 0), i45 = 1; i45 < o42; i45++) {
        r53[i45 - 1] = arguments[i45];
      }
      (n91 = this.elementDragHandler).setDragGroupState.apply(n91, [t61].concat(r53));
    } }, { key: "clearDragGroup", value: function e78(t61) {
      this.elementDragHandler.clearDragGroup(t61);
    } }, { key: "consume", value: function e78(t61, n91) {
      i5(t61, n91);
    } }, { key: "rotate", value: function e78(t61, n91, o42) {
      var r53 = this.getId(t61);
      if (this._managedElements[r53]) {
        this._managedElements[r53].el.style.transform = "rotate(" + n91 + "deg)";
        this._managedElements[r53].el.style.transformOrigin = "center center";
        return p(u(at.prototype), "rotate", this).call(this, t61, n91, o42);
      }
      return { c: /* @__PURE__ */ new Set(), e: /* @__PURE__ */ new Set() };
    } }, { key: "addOverlayClass", value: function e78(t61, n91) {
      if (gt(t61)) {
        h5(E9(t61), n91);
      } else if (pt(t61)) {
        h5(f25(t61), n91);
      } else if (c19(t61)) {
        h5(_t(t61), n91);
      } else if (p27(t61)) {
        h5(Mt(t61), n91);
      } else {
        throw "Could not add class to overlay of type [" + t61.type + "]";
      }
    } }, { key: "removeOverlayClass", value: function e78(t61, n91) {
      if (gt(t61)) {
        t61.instance.removeClass(E9(t61), n91);
      } else if (pt(t61)) {
        t61.instance.removeClass(f25(t61), n91);
      } else if (c19(t61)) {
        t61.instance.removeClass(_t(t61), n91);
      } else if (p27(t61)) {
        t61.instance.removeClass(Mt(t61), n91);
      } else {
        throw "Could not remove class from overlay of type [" + t61.type + "]";
      }
    } }, { key: "_paintOverlay", value: function e78(t61, n91, o42) {
      if (gt(t61)) {
        var r53 = isNaN(n91.d.cxy.x) || isNaN(n91.d.cxy.y) ? "M 0 0" : "M" + n91.d.hxy.x + "," + n91.d.hxy.y + " L" + n91.d.tail[0].x + "," + n91.d.tail[0].y + " L" + n91.d.cxy.x + "," + n91.d.cxy.y + " L" + n91.d.tail[1].x + "," + n91.d.tail[1].y + " Z";
        s27(t61, r53, n91, o42);
      } else if (pt(t61)) {
        v26(t61, n91, o42);
      } else if (c19(t61)) {
        _t(t61);
        var i45 = t61.component.getXY();
        t61.canvas.style.left = i45.x + n91.d.minx + "px";
        t61.canvas.style.top = i45.y + n91.d.miny + "px";
      } else if (p27(t61)) {
        var a48 = Mt(t61);
        var s40 = t61.component.getXY();
        if (t61.location === 0 || t61.location === 1) {
          var l48 = t61.component.endpoints[t61.location]._anchor.computedPosition;
          this.setAttributes(a48, { "data-anchor-x": "".concat(l48.x), "data-anchor-y": "".concat(l48.y), "data-anchor-ox": "".concat(l48.ox), "data-anchor-oy": "".concat(l48.oy) });
        }
        t61.canvas.style.left = s40.x + n91.d.minx + "px";
        t61.canvas.style.top = s40.y + n91.d.miny + "px";
      } else {
        throw "Could not paint overlay of type [" + t61.type + "]";
      }
    } }, { key: "setOverlayVisible", value: function e78(t61, n91) {
      var o42 = n91 ? "block" : "none";
      function r53(e79) {
        if (e79 != null) {
          e79.style.display = o42;
        }
      }
      if (gt(t61) || pt(t61)) {
        r53(t61.contentElement);
      } else if (c19(t61)) {
        r53(_t(t61));
      } else if (p27(t61)) {
        r53(Mt(t61));
      }
    } }, { key: "reattachOverlay", value: function e78(t61, n91) {
      if (pt(t61)) {
        this._appendElement(f25(t61), n91.connector.canvas);
      } else if (c19(t61)) {
        t61.instance._appendElement(_t(t61), this.getContainer());
      } else if (p27(t61)) {
        t61.instance._appendElement(Mt(t61), this.getContainer());
      } else if (gt(t61)) {
        this._appendElement(E9(t61), n91.connector.canvas);
      }
    } }, { key: "setOverlayHover", value: function e78(t61, n91) {
      var o42;
      if (c19(t61)) {
        o42 = _t(t61);
      } else if (p27(t61)) {
        o42 = Mt(t61);
      } else if (gt(t61)) {
        o42 = E9(t61);
      } else if (pt(t61)) {
        o42 = f25(t61);
      }
      if (o42 != null) {
        if (this.hoverClass != null) {
          if (n91) {
            this.addClass(o42, this.hoverClass);
          } else {
            this.removeClass(o42, this.hoverClass);
          }
        }
        this.setHover(t61.component, n91);
      }
    } }, { key: "destroyOverlay", value: function e78(t61) {
      if (c19(t61)) {
        var n91 = _t(t61);
        n91.parentNode && n91.parentNode.removeChild(n91);
        delete t61.canvas;
        delete t61.cachedDimensions;
      } else if (m27(t61) || l24(t61) || n52(t61)) {
        b18(t61);
      } else if (p27(t61)) {
        var o42 = Mt(t61);
        o42.parentNode && o42.parentNode.removeChild(o42);
        delete t61.canvas;
        delete t61.cachedDimensions;
      }
    } }, { key: "drawOverlay", value: function e78(t61, n91, o42, r53) {
      if (m27(t61) || l24(t61) || n52(t61)) {
        return t61.draw(n91, o42, r53);
      } else if (pt(t61)) {
        var i45 = c23(n91, t61.location);
        var a48 = o42.stroke, s40 = o42.stroke, l48 = o42.strokeWidth;
        return { component: n91, d: { loc: i45 }, "stroke-width": l48, stroke: a48, fill: s40, xmin: i45.x, xmax: i45.x, ymin: i45.y, ymax: i45.y };
      } else if (c19(t61) || p27(t61)) {
        var c47 = c31._getDimensions(t61);
        if (c47 != null && c47.w != null && c47.h != null) {
          var u52 = { x: 0, y: 0 };
          if (r53) {
            u52 = { x: r53.x, y: r53.y };
          } else if (n91 instanceof n15) {
            var v41 = Array.isArray(t61.location) ? t61.location : [t61.location, t61.location];
            u52 = { x: v41[0] * n91.w, y: v41[1] * n91.h };
          } else {
            var h35 = t61.location, f45 = false;
            if (l2(t61.location) || t61.location < 0 || t61.location > 1) {
              h35 = parseInt("" + t61.location, 10);
              f45 = true;
            }
            u52 = c23(n91, h35, f45);
          }
          var d32 = u52.x - c47.w / 2, g31 = u52.y - c47.h / 2;
          return { component: t61, d: { minx: d32, miny: g31, td: c47, cxy: u52 }, xmin: d32, xmax: d32 + c47.w, ymin: g31, ymax: g31 + c47.h };
        } else {
          return { xmin: 0, xmax: 0, ymin: 0, ymax: 0 };
        }
      } else {
        throw "Could not draw overlay of type [" + t61.type + "]";
      }
    } }, { key: "updateLabel", value: function e78(t61) {
      var n91 = _t(t61);
      if (h2(t61.label)) {
        var o42 = t61.label(this);
        if (o42 != null) {
          n91.innerText = o42;
          n91.textContent = o42;
        } else {
          n91.innerText = "";
          n91.textContent = "";
        }
      } else {
        if (t61.labelText == null) {
          t61.labelText = t61.label;
        }
        if (t61.labelText != null) {
          n91.innerText = t61.labelText;
          n91.textContent = t61.labelText;
        } else {
          n91.innerText = "";
          n91.textContent = "";
        }
      }
    } }, { key: "setHover", value: function e78(t61, n91) {
      t61._hover = n91;
      if (C9(t61) && t61.endpoint != null) {
        this.setEndpointHover(t61, n91, -1);
      } else if (_5(t61) && t61.connector != null) {
        this.setConnectorHover(t61.connector, n91);
      }
    } }, { key: "setZoom", value: function e78(t61, n91) {
      this.dragManager.setZoom(t61);
      return p(u(at.prototype), "setZoom", this).call(this, t61, n91);
    } }, { key: "paintConnector", value: function e78(t61, n91, o42) {
      c32(this, t61, n91, o42);
    } }, { key: "setConnectorHover", value: function e78(t61, n91, o42) {
      if (n91 === false || !this.currentlyDragging && !this.isHoverSuspended()) {
        var r53 = t61.canvas;
        if (r53 != null) {
          if (t61.hoverClass != null) {
            if (n91) {
              this.addClass(r53, t61.hoverClass);
            } else {
              this.removeClass(r53, t61.hoverClass);
            }
          }
          if (n91) {
            this.addClass(r53, this.hoverClass);
          } else {
            this.removeClass(r53, this.hoverClass);
          }
        }
        if (t61.connection.hoverPaintStyle != null) {
          t61.connection.paintStyleInUse = n91 ? t61.connection.hoverPaintStyle : t61.connection.paintStyle;
          if (!this._suspendDrawing) {
            this._paintConnection(t61.connection);
          }
        }
        if (t61.connection.endpoints[0] !== o42) {
          this.setEndpointHover(t61.connection.endpoints[0], n91, 0, true);
        }
        if (t61.connection.endpoints[1] !== o42) {
          this.setEndpointHover(t61.connection.endpoints[1], n91, 1, true);
        }
      }
    } }, { key: "destroyConnector", value: function e78(t61) {
      if (t61.connector != null) {
        yt(t61.connector);
      }
    } }, { key: "addConnectorClass", value: function e78(t61, n91) {
      if (t61.canvas) {
        this.addClass(t61.canvas, n91);
      }
    } }, { key: "removeConnectorClass", value: function e78(t61, n91) {
      if (t61.canvas) {
        this.removeClass(t61.canvas, n91);
      }
    } }, { key: "getConnectorClass", value: function e78(t61) {
      if (t61.canvas) {
        return t61.canvas.className.baseVal;
      } else {
        return "";
      }
    } }, { key: "setConnectorVisible", value: function e78(t61, n91) {
      mt(t61, n91);
    } }, { key: "applyConnectorType", value: function e78(t61, n91) {
      if (n91.cssClass) {
        var o42 = Array.isArray(n91.cssClass) ? n91.cssClass : [n91.cssClass];
        if (t61.canvas) {
          this.addClass(t61.canvas, o42.join(" "));
        } else {
          t61.classesToAddWhenRendered = o42;
        }
      }
    } }, { key: "addEndpointClass", value: function e78(t61, n91) {
      var o42 = Ct(t61.endpoint);
      if (o42 != null) {
        this.addClass(o42, n91);
      }
    } }, { key: "applyEndpointType", value: function e78(t61, n91) {
      if (n91.cssClass) {
        var o42 = Ct(t61.endpoint);
        if (o42) {
          var r53 = Array.isArray(n91.cssClass) ? n91.cssClass : [n91.cssClass];
          this.addClass(o42, r53.join(" "));
        }
      }
    } }, { key: "destroyEndpoint", value: function e78(t61) {
      var n91 = this.endpointAnchorClassPrefix + (t61.currentAnchorClass ? "-" + t61.currentAnchorClass : "");
      this.removeClass(t61.element, n91);
      yt(t61.endpoint);
    } }, { key: "renderEndpoint", value: function e78(t61, n91) {
      var o42 = ht[t61.endpoint.type];
      if (o42 != null) {
        m26.paint(t61.endpoint, o42, n91);
      } else {
        Q("jsPlumb: no endpoint renderer found for type [" + t61.endpoint.type + "]");
      }
    } }, { key: "removeEndpointClass", value: function e78(t61, n91) {
      var o42 = Ct(t61.endpoint);
      if (o42 != null) {
        this.removeClass(o42, n91);
      }
    } }, { key: "getEndpointClass", value: function e78(t61) {
      var n91 = Ct(t61.endpoint);
      if (n91 != null) {
        return n91.className;
      } else {
        return "";
      }
    } }, { key: "setEndpointHover", value: function e78(t61, n91, o42, r53) {
      if (t61 != null && (n91 === false || !this.currentlyDragging && !this.isHoverSuspended())) {
        var i45 = Ct(t61.endpoint);
        if (i45 != null) {
          if (t61.hoverClass != null) {
            if (n91) {
              this.addClass(i45, t61.hoverClass);
            } else {
              this.removeClass(i45, t61.hoverClass);
            }
          }
          if (o42 === 0 || o42 === 1) {
            var a48 = o42 === 0 ? this.hoverSourceClass : this.hoverTargetClass;
            if (n91) {
              this.addClass(i45, a48);
            } else {
              this.removeClass(i45, a48);
            }
          }
        }
        if (t61.hoverPaintStyle != null) {
          t61.paintStyleInUse = n91 ? t61.hoverPaintStyle : t61.paintStyle;
          if (!this._suspendDrawing) {
            this.renderEndpoint(t61, t61.paintStyleInUse);
          }
        }
        if (!r53) {
          for (var s40 = 0; s40 < t61.connections.length; s40++) {
            this.setConnectorHover(t61.connections[s40].connector, n91, t61);
          }
        }
      }
    } }, { key: "setEndpointVisible", value: function e78(t61, n91) {
      mt(t61.endpoint, n91);
    } }, { key: "setGroupVisible", value: function e78(t61, n91) {
      var o42 = this.getSelector(t61.el, y4);
      for (var r53 = 0; r53 < o42.length; r53++) {
        if (n91) {
          this.show(o42[r53], true);
        } else {
          this.hide(o42[r53], true);
        }
      }
    } }, { key: "deleteConnection", value: function e78(t61, n91) {
      if (t61 != null && t61.deleted !== true) {
        if (t61.endpoints[0].deleted !== true) {
          this.setEndpointHover(t61.endpoints[0], false, 0, true);
        }
        if (t61.endpoints[1].deleted !== true) {
          this.setEndpointHover(t61.endpoints[1], false, 1, true);
        }
        return p(u(at.prototype), "deleteConnection", this).call(this, t61, n91);
      } else {
        return false;
      }
    } }, { key: "addSourceSelector", value: function e78(t61, n91, o42) {
      this.addDragFilter(t61);
      return p(u(at.prototype), "addSourceSelector", this).call(this, t61, n91, o42);
    } }, { key: "removeSourceSelector", value: function e78(t61) {
      this.removeDragFilter(t61.selector);
      p(u(at.prototype), "removeSourceSelector", this).call(this, t61);
    } }, { key: "manage", value: function e78(t61, n91, o42) {
      if (this.containerType === T.SVG && !w4(t61)) {
        throw new Error("ERROR: cannot manage non-svg element when container is an SVG element.");
      }
      var r53 = p(u(at.prototype), "manage", this).call(this, t61, n91, o42);
      if (r53 != null) {
        if (this._resizeObserver != null) {
          this._resizeObserver.observe(r53.el);
        }
      }
      return r53;
    } }, { key: "isInsideParent", value: function e78(t61, n91) {
      var o42 = t61.parentNode, r53 = this.getSize(o42), i45 = this.getSize(t61), a48 = n91.x, s40 = a48 + i45.w, l48 = n91.y, c47 = l48 + i45.h;
      return s40 > 0 && a48 < r53.w && c47 > 0 && l48 < r53.h;
    } }]);
    return at;
  }(ke2);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/magnetizer.js
  function c37(i45, t61, n91, e78) {
    return i45[t61] <= e78 && e78 <= i45[t61] + i45[n91];
  }
  var y23 = [function(i45, t61) {
    return i45.x + i45.w - t61.x;
  }, function(i45, t61) {
    return i45.x - (t61.x + t61.w);
  }];
  var d25 = [function(i45, t61) {
    return i45.y + i45.h - t61.y;
  }, function(i45, t61) {
    return i45.y - (t61.y + t61.h);
  }];
  var v28 = [null, [y23[0], d25[1]], [y23[0], d25[0]], [y23[1], d25[0]], [y23[1], d25[1]]];
  var p29 = function i32(t61, n91, e78, r53, s40) {
    if (isNaN(e78))
      e78 = 0;
    var o42 = n91.y + n91.h, u52 = e78 == Infinity || e78 == -Infinity ? n91.x + n91.w / 2 : (o42 - r53) / e78, a48 = Math.atan(e78), h35, l48, f45;
    if (c37(n91, "x", "w", u52)) {
      h35 = v28[s40][1](t61, n91);
      l48 = h35 / Math.sin(a48);
      f45 = l48 * Math.cos(a48);
      return { x: f45, y: h35 };
    } else {
      f45 = v28[s40][0](t61, n91);
      l48 = f45 / Math.cos(a48);
      h35 = l48 * Math.sin(a48);
      return { x: f45, y: h35 };
    }
  };
  function g21(i45, t61) {
    var n91 = i45.center || { x: i45.x + i45.w / 2, y: i45.y + i45.h / 2 }, e78 = t61.center || { x: t61.x + t61.w / 2, y: t61.y + t61.h / 2 }, o42 = h11(n91, e78), u52 = M6(n91, e78), a48 = o42 == Infinity || o42 == -Infinity || isNaN(o42) ? 0 : n91.y - o42 * n91.x;
    return p29(i45, t61, o42, a48, u52);
  }
  function m30(i45, t61, n91) {
    var e78 = t61.w + 2 * n91.x;
    var r53 = t61.h + 2 * n91.y;
    return { x: i45.x - e78 / 2, y: i45.y - r53 / 2, w: e78, h: r53 };
  }
  function x17(i45) {
    var t61 = [];
    if (i45 == null) {
      return null;
    } else if (Array.isArray(i45)) {
      var n91 = [];
      n91.push.apply(n91, i45);
      return n91;
    } else {
      for (var e78 in i45) {
        t61.push(i45[e78]);
      }
    }
    return t61;
  }
  var b21 = { x: 20, y: 20 };
  var A13 = function() {
    function r53(i45) {
      t(this, r53);
      o(this, "origin", void 0);
      o(this, "elements", void 0);
      o(this, "debug", void 0);
      o(this, "container", void 0);
      o(this, "getContainerPosition", void 0);
      o(this, "originDebugMarker", void 0);
      o(this, "constrain", void 0);
      o(this, "padding", void 0);
      o(this, "filter", void 0);
      o(this, "exclude", void 0);
      o(this, "currentFocus", void 0);
      o(this, "focusElement", null);
      o(this, "getSize", void 0);
      o(this, "getId", void 0);
      o(this, "getPosition", void 0);
      o(this, "setPosition", void 0);
      o(this, "positionArray", []);
      o(this, "positions", /* @__PURE__ */ new Map());
      o(this, "originalPositions", /* @__PURE__ */ new Map());
      o(this, "sizes", /* @__PURE__ */ new Map());
      this.getPosition = i45.getPosition;
      this.setPosition = i45.setPosition;
      this.getId = i45.getId;
      this.getSize = i45.getSize;
      this.elements = x17(i45.elements || []);
      this.debug = i45.debug === true;
      this.padding = i45.padding || b21;
      this.filter = i45.filter || function(i46) {
        return true;
      };
      this.exclude = i45.exclude || function(i46) {
        return false;
      };
      this.container = i45.container;
      this.getContainerPosition = i45.getContainerPosition;
      this.constrain = i45.constrain || function(i46, t61, n91) {
        return n91;
      };
    }
    n(r53, [{ key: "executeAtPoint", value: function i45(t61, n91) {
      if (this.elements.length > 0) {
        this._updatePositions();
        this.setOrigin(t61);
        this.focusElement = null;
        return this._run(n91);
      } else {
        return {};
      }
    } }, { key: "executeAtCenter", value: function i45(t61) {
      if (this.elements.length > 0) {
        var n91 = this._updatePositions();
        this.setOrigin({ x: (n91[0] + n91[1]) / 2, y: (n91[2] + n91[3]) / 2 });
        this.focusElement = null;
        return this._run(t61);
      } else {
        return {};
      }
    } }, { key: "executeWithFocus", value: function i45(t61, n91) {
      if (this.elements.length > 0) {
        this._updatePositions();
        this.focusElement = { id: t61, bounds: this.positions.get(t61) };
        this.setOrigin(this.focusElement.bounds.center);
        return this._run(n91);
      } else {
        return {};
      }
    } }, { key: "snapToGrid", value: function i45(t61) {
      var n91 = {};
      this._updatePositions();
      for (var e78 = 0; e78 < this.positionArray.length; e78++) {
        var r54 = this.positions.get(this.positionArray[e78].id);
        var s40 = this._snapPositionToGrid(this.positionArray[e78].bounds, t61), o42 = s40.moved, u52 = s40.pos;
        if (o42) {
          n91[this.positionArray[e78].id] = { original: r54, current: u52 };
        }
      }
      this._positionElements(n91);
      return n91;
    } }, { key: "setElements", value: function i45(t61) {
      this.elements = x17(t61);
      return this;
    } }, { key: "addElement", value: function i45(t61, n91) {
      if (t61 != null && (n91 || this.elements.indexOf(t61) === -1)) {
        this.elements.push(t61);
      }
      return this;
    } }, { key: "addElements", value: function i45(t61, n91) {
      if (n91) {
        Array.prototype.push.apply(this.elements, t61);
      } else {
        for (var e78 = 0; e78 < t61.length; e78++) {
          this.addElement(t61[e78]);
        }
      }
      return this;
    } }, { key: "removeElement", value: function i45(t61) {
      var n91 = -1;
      for (var e78 = 0; e78 < this.elements.length; e78++) {
        if (this.elements[e78] === t61) {
          n91 = e78;
          break;
        }
      }
      if (n91 !== -1)
        this.elements.splice(n91, 1);
      return this;
    } }, { key: "reset", value: function i45() {
      this.elements.length = 0;
    } }, { key: "setOrigin", value: function i45(t61) {
      if (t61 != null) {
        this.origin = t61;
      }
    } }, { key: "_updatePositions", value: function i45() {
      this.positionArray.length = 0;
      this.positions.clear();
      this.originalPositions.clear();
      this.sizes.clear();
      return this._computeExtents(this.elements);
    } }, { key: "_computeExtents", value: function i45(t61) {
      var n91, r54, s40, o42;
      n91 = r54 = Infinity;
      s40 = o42 = -Infinity;
      for (var u52 = 0; u52 < t61.length; u52++) {
        var a48 = this.getPosition(t61[u52]), h35 = this.getSize(t61[u52]), l48 = this.getId(t61[u52]);
        var f45 = { x: a48.x, y: a48.y, w: h35.w, h: h35.h, center: { x: a48.x + h35.w / 2, y: a48.y + h35.h / 2 } };
        this.positions.set(l48, f45);
        this.originalPositions.set(l48, u2({}, f45));
        this.positionArray.push({ bounds: f45, id: l48, element: t61[u52] });
        this.sizes.set(l48, h35);
        n91 = Math.min(n91, a48.x);
        r54 = Math.min(r54, a48.y);
        s40 = Math.max(s40, a48.x + h35.w);
        o42 = Math.max(o42, a48.y + h35.h);
      }
      return [n91, s40, r54, o42];
    } }, { key: "_run", value: function i45(t61) {
      var n91 = {};
      if (this.elements.length > 1) {
        t61 = t61 || {};
        var r54 = t61.filter || this.filter;
        var s40 = t61.padding || b21;
        var o42 = t61.iterations;
        var u52 = t61.exclude || this.exclude;
        if (t61.gather) {
          u2(n91, this._gather(s40, this.constrain, r54, u52));
        }
        u2(n91, this._magnetize(s40, this.constrain, r54, o42, u52, t61.grid));
      }
      var a48 = {};
      for (var h35 in n91) {
        a48[h35] = { original: this.originalPositions.get(h35), current: n91[h35] };
      }
      this._positionElements(a48);
      return a48;
    } }, { key: "_snapPositionToGrid", value: function i45(t61, n91) {
      var e78 = { x: t61.x, y: t61.y };
      if (n91 != null) {
        var r54 = p10(t61, n91);
        t61.x = r54.x;
        t61.y = r54.y;
        t61.center.x = t61.x + t61.w / 2;
        t61.center.y = t61.y + t61.h / 2;
      }
      return { moved: e78.x !== t61.x || e78.y !== t61.y, pos: t61 };
    } }, { key: "_gather", value: function i45(t61, n91, e78, r54) {
      var s40 = this;
      var o42 = {};
      var h35 = m30(this.origin, { w: 0, h: 0 }, t61);
      var f45 = {};
      this.positionArray.sort(function(i46, t62) {
        var n92 = f45[i46.id] || Math.min(o13(i46.bounds, s40.origin), o13(y8(i46.bounds, { x: i46.bounds.w, y: 0 }), s40.origin), o13(y8(i46.bounds, { x: i46.bounds.w, y: i46.bounds.h }), s40.origin), o13(y8(i46.bounds, { x: 0, y: i46.bounds.h }), s40.origin));
        var e79 = f45[t62.id] || Math.min(o13(t62.bounds, s40.origin), o13(y8(t62.bounds, { x: t62.bounds.w, y: 0 }), s40.origin), o13(y8(t62.bounds, { x: t62.bounds.w, y: t62.bounds.h }), s40.origin), o13(y8(t62.bounds, { x: 0, y: t62.bounds.h }), s40.origin));
        f45[i46.id] = n92;
        f45[t62.id] = e79;
        return n92 === e79 ? 0 : n92 < e79 ? -1 : 1;
      });
      var c47 = {};
      var y34 = function i46(t62) {
        var n92 = [s40.origin, t62];
        var e79 = [];
        Array.prototype.push.apply(e79, c10(n92, h35).map(function(i47) {
          return [h35, i47, null];
        }));
        var r55 = function i47(t63) {
          var r56 = s40.positions.get(t63);
          Array.prototype.push.apply(e79, c10(n92, r56).map(function(i48) {
            return [r56, i48, t63];
          }));
        };
        for (var o43 in c47) {
          r55(o43);
        }
        return e79.filter(function(i47) {
          return i47 != null;
        });
      };
      var d32 = function i46(n92) {
        if (r54(s40.positionArray[n92].id, s40.positionArray[n92].element)) {
          return "continue";
        }
        var a48 = s40.positionArray[n92].bounds, h36 = s40.positionArray[n92].bounds, l48 = m30(a48.center, h36, t61);
        if (e78(s40.positionArray[n92].id, s40.positionArray[n92].element)) {
          var f46 = y34(a48.center);
          if (f46.length > 0) {
            f46.sort(function(i47, t62) {
              var n93 = o13(i47[1], a48), e79 = o13(t62[1], a48);
              return n93 < e79 ? -1 : 1;
            });
            var d33 = f46[0][0];
            var v42 = g21(d33, l48);
            a48.x += v42.x;
            a48.y += v42.y;
            a48.center.x += v42.x;
            a48.center.y += v42.y;
            o42[s40.positionArray[n92].id] = a48;
            c47[s40.positionArray[n92].id] = true;
          }
        }
      };
      for (var v41 = 0; v41 < this.positionArray.length; v41++) {
        var p49 = d32(v41);
        if (p49 === "continue")
          continue;
      }
      return o42;
    } }, { key: "_magnetize", value: function i45(t61, n91, e78, r54, s40, o42) {
      var u52 = this;
      r54 = r54 || 2;
      var l48, c47;
      if (this.focusElement != null) {
        l48 = m30(this.origin, this.focusElement.bounds, { x: 0, y: 0 });
        c47 = this.focusElement.id;
      } else {
        l48 = m30(this.origin, { w: 0, h: 0 }, t61);
      }
      var y34 = 1, d32 = true, v41, p49, x27 = {}, b28 = function i46(t62, n92, e79, r55) {
        n92.x += e79;
        n92.y += r55;
        n92.center.x += e79;
        n92.center.y += r55;
        x27[t62] = n92;
      }, A19 = function i46(t62, n92) {
        if (o42 == null) {
          return n92;
        } else {
          var e79 = y8(t62, n92), r55 = e79.x / o42.w, s41 = e79.y / o42.h, u53 = n92.x >= 0 ? Math.ceil(r55) : Math.floor(r55), h35 = n92.y >= 0 ? Math.ceil(s41) : Math.floor(s41), l49 = { x: o42.w * u53, y: o42.h * h35 };
          return a12(l49, t62);
        }
      }, P18 = function i46() {
        var o43, a48;
        for (var f45 = 0; f45 < u52.positionArray.length; f45++) {
          o43 = u52.positionArray[f45];
          if (o43.id === c47 || s40(o43.id, o43.element)) {
            continue;
          }
          var x28 = o43.bounds, P19 = m30(x28.center, x28, t61);
          if (e78(o43.id, o43.element) && i9(l48, P19)) {
            v41 = g21(l48, P19);
            v41 = A19(x28, v41);
            p49 = n91(o43.id, x28, v41);
            b28(o43.id, x28, p49.x, p49.y);
            P19 = m30(x28.center, x28, t61);
          }
          for (var w23 = 0; w23 < u52.positionArray.length; w23++) {
            if (f45 !== w23) {
              a48 = u52.positionArray[w23];
              if (a48.id === c47 || s40(a48.id, a48.element)) {
                continue;
              }
              if (e78(a48.id, a48.element)) {
                var _17 = a48.bounds, k20 = m30(_17.center, _17, t61);
                if (i9(P19, k20)) {
                  d32 = true;
                  v41 = g21(P19, k20);
                  v41 = A19(_17, v41);
                  p49 = n91(a48.id, _17, v41);
                  b28(a48.id, _17, p49.x, p49.y);
                }
              }
            }
          }
        }
        if (d32 && y34 < r54) {
          d32 = false;
          y34++;
          i46();
        }
      };
      P18();
      return x27;
    } }, { key: "_positionElements", value: function i45(t61) {
      for (var n91 = 0; n91 < this.elements.length; n91++) {
        var e78 = this.getId(this.elements[n91]);
        if (t61[e78]) {
          this.setPosition(this.elements[n91], t61[e78].current);
        }
      }
    } }]);
    return r53;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/layout/abstract-layout.js
  var h26 = 10;
  function u34(t61, i45, e78) {
    t61.push(i45);
    var n91 = t61.length - 1;
    var s40 = t61[n91];
    while (n91 > 0 && s40[e78] < t61[n91 - 1][e78]) {
      t61[n91] = t61[n91 - 1];
      n91 -= 1;
    }
    t61[n91] = s40;
    return n91;
  }
  var l28 = function() {
    function l48(t61) {
      t(this, l48);
      o(this, "toolkit", void 0);
      o(this, "adapter", void 0);
      o(this, "_vertices", []);
      o(this, "magnetizer", void 0);
      o(this, "magnetizerIterations", void 0);
      o(this, "positions", /* @__PURE__ */ new Map());
      o(this, "sizes", /* @__PURE__ */ new Map());
      o(this, "positionArray", []);
      o(this, "parameters", void 0);
      o(this, "done", void 0);
      o(this, "_minx", Infinity);
      o(this, "_miny", Infinity);
      o(this, "_maxx", -Infinity);
      o(this, "_maxy", -Infinity);
      o(this, "entries", {});
      o(this, "xmax", []);
      o(this, "ymax", []);
      o(this, "xmin", []);
      o(this, "ymin", []);
      o(this, "width", void 0);
      o(this, "height", void 0);
      o(this, "container", void 0);
      o(this, "containerSize", void 0);
      o(this, "padding", void 0);
      o(this, "xShift", void 0);
      o(this, "yShift", void 0);
      o(this, "_locationFunction", void 0);
      o(this, "_vertexMap", {});
      o(this, "defaultMagnetized", void 0);
      o(this, "type", void 0);
      this._locationFunction = t61.options.locationFunction;
      this.adapter = t61.adapter;
      this._$_initialiseMagnetizer(t61.options);
      this.toolkit = t61.toolkit;
      this.container = t61.container;
      this.containerSize = this.adapter.getSize(this.container);
      this.width = t61.options.width || this.containerSize.w;
      this.height = t61.options.height || this.containerSize.h;
      this.padding = t61.options.padding;
      this.done = false;
      this.parameters = t61.options || {};
    }
    n(l48, [{ key: "_reset", value: function t61() {
      this.done = false;
      this._minx = Infinity;
      this._maxx = -Infinity;
      this._miny = Infinity;
      this._maxy = -Infinity;
      this.positions.clear();
      this.positionArray.splice(0);
      this.entries = {};
      this.xmin.length = 0;
      this.ymin.length = 0;
      this.xmax.length = 0;
      this.ymax.length = 0;
      this._vertices.length = 0;
      this.sizes.clear();
      this.magnetizer.reset();
      this.reset();
    } }, { key: "_magnetizerFilter", value: function t61(i45) {
      return true;
    } }, { key: "_$_prepareParameters", value: function t61() {
      var i45 = u2(l48._defaultParameters(), this.getDefaultParameters() || {});
      u2(i45, this.parameters || {});
      this.parameters = i45;
      return this.parameters;
    } }, { key: "_$_getEntry", value: function t61(i45, e78) {
      if (!this.entries[i45]) {
        var n91 = e78 || { x: 0, y: 0 };
        this.entries[i45] = { id: i45, size: this._getSize(i45), position: n91, xmax: n91.x, ymax: n91.y, xmin: n91.x, ymin: n91.y };
      }
      return this.entries[i45];
    } }, { key: "_cleanupEntry", value: function t61(i45) {
      delete this.entries[i45];
    } }, { key: "_$_calculateExtents", value: function t61() {
      this.xmax.length = 0;
      this.xmin.length = 0;
      this.ymax.length = 0;
      this.ymin.length = 0;
      this.xShift = 0;
      this.yShift = 0;
      for (var i45 in this.entries) {
        u34(this.xmax, this.entries[i45], "xmax");
        u34(this.ymax, this.entries[i45], "ymax");
        u34(this.xmin, this.entries[i45], "xmin");
        u34(this.ymin, this.entries[i45], "ymin");
      }
      this._minx = this.xmin.length > 0 ? this.xmin[0].xmin : 0;
      this._maxx = this.xmax.length > 0 ? this.xmax[this.xmax.length - 1].xmax : 0;
      this._miny = this.ymin.length > 0 ? this.ymin[0].ymin : 0;
      this._maxy = this.ymax.length > 0 ? this.ymax[this.ymax.length - 1].ymax : 0;
    } }, { key: "snapToGrid", value: function t61(i45, e78) {
      if (e78 != null) {
        this.magnetizer.setElements([e78]);
      } else {
        this.magnetizer.setElements(this._vertices.map(function(t62) {
          return t62.id;
        }));
      }
      return this.magnetizer.snapToGrid(i45);
    } }, { key: "magnetize", value: function t61(i45, e78) {
      var n91 = this;
      i45 = i45 || {};
      i45.options = i45.options || {};
      i45.options.iterations = i45.options.iterations || this.magnetizerIterations;
      var s40 = {};
      this.magnetizer.setElements(this._vertices.map(function(t62) {
        return t62.id;
      }).filter(function(t62) {
        return e78 ? n91._magnetizerFilter(t62) : true;
      }));
      if (i45.origin) {
        s40 = this.magnetizer.executeAtPoint(i45.origin, i45.options);
      } else if (i45.focus) {
        s40 = this.magnetizer.executeWithFocus(i45.focus, i45.options);
      } else {
        s40 = this.magnetizer.executeAtCenter(i45.options);
      }
      return s40;
    } }, { key: "vertexAdded", value: function t61(i45, e78) {
      if (this.adapter.filter(i45.vertex)) {
        var n91 = e78 && e78.position ? e78.position : i45.vertex.data && i45.vertex.data.left && i45.vertex.data.top ? { x: i45.vertex.data.left, y: i45.vertex.data.top } : this.adapter.getOffset(i45.el);
        var s40 = this._vertexAdded(i45, e78);
        if (s40 && !isNaN(s40.x) && !isNaN(s40.y)) {
          n91.x = s40.x;
          n91.y = s40.y;
        }
        this._vertices.push(i45.vertex);
        this._vertexMap[i45.vertex.id] = i45.vertex;
        this._setPosition(i45.vertex.id, n91);
        this._getSize(i45.vertex.id);
        this.magnetizer.addElement(i45.vertex.id);
        return n91;
      }
    } }, { key: "vertexRemoved", value: function t61(i45, e78) {
      this.positions.delete(i45.id);
      this.sizes.delete(i45.id);
      this._vertices = this._vertices.filter(function(t62) {
        return t62 !== i45;
      });
      delete this._vertexMap[i45.id];
      this._cleanupEntry(i45.id);
      this._vertexRemoved(i45);
      this.magnetizer.removeElement(i45.id);
      if (!e78) {
        this._$_calculateExtents();
      }
    } }, { key: "_getSize", value: function t61(i45) {
      var e78 = this;
      return f3(this.sizes, i45, function() {
        var t62 = e78.adapter.getViewportPositionById(i45);
        return t62 != null ? { w: t62.w, h: t62.h } : { w: 0, h: 0 };
      });
    } }, { key: "_getPosition", value: function t61(i45, e78, n91, s40) {
      var r53 = this.positions.get(i45);
      if (!r53) {
        if (e78 != null && n91 != null)
          r53 = { x: e78, y: n91 };
        else if (!s40)
          r53 = { x: Math.floor(Math.random() * (this.width + 1)), y: Math.floor(Math.random() * (this.height + 1)) };
        else
          return null;
        this._setPosition(i45, r53);
      }
      return r53;
    } }, { key: "_doSetPosition", value: function t61(i45, e78, n91) {
      if (i45 != null) {
        if (isNaN(e78)) {
          e78 = 0;
        }
        if (isNaN(n91)) {
          n91 = 0;
        }
        var s40 = this.positions.get(i45);
        if (!s40) {
          s40 = { x: e78, y: n91 };
          this.positions.set(i45, s40);
          this.positionArray.push([s40, i45]);
        }
        var r53 = this._$_getEntry(i45, { x: e78, y: n91 });
        r53.position.x = e78;
        r53.position.y = n91;
        this._$_updateEntry(r53);
        this.positions.set(i45, { x: e78, y: n91 });
      }
    } }, { key: "_$_doUpdateAfterMove", value: function t61(i45, e78, n91) {
      if (this._vertexMap[i45]) {
        this._vertexMoved(i45, e78, n91);
      }
    } }, { key: "_vertexMoved", value: function t61(i45, e78, n91) {
    } }, { key: "_vertexAdded", value: function t61(i45, e78) {
      return null;
    } }, { key: "_vertexRemoved", value: function t61(i45) {
    } }, { key: "setMagnetizedPosition", value: function t61(i45, e78, n91, s40, r53) {
      var o42 = this;
      this._doSetPosition(i45, e78, n91);
      var a48 = this.magnetize({ focus: s40 === true ? i45 : null, options: { filter: function t62(e79) {
        var n92 = e79 !== i45;
        return s40 !== true ? !n92 : n92;
      }, exclude: function t62(i46, e79) {
        return o42._vertexMap[i46] == null ? false : o42._vertexMap[i46].group != null;
      }, grid: r53 } }, false);
      var h35 = this._getPosition(i45);
      this._$_doUpdateAfterMove(i45, h35.x, h35.y);
      return a48;
    } }, { key: "_setPosition", value: function t61(i45, e78) {
      this._doSetPosition(i45, e78.x, e78.y);
      this._$_doUpdateAfterMove(i45, e78.x, e78.y);
    } }, { key: "_getRandomPosition", value: function t61(i45, e78, n91, s40) {
      e78 = e78 || 10;
      n91 = n91 || 10;
      var r53 = Math.floor(Math.random() * e78);
      var o42 = Math.floor(Math.random() * n91);
      var a48 = this._$_getEntry(i45, { x: r53, y: o42 });
      a48.position = { x: r53, y: o42 };
      this._$_updateEntry(a48, s40 !== true);
      this.positions.set(i45, { x: r53, y: o42 });
      return { x: r53, y: o42 };
    } }, { key: "dumpPos", value: function t61() {
      this.positions.forEach(function(t62, i45) {
        Q("".concat(i45, ", ").concat(t62.x, ", ").concat(t62.y));
      });
    } }, { key: "_$_initialiseMagnetizer", value: function t61(i45) {
      var e78 = this;
      this.magnetizer = new A13({ getPosition: function t62(i46) {
        return e78.positions.get(i46);
      }, getSize: function t62(i46) {
        return e78.sizes.get(i46);
      }, getId: function t62(i46) {
        return i46;
      }, setPosition: function t62(i46, n91) {
        var s40 = e78.adapter.getViewportPositionById(i46);
        if (s40.r !== 0) {
          var r53 = n91, a48 = { x: n91.x + s40.w, y: n91.y }, h35 = { x: n91.x + s40.w, y: n91.y + s40.h }, u52 = { x: n91.x, y: n91.y + s40.h }, l49 = { x: (r53.x + a48.x) / 2, y: (r53.y + u52.y) / 2 }, x27 = q(r53, l49, -s40.r), y34 = q(a48, l49, -s40.r), m44 = q(u52, l49, -s40.r), v41 = q(h35, l49, -s40.r), d32 = Math.min(x27.x, y34.x, m44.x, v41.x), f45 = Math.min(x27.y, y34.y, m44.y, v41.y);
          e78.setPosition(i46, d32, f45);
        } else {
          e78.setPosition(i46, n91.x, n91.y);
        }
      }, padding: i45.padding, filter: function t62(i46) {
        if (e78._vertexMap[i46] && e78._vertexMap[i46].group) {
          return false;
        }
        return e78.canMagnetize(i46);
      } });
      this.magnetizerIterations = i45.magnetizer ? i45.magnetizer.iterations || h26 : h26;
    } }, { key: "setPosition", value: function t61(i45, e78, n91) {
      var s40 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      var r53 = {};
      r53[i45] = { original: this.positions.get(i45) || { x: 0, y: 0 }, current: { x: e78, y: n91 } };
      this._setPosition(i45, { x: e78, y: n91 });
      if (!s40) {
        this._$_calculateExtents();
      }
      return r53;
    } }, { key: "getPositions", value: function t61() {
      return this.positions;
    } }, { key: "getPosition", value: function t61(i45) {
      return this.positions.get(i45);
    } }, { key: "_getExtents", value: function t61() {
      return { xmin: this._minx, ymin: this._miny, xmax: this._maxx, ymax: this._maxy };
    } }, { key: "setSize", value: function t61(i45, e78) {
      this.sizes.set(i45, e78);
      var n91 = this._$_getEntry(i45);
      n91.size = e78;
      this._$_updateEntry(n91, true);
    } }, { key: "getSizes", value: function t61() {
      return this.sizes;
    } }, { key: "_$_updateEntry", value: function t61(i45, e78) {
      i45.xmax = i45.position.x + i45.size.w;
      i45.ymax = i45.position.y + i45.size.h;
      i45.xmin = i45.position.x;
      i45.ymin = i45.position.y;
      if (e78) {
        this._$_calculateExtents();
      }
    } }, { key: "_layout", value: function t61(i45, e78) {
      var n91 = this;
      if (this.toolkit == null) {
        return;
      }
      this.containerSize = this.adapter.getSize(this.container);
      this.width = this.containerSize.w;
      this.height = this.containerSize.h;
      var s40 = this._$_prepareParameters();
      this._vertices = this.adapter.getElements().slice();
      this.begin(this.toolkit, s40);
      var r53 = function t62() {
        if (e78 || n91.defaultMagnetized) {
          n91.magnetize({}, true);
        }
        n91._$_calculateExtents();
        n91.end(n91.toolkit, s40, e78);
        i45 && i45({ positions: n91.positions, bounds: { xmin: n91._minx, ymin: n91._miny, xmax: n91._maxx, ymax: n91._maxy }, sizes: n91.sizes });
      };
      while (!this.done) {
        this.step(this.toolkit, s40);
      }
      r53();
    } }, { key: "relayout", value: function t61(i45, e78, n91) {
      this._reset();
      if (i45 != null) {
        this.parameters = i45;
      }
      this._layout(e78, n91);
    } }, { key: "layout", value: function t61(i45, e78) {
      this.done = false;
      this._layout(i45, e78);
    } }], [{ key: "_defaultParameters", value: function t61() {
      return { padding: { x: 0, y: 0 } };
    } }]);
    return l48;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/layout/layouts.js
  var e66 = {};
  var n66 = { get: function n67(t61, o42) {
    var r53 = e66[t61];
    if (!r53) {
      throw { message: "jsPlumb: unknown layout type '" + t61 + "'" };
    } else {
      o42.options = o42.options || {};
      return new r53(o42);
    }
  }, register: function n68(t61, o42) {
    e66[t61] = o42;
  } };

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/layout/empty-layout.js
  var l29 = /* @__PURE__ */ new Map();
  var s31 = function(i45) {
    a(s40, i45);
    var o42 = s(s40);
    function s40(e78) {
      var t61;
      t(this, s40);
      t61 = o42.call(this, e78);
      o(l(t61), "type", s40.type);
      o(l(t61), "defaultMagnetized", void 0);
      return t61;
    }
    n(s40, [{ key: "getDefaultParameters", value: function e78() {
      return {};
    } }, { key: "layout", value: function e78() {
    } }, { key: "refresh", value: function e78() {
      this.layout();
    } }, { key: "relayout", value: function e78() {
      this.layout();
    } }, { key: "getPositions", value: function e78() {
      return l29;
    } }, { key: "getPosition", value: function e78(t61) {
      return { x: 0, y: 0 };
    } }, { key: "setPosition", value: function e78(t61, n91, a48) {
      return o({}, t61, { original: { x: n91, y: a48 }, current: { x: n91, y: a48 } });
    } }, { key: "_getExtents", value: function e78() {
      return { xmin: 0, ymin: 0, xmax: 0, ymax: 0 };
    } }, { key: "getSize", value: function e78(t61) {
      return { w: 0, h: 0 };
    } }, { key: "begin", value: function e78(t61, n91) {
    } }, { key: "canMagnetize", value: function e78(t61) {
      return false;
    } }, { key: "end", value: function e78(t61, n91, u52) {
    } }, { key: "reset", value: function e78() {
    } }, { key: "step", value: function e78(t61, n91) {
      this.done = true;
    } }, { key: "getSizes", value: function e78() {
      return l29;
    } }]);
    return s40;
  }(l28);
  o(s31, "type", "Empty");
  n66.register(s31.type, s31);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/filterable-dataset.js
  function l30(l48) {
    return l48.eachNode != null && l48.eachEdge != null && l48.eachGroup != null && l48.filter != null;
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/core/layout/absolute-layout.js
  var l31 = function(u52) {
    a(l48, u52);
    var r53 = s(l48);
    function l48(t61) {
      var e78;
      t(this, l48);
      e78 = r53.call(this, t61);
      o(l(e78), "_$_suppliedLocationFunction", void 0);
      o(l(e78), "defaultMagnetized", false);
      o(l(e78), "absoluteBacked", void 0);
      e78.absoluteBacked = t61.options.absoluteBacked === true;
      e78._$_suppliedLocationFunction = t61.options.locationFunction;
      return e78;
    }
    n(l48, [{ key: "_vertexAdded", value: function t61(e78, n91) {
      return this._$_findLocation(e78.vertex, e78.parameters);
    } }, { key: "_defaultLocationFunction", value: function t61(e78) {
      return { x: e78.data.left, y: e78.data.top };
    } }, { key: "_$_findLocation", value: function t61(e78, n91) {
      var i45 = n91 != null && n91.locationFunction ? n91.locationFunction : this._$_suppliedLocationFunction || this._defaultLocationFunction;
      return i45(e78);
    } }, { key: "begin", value: function t61(e78, n91) {
      var i45 = this.adapter.getElements();
      var a48 = i45.length;
      for (var o42 = 0; o42 < a48; o42++) {
        var u53 = i45[o42], r54 = u53.getFullId(), l49 = this.getPosition(r54);
        if (l49 == null) {
          l49 = this._$_findLocation(u53, n91);
        }
        this.setPosition(r54, l49.x, l49.y, true);
      }
    } }, { key: "step", value: function t61(e78, n91) {
      this.done = true;
    } }, { key: "canMagnetize", value: function t61(e78) {
      return true;
    } }, { key: "end", value: function t61(e78, n91, i45) {
    } }, { key: "reset", value: function t61() {
    } }, { key: "getAbsolutePosition", value: function t61(e78, n91) {
      return e78 == null ? { x: null, y: null } : this._$_findLocation(e78, n91);
    } }]);
    return l48;
  }(l28);
  var s32 = function(u52) {
    a(l48, u52);
    var r53 = s(l48);
    function l48(t61) {
      var e78;
      t(this, l48);
      e78 = r53.call(this, t61);
      o(l(e78), "type", l48.type);
      return e78;
    }
    n(l48, [{ key: "getDefaultParameters", value: function t61() {
      return {};
    } }]);
    return l48;
  }(l31);
  o(s32, "type", "Absolute");
  n66.register(s32.type, s32);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui-shape-library/shape-library-definitions.js
  var r37 = "left";
  var e67 = "center";
  var v29 = "right";
  var l32 = "jtk-shape";
  var p30 = "jtk-shape-label";
  var s33 = "jtk-shape";

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/connector-orthogonal/definitions.js
  var a35 = "legacy";
  var p31 = -1;
  var l33 = "v";
  var n69 = "h";
  var t39 = "Orthogonal";

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/connector-editors/index.js
  var p32 = /* @__PURE__ */ new Map();
  function g22(t61, e78, n91) {
    var o42 = p32.get(t61);
    return new o42(e78, n91);
  }
  var m31 = function() {
    function _17(t61, o42) {
      var f45 = this;
      t(this, _17);
      this.surface = t61;
      this.options = o42;
      o(this, "_connectorEditors", /* @__PURE__ */ new Map());
      o(this, "activeMode", void 0);
      o(this, "_dataLoading", false);
      t61.bind(t6, function() {
        return f45.destroy();
      });
      this.options = this.options || {};
      this.activeMode = this.options.activeMode !== false;
      this.surface.toolkitInstance.bind(e14, function() {
        return f45._dataLoading = true;
      });
      this.surface.toolkitInstance.bind(a15, function() {
        return f45._dataLoading = true;
      });
      this.surface.toolkitInstance.bind(r15, function() {
        return f45._dataLoading = false;
      });
      this.surface.toolkitInstance.bind(d12, function() {
        return f45._dataLoading = false;
      });
      this.surface.jsplumb.bind(B, function(t62) {
        if (t62.connector.type === t39) {
          if (t62.connector.recalcStrategy === a35) {
            return;
          } else {
            P7(t62.connector);
          }
        }
      });
      this.surface._attachEdgePathEditor(this);
    }
    n(_17, [{ key: "_connectionEstablished", value: function t61(e78) {
      if (!this._dataLoading && this.activeMode) {
        if (e78.addedByMouse !== false) {
          var n91 = e78.connection;
          if (n91.connector != null) {
            n91.connector.edited = true;
            return i18.exportGeometry(n91.connector);
          }
        }
      }
    } }, { key: "startEditing", value: function t61(e78, n91) {
      var r53 = this._resolveConnection(e78);
      if (r53 != null) {
        var i45 = r53.edge;
        n91 = u2({}, n91 || {});
        var s40 = r53.connector.type;
        if (!p32.has(s40)) {
          throw new Error("No editor available for connector type [" + s40 + "]");
        } else {
          if (!this._connectorEditors.has(s40)) {
            var c47 = u2({}, this.options || {});
            var a48 = g22(s40, this.surface, c47);
            this._connectorEditors.set(s40, a48);
          }
          this._connectorEditors.get(s40).activate(i45, r53, n91);
        }
      }
    } }, { key: "stopEditing", value: function t61() {
      this._connectorEditors.forEach(function(t62) {
        return t62.deactivate();
      });
    } }, { key: "clearEdits", value: function t61(e78) {
      var n91 = this._resolveConnection(e78);
      if (n91 != null) {
        var o42 = n91.connector;
        P7(o42);
        return true;
      } else {
        return false;
      }
    } }, { key: "_resolveConnection", value: function t61(e78) {
      if (e78 == null) {
        return null;
      } else if (typeof e78 === "string") {
        return this.surface.getRenderedConnection(e78);
      } else if (_5(e78)) {
        return e78;
      } else {
        return this.surface.getRenderedConnection(e78.getId());
      }
    } }, { key: "destroy", value: function t61() {
      this.stopEditing();
      this._connectorEditors.clear();
    } }]);
    return _17;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/connector-editors/editor-base.js
  var N10 = "px";
  var L11 = "jtk-anchor-face";
  var M14 = "jtk-anchor-placeholder";
  var S15 = "jtk-anchor-candidate";
  var H7 = "jtk-edge-delete";
  var T9 = "jtk-connection-edit";
  var z11 = "clearConnectionEdits";
  var B11 = "startConnectionEdit";
  var V11 = "stopConnectionEdit";
  function X8(e78) {
    return "." + e78;
  }
  var Y10 = X8(M14);
  function G9(e78, t61, r53, n91) {
    var s40 = document.createElement("div");
    s40.className = r53;
    s40.style.position = s5;
    s40.style.left = e78 + N10;
    s40.style.top = t61 + N10;
    if (!n91) {
      s40.style.display = v5;
    }
    return s40;
  }
  function q8(e78, t61, r53, n91, o42) {
    var i45 = G9(e78, t61, n91, o42);
    r53._appendElement(i45, r53.getContainer());
    var s40 = r53.getSize(i45);
    i45.style.left = e78 - s40.w / 2 + "px";
    i45.style.top = t61 - s40.h / 2 + "px";
    return i45;
  }
  function W9(e78, t61, r53, n91, o42, i45, s40, a48) {
    var c47 = t61(r53, n91, o42);
    if (c47 != null) {
      var u52 = true;
      var l48 = { x: c47[0], y: c47[1], ox: c47[2], oy: c47[3], iox: c47[2], ioy: c47[3], offx: c47[4] || 0, offy: c47[5] || 0, cls: "" };
      if (e78.currentLocation != null && e78.locations[e78.currentLocation] != null) {
        u52 = e78.locations[e78.currentLocation].x !== l48.x || e78.locations[e78.currentLocation].y !== l48.y;
      }
      if (u52) {
        e78.currentLocation = -1;
        e78.locations[0] = l48;
        a48.router._setCurrentLocation(e78, 0, s40);
      }
      return { x: l48.x * i45.w, y: l48.y * i45.h };
    }
  }
  function J6(e78, t61, r53, n91, o42, i45, h35, d32, v41) {
    var f45 = e78.faces;
    var g31 = n91.parentNode;
    var m44 = [[n16, r53.x], [i17, o42.w - r53.x], [o20, r53.y], [e46, o42.h - r53.y]];
    var p49 = /* @__PURE__ */ new Map();
    p49.set(o20, [0, -1]);
    p49.set(e46, [0, 1]);
    p49.set(n16, [-1, 0]);
    p49.set(i17, [1, 0]);
    m44.sort(function(e79, t62) {
      if (e79[1] < t62[1]) {
        return -1;
      } else {
        return 1;
      }
    });
    var y34 = null;
    for (var x27 = 0; x27 < m44.length; x27++) {
      if (f45.indexOf(m44[x27][0]) != -1) {
        y34 = m44[x27][0];
        break;
      }
    }
    if (y34 != null && y34 !== e78.lockedFace) {
      g31.setAttribute(L11, y34);
      v41.router._setCurrentContinuousAnchorFace(e78, y34, d32, h35);
      v41.router.lock(e78);
      var _17 = p49.get(y34);
      var A19 = v41._getRotation(t61.elementId);
      if (A19 !== 0) {
        _17 = z(_17, A19);
      }
      i18.setAnchorOrientation(d32, h35, _17);
    }
    return r53;
  }
  function K6(e78, t61, r53, n91, o42, i45, s40) {
    var a48 = l3(r53, o42, e78.locations);
    s40.router._setCurrentLocation(e78, a48.idx, i45);
    return r53;
  }
  function Q6(e78, t61, r53) {
    var n91 = document.createElement("div");
    n91.className = r53 ? r53 : "";
    n91.style.position = s5;
    n91.style.left = e78 + N10;
    n91.style.top = t61 + N10;
    return n91;
  }
  function U7(e78, t61, r53, n91) {
    var o42 = x4(e78);
    var i45 = o42.w * t61, s40 = o42.h * r53;
    var a48 = Q6(i45, s40, n91);
    e78.appendChild(a48);
    var c47 = x4(a48);
    a48.style.left = i45 - c47.w / 2 + N10;
    a48.style.top = s40 - c47.h / 2 + N10;
    return a48;
  }
  var Z6 = "jtk-edge-handle";
  var $6 = function() {
    function o42(e78, n91) {
      var i45 = this;
      t(this, o42);
      this.surface = e78;
      o(this, "current", void 0);
      o(this, "currentConnector", void 0);
      o(this, "currentEdge", void 0);
      o(this, "currentSourceVertex", void 0);
      o(this, "currentTargetVertex", void 0);
      o(this, "sourceInfo", void 0);
      o(this, "targetInfo", void 0);
      o(this, "currentOverlays", []);
      o(this, "sourceDimensions", void 0);
      o(this, "targetDimensions", void 0);
      o(this, "sourceAnchorPlaceholder", void 0);
      o(this, "targetAnchorPlaceholder", void 0);
      o(this, "active", void 0);
      o(this, "jsplumb", void 0);
      o(this, "sourceAnchorPositionFinder", void 0);
      o(this, "targetAnchorPositionFinder", void 0);
      o(this, "snapToAnchors", void 0);
      o(this, "eventManager", void 0);
      o(this, "update", void 0);
      o(this, "cleanup", void 0);
      o(this, "_dragHandlers", {});
      o(this, "_anchorDragContext", { rotation: 0, center: { x: 0, y: 0 } });
      this.active = false;
      this.jsplumb = this.surface.jsplumb;
      this.surface.toolkitInstance.bind(o15, function() {
        i45.deactivate();
      });
      this.surface.toolkitInstance.bind(l12, function(e79) {
        if (e79.edge === i45.currentEdge) {
          i45.deactivate();
        }
      });
      this.surface.toolkitInstance.bind(R5, function(e79) {
        if (e79.edge == i45.currentEdge) {
          i45.repaintConnection();
        }
      });
      this.eventManager = new oe();
      this._addDragHandler({ selector: Y10, constrainFunction: function e79(t61, r53, n92, o43) {
        var s40 = r53._jsPlumbAnchor.anchor;
        var a48 = r53._jsPlumbAnchor.endpoint;
        var c47 = r53._jsPlumbAnchor.idx;
        if (i45._anchorDragContext.rotation !== 0) {
          var u52 = i45.jsplumb.dragManager.drag._posAtDown;
          var l48 = { x: t61.x - u52.x, y: t61.y - u52.y };
          t61 = q(l48, i45._anchorDragContext.center, -i45._anchorDragContext.rotation);
        }
        var d32 = r53.parentNode;
        var v41;
        var f45 = r53.parentNode.jtk;
        if (f45 != null) {
          v41 = f45.port || f45.group || f45.node || f45.vertex;
        }
        var g31 = i45.currentEdge.source === v41 ? i45.sourceAnchorPositionFinder : i45.targetAnchorPositionFinder;
        var m44 = { x: t61.x / n92.w, y: t61.y / n92.h };
        if (g31 != null) {
          t61 = W9(s40, g31, d32, m44, v41, n92, i45.current.connector, i45.jsplumb);
        } else if (S14(s40)) {
          t61 = J6(s40, a48, t61, r53, n92, o43, c47, i45.current.connector, i45.jsplumb);
        } else {
          t61 = K6(s40, a48, t61, r53, n92, i45.current.connector, i45.jsplumb);
          if (i45.snapToAnchors) {
            t61 = { x: s40.locations[s40.currentLocation].x * n92.w, y: s40.locations[s40.currentLocation].y * n92.h };
          }
        }
        i45.jsplumb.revalidate(r53.parentNode);
        var p49 = [r53.offsetWidth, r53.offsetHeight], y34 = { xmin: -p49[0] / 2, xmax: n92.w - p49[0] / 2, ymin: -p49[1] / 2, ymax: n92.h - p49[1] / 2 };
        return { x: t61.x < y34.xmin ? y34.xmin : t61.x > y34.xmax ? y34.xmax : t61.x + y34.xmin, y: t61.y < y34.ymin ? y34.ymin : t61.y > y34.ymax ? y34.ymax : t61.y + y34.ymin };
      }, start: function e79(t61) {
        var r53 = t61.drag.getDragElement();
        var n92 = r53._jsPlumbAnchor.anchor;
        var o43 = r53._jsPlumbAnchor.endpoint;
        var s40 = r53.parentNode;
        var a48;
        var c47 = r53.parentNode.jtk;
        if (c47 != null) {
          a48 = c47.port || c47.group || c47.node || c47.vertex;
        }
        var u52 = i45.currentEdge.source === a48 ? i45.sourceAnchorPositionFinder : i45.targetAnchorPositionFinder;
        var l48 = i45.jsplumb.getId(s40);
        i45._anchorDragContext.rotation = i45.jsplumb._getRotation(l48);
        if (i45._anchorDragContext.rotation !== 0) {
          var h35 = i45.jsplumb.getSize(s40);
          i45._anchorDragContext.center = { x: h35.w / 2, y: h35.h / 2 };
        }
        if (u52 == null) {
          if (S14(n92)) {
            r53.parentNode.setAttribute(L11, n92.currentFace);
          } else {
            var d32 = n92.locations.map(function(e80) {
              return [e80.x, e80.y, e80.ox, e80.oy];
            });
            d32.forEach(function(e80) {
              U7(o43.element, e80[0], e80[1], S15);
            });
          }
        }
      }, stop: function e79(t61) {
        var r53 = t61.el.parentNode;
        var n92 = t61.drag.getDragElement();
        var o43 = n92._jsPlumbAnchor.anchor;
        var s40 = n92._jsPlumbAnchor.endpoint;
        if (S14(o43)) {
          r53.removeAttribute(L11);
        }
        var a48 = s40.element.querySelectorAll(X8(S15));
        a48.forEach(function(e80) {
          return e80.parentNode.removeChild(e80);
        });
        i45._drawAnchorPlaceholders();
        i45._update();
        i45.fireConnectionEditEvent();
      }, drag: function e79(t61) {
        i45._update();
      } }, true);
      this.surface.bind(I8, function(e79) {
        if (i45.active && i45.currentEdge && (e79.vertex === i45.currentEdge.source || e79.vertex === i45.currentEdge.target)) {
          i45._elementDragged(e79);
          i45.fireConnectionEditEvent();
        }
      });
      this.surface.bind(H4, function(e79) {
        if (i45.active && i45.currentEdge && (e79.vertex === i45.currentEdge.source || e79.vertex === i45.currentEdge.target)) {
          i45._elementDragging(e79);
        }
      });
      this.surface.bind(q5, function(e79) {
        if (i45.active && i45.currentEdge && (e79.vertex === i45.currentEdge.source || e79.vertex === i45.currentEdge.target)) {
          i45._elementDragged(e79);
          i45.fireConnectionEditEvent();
        }
      });
      this.surface.bind(k8, function(e79) {
        if (i45.active && i45.currentEdge && (e79.vertex === i45.currentEdge.source || e79.vertex === i45.currentEdge.target)) {
          i45._elementDragging(e79);
        }
      });
      this.surface.toolkitInstance.bind(h14, function(e79) {
        if (i45.active && i45.currentEdge && (e79.vertex === i45.currentEdge.source || e79.vertex === i45.currentEdge.target)) {
          i45._elementDragged(e79);
          i45.fireConnectionEditEvent();
        }
      });
      this.surface.toolkitInstance.bind(g10, function(e79) {
        if (i45.active && i45.currentEdge && (e79.vertex === i45.currentEdge.source || e79.vertex === i45.currentEdge.target)) {
          i45._elementDragged(e79);
          i45.fireConnectionEditEvent();
        }
      });
    }
    n(o42, [{ key: "_resolveAnchorPositions", value: function e78(t61) {
      var r53 = this.surface.view.getTypeDefinition(t61);
      return r53.anchorPositions;
    } }, { key: "_attachOverlay", value: function e78(t61, r53) {
      var n91 = { type: r53.type, options: u2(r53.options, { id: $() }) };
      this.currentOverlays.push(this.surface.jsplumb.addOverlay(t61, n91));
      this.repaintConnection();
    } }, { key: "_attachOverlays", value: function e78(t61, r53) {
      var n91 = this;
      this._detachOverlays();
      r53.forEach(function(e79) {
        n91._attachOverlay(t61, e79);
      });
    } }, { key: "_detachOverlays", value: function e78() {
      var t61 = this;
      this.currentOverlays.forEach(function(e79) {
        k12(t61.current, e79.id);
      });
    } }, { key: "_attachDeleteButton", value: function e78(t61) {
      var r53 = this;
      var n91 = t61.deleteButtonClass || H7;
      var o43 = t61.deleteButtonLocation || 0.1;
      var i45 = function e79() {
        return r53.surface.toolkitInstance.removeEdge(r53.currentEdge);
      };
      var s40 = function e79() {
        if (t61.onMaybeDelete) {
          t61.onMaybeDelete(r53.currentEdge, r53.current, i45);
        } else {
          i45();
        }
      };
      var a48 = Array.isArray(o43) ? o43 : [o43];
      a48.forEach(function(e79) {
        r53._attachOverlay(r53.current, { type: u22.type, options: { location: e79, cssClass: n91, events: { click: s40 } } });
      });
    } }, { key: "repaintConnection", value: function e78(t61) {
      if (this.current) {
        this.jsplumb._paintConnection(this.current, t61);
        this.refresh(t61);
      }
    } }, { key: "fireConnectionEditEvent", value: function e78() {
      this.surface._connectionEdited(this.current);
    } }, { key: "refresh", value: function e78(t61) {
      if (this.current) {
        this._drawAnchorPlaceholders();
        this._repaint && this._repaint(t61);
      }
    } }, { key: "_drawAnchorPlaceholders", value: function e78() {
      var t61 = this;
      if (this.current) {
        var r53 = function e79(r54, n91) {
          var o44 = t61.current.endpoints[r54];
          var i46 = o44._anchor;
          var s41 = r54 === 0 ? t61.sourceAnchorPositionFinder : t61.targetAnchorPositionFinder;
          if (s41 != null || i46.isDynamic || i46.isContinuous) {
            var a49 = u2({}, i46.computedPosition);
            var c47 = t61.jsplumb.getOffset(o44.element);
            var u52 = t61.jsplumb._getRotation(o44.elementId);
            if (u52 !== 0) {
              var l48 = t61.jsplumb.getSize(o44.element), v41 = { x: c47.x + l48.w / 2, y: c47.y + l48.h / 2 }, f45 = q({ x: a49.curX, y: a49.curY }, v41, -u52);
              a49.curX = f45.x;
              a49.curY = f45.y;
            }
            var g31 = [a49.curX - c47.x, a49.curY - c47.y], m44 = g31[0], p49 = g31[1];
            var y34;
            if (n91 != null) {
              y34 = n91;
            } else {
              y34 = Q6(m44, p49, M14);
              o44.element.appendChild(y34);
              t61._setElementPosition(y34, m44, p49);
              y34._jsPlumbAnchor = { anchor: i46, endpoint: o44, idx: r54 };
            }
            var x27 = t61.jsplumb.getSize(y34);
            y34.style.left = m44 - x27.w / 2 + N10;
            y34.style.top = p49 - x27.h / 2 + N10;
            return [[c47.x, c47.y], y34];
          } else {
            return [[0, 0], null];
          }
        };
        var o43 = r53(0, this.sourceAnchorPlaceholder);
        var i45 = b(o43, 2);
        this.sourceDimensions = i45[0];
        this.sourceAnchorPlaceholder = i45[1];
        var s40 = r53(1, this.targetAnchorPlaceholder);
        var a48 = b(s40, 2);
        this.targetDimensions = a48[0];
        this.targetAnchorPlaceholder = a48[1];
      }
    } }, { key: "_cleanupAnchors", value: function e78() {
      if (this.current) {
        if (this.sourceAnchorPlaceholder) {
          this.sourceAnchorPlaceholder.parentNode.removeChild(this.sourceAnchorPlaceholder);
          delete this.sourceAnchorPlaceholder._jsPlumbAnchor;
        }
        if (this.targetAnchorPlaceholder) {
          this.targetAnchorPlaceholder.parentNode.removeChild(this.targetAnchorPlaceholder);
          delete this.targetAnchorPlaceholder._jsPlumbAnchor;
        }
      }
      this.sourceAnchorPlaceholder = null;
      this.targetAnchorPlaceholder = null;
      this.sourceDimensions = null;
      this.targetDimensions = null;
    } }, { key: "_clearGeometry", value: function e78() {
      if (this.current) {
        P7(this.current.connector);
      }
    } }, { key: "reset", value: function e78() {
      this.deactivate();
      this._clearGeometry();
      this._clearHandles();
      this.jsplumb.revalidate(this.current.source);
      this.jsplumb.revalidate(this.current.target);
      this.jsplumb.fire(z11, this.current);
    } }, { key: "isActive", value: function e78() {
      return this.active;
    } }, { key: "_setElementPosition", value: function e78(t61, r53, n91) {
      var o43 = this.jsplumb.getSize(t61), i45 = r53 - o43.w / 2, s40 = n91 - o43.h / 2;
      t61.style.left = i45 + N10;
      t61.style.top = s40 + N10;
    } }, { key: "activate", value: function e78(t61, r53, n91) {
      if (this.current != null && this.current === r53) {
        return;
      }
      this.deactivate();
      this.current = r53;
      this.currentConnector = this.current.connector;
      this.currentEdge = t61;
      this.currentSourceVertex = this.currentEdge.source;
      this.currentTargetVertex = this.currentEdge.target;
      this.sourceInfo = this.surface.jsplumb.viewport._elementMap.get(this.current.sourceId);
      this.targetInfo = this.surface.jsplumb.viewport._elementMap.get(this.current.targetId);
      n91 = n91 || {};
      this.sourceAnchorPositionFinder = n91.anchorPositionFinder;
      this.targetAnchorPositionFinder = n91.anchorPositionFinder;
      if (n91.anchorPositions != null) {
        this.sourceAnchorPositionFinder = j10(n91.anchorPositions);
        this.targetAnchorPositionFinder = j10(n91.anchorPositions);
      } else {
        var o43 = this._resolveAnchorPositions(this.currentEdge.source);
        if (o43 != null) {
          this.sourceAnchorPositionFinder = j10(o43);
        }
        var i45 = this._resolveAnchorPositions(this.currentEdge.target);
        if (i45 != null) {
          this.targetAnchorPositionFinder = j10(i45);
        }
      }
      this.snapToAnchors = n91.snapToAnchors !== false;
      this._activate(r53, n91);
      if (n91.overlays) {
        this._attachOverlays(r53, n91.overlays);
      }
      if (n91.deleteButton === true) {
        this._attachDeleteButton(n91);
      }
      var s40 = this.current.endpoints[0];
      var a48 = s40._anchor;
      var c47 = this.current.endpoints[1];
      var u52 = c47._anchor;
      this.jsplumb.router.lock(a48);
      this.jsplumb.router.lock(u52);
      this._drawAnchorPlaceholders();
      B8.addClass(this.current, T9);
      this.active = true;
      this.jsplumb.fire(B11, this.current);
    } }, { key: "deactivate", value: function e78(t61) {
      if (this.current != null) {
        this._detachOverlays();
        B8.removeClass(this.current, T9);
        this._cleanupAnchors();
      }
      this._clearHandles();
      if (this.current != null) {
        this.jsplumb.fire(V11, this.current);
      }
      this.active = false;
      this.current = null;
      this.currentEdge = null;
      this.sourceAnchorPositionFinder = null;
      this.targetAnchorPositionFinder = null;
    } }, { key: "_addDragHandler", value: function e78(t61, r53) {
      this.jsplumb.dragManager.addSelector(t61, r53);
      this._dragHandlers[t61.selector] = t61;
    } }]);
    return o42;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/core/connector/arc-segment.js
  var o29 = 1e-10;
  function u35(t61) {
    var n91 = Math.floor(t61), e78 = Math.ceil(t61);
    if (t61 - n91 < o29) {
      return n91;
    } else if (e78 - t61 < o29) {
      return e78;
    }
    return t61;
  }
  var l34 = "Arc";
  function f29(n91, e78, r53, a48) {
    return e13({ x: n91, y: e78 }, { x: r53, y: a48 });
  }
  function g23(t61, e78) {
    if (t61.anticlockwise) {
      var r53 = t61.startAngle < t61.endAngle ? t61.startAngle + x7 : t61.startAngle, a48 = Math.abs(r53 - t61.endAngle);
      return r53 - a48 * e78;
    } else {
      var i45 = t61.endAngle < t61.startAngle ? t61.endAngle + x7 : t61.endAngle, c47 = Math.abs(i45 - t61.startAngle);
      return t61.startAngle + c47 * e78;
    }
  }
  var h27 = { create: function t40(e78) {
    var a48 = o26(e78);
    var i45 = e78.cx;
    var c47 = e78.cy;
    var s40 = e78.r;
    var o42 = e78.ac;
    var u52, g31;
    if (e78.startAngle && e78.endAngle) {
      u52 = e78.startAngle;
      g31 = e78.endAngle;
      a48.x1 = i45 + s40 * Math.cos(u52);
      a48.y1 = c47 + s40 * Math.sin(u52);
      a48.x2 = i45 + s40 * Math.cos(g31);
      a48.y2 = c47 + s40 * Math.sin(g31);
    } else {
      u52 = f29(i45, c47, a48.x1, a48.y1);
      g31 = f29(i45, c47, a48.x2, a48.y2);
    }
    if (g31 < 0) {
      g31 += x7;
    }
    if (u52 < 0) {
      u52 += x7;
    }
    var h35 = g31 < u52 ? g31 + x7 : g31;
    var x27 = Math.abs(h35 - u52);
    if (o42) {
      x27 = x7 - x27;
    }
    var y34 = 2 * Math.PI * s40;
    var v41 = x27 / x7;
    var A19 = y34 * v41;
    var d32 = { xmin: i45 - s40, xmax: i45 + s40, ymin: c47 - s40, ymax: c47 + s40 };
    return Object.assign(a48, { extents: d32, length: A19, frac: v41, circumference: y34, sweep: x27, startAngle: u52, endAngle: g31, anticlockwise: o42, cx: i45, cy: c47, radius: s40, type: l34 });
  }, boundingBoxIntersection: function t41(n91, e78) {
    return h27.boxIntersection(n91, e78.x, e78.y, e78.w, e78.h);
  }, boxIntersection: function t42(n91, e78, r53, i45, c47) {
    return r34(n91, e78, r53, i45, c47);
  }, findClosestPointOnPath: function t43(n91, e78, r53) {
    return l27();
  }, getLength: function t44(n91) {
    return n91.length;
  }, getPath: function t45(n91, e78) {
    var r53 = n91.sweep > Math.PI ? 1 : 0, a48 = n91.anticlockwise ? 0 : 1;
    return (e78 ? "M" + n91.x1 + " " + n91.y1 + " " : "") + "A " + n91.radius + " " + n91.radius + " 0 " + r53 + "," + a48 + " " + n91.x2 + " " + n91.y2;
  }, gradientAtPoint: function t46(n91, r53, a48) {
    var i45 = h27.pointOnPath(n91, r53, a48);
    var c47 = u13({ x: n91.cx, y: n91.cy }, i45);
    if (!n91.anticlockwise && (c47 === Infinity || c47 === -Infinity)) {
      c47 *= -1;
    }
    return c47;
  }, lineIntersection: function t47(n91, e78, r53, a48, i45) {
    return u33();
  }, pointAlongPathFrom: function t48(n91, e78, r53, a48) {
    var i45 = h27.pointOnPath(n91, e78, a48), c47 = r53 / n91.circumference * 2 * Math.PI, s40 = n91.anticlockwise ? -1 : 1, o42 = i45.theta + s40 * c47, u52 = n91.cx + n91.radius * Math.cos(o42), l48 = n91.cy + n91.radius * Math.sin(o42);
    return { x: u52, y: l48 };
  }, pointOnPath: function t49(n91, e78, r53) {
    if (e78 === 0) {
      return { x: n91.x1, y: n91.y1, theta: n91.startAngle };
    } else if (e78 === 1) {
      return { x: n91.x2, y: n91.y2, theta: n91.endAngle };
    }
    if (r53) {
      e78 = e78 / length;
    }
    var a48 = g23(n91, e78), i45 = n91.cx + n91.radius * Math.cos(a48), c47 = n91.cy + n91.radius * Math.sin(a48);
    return { x: u35(i45), y: u35(c47), theta: a48 };
  } };
  n35(l34, h27);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/connector-orthogonal/utils.js
  function e68(n91, r53, t61, a48) {
    var e78 = Math.max(r53, t61), u52 = Math.min(r53, t61);
    return a48 ? u52 <= n91 && e78 >= n91 : u52 < n91 && e78 > n91;
  }
  function u36(n91, r53, t61) {
    return f30(r53, "h", t61, 1);
  }
  function l35(n91, r53, t61) {
    return f30(r53, "h", t61, -1);
  }
  function i33(n91, r53, t61) {
    return f30(r53, "v", t61, 1);
  }
  function o30(n91, r53, t61) {
    return f30(r53, "v", t61, -1);
  }
  function f30(n91, r53, t61, a48) {
    var e78 = r53 === "h" ? "v" : "h";
    var u52 = [];
    var l48 = n91;
    var i45 = a48 === -1 ? -1 : t61.length;
    while (l48 !== i45) {
      var o42 = t61[l48];
      if (o42.o === e78) {
        u52.push(o42);
        l48 += a48;
      } else {
        return { segment: o42, others: u52, index: l48 };
      }
    }
    return null;
  }
  function s34(n91) {
    return Math.sqrt(Math.pow(n91.ax2 - n91.ax1, 2) + Math.pow(n91.ay2 - n91.ay1, 2));
  }
  function x18(n91, t61, a48, e78) {
    var u52 = null, l48;
    if (e78 != null) {
      l48 = n91.indexOf(e78);
      if (l48 === -1) {
        return null;
      } else {
        l48 += t61;
      }
    } else {
      l48 = t61 === p31 ? n91.length - 2 : 1;
    }
    for (var i45 = l48; i45 > 0 && i45 < n91.length - 1; i45 += t61) {
      if (n91[i45].o === a48) {
        u52 = [n91[i45], i45];
        break;
      }
    }
    return u52;
  }
  function v30(n91) {
    var r53 = n91[0].ax1, e78 = n91[0].ay1, u52 = n91[n91.length - 1].ax2, l48 = n91[n91.length - 1].ay2, i45 = u52 >= r53 ? r53 : u52, o42 = l48 >= e78 ? e78 : l48;
    n91.forEach(function(n92) {
      n92.x1 = n92.ax1 - i45;
      n92.y1 = n92.ay1 - o42;
      n92.x2 = n92.ax2 - i45;
      n92.y2 = n92.ay2 - o42;
      if (n92.o == null || n92.o.length === 0) {
        n92.o = n92.ax1 === n92.ax2 ? l33 : n69;
      }
    });
    return n91;
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/connector-orthogonal/vertex-avoidance.js
  function o31(x27, y34, o42) {
    var f45 = x27[1];
    var i45 = false;
    var u52 = [{ x: f45.ax1, y: f45.ay1 }, { x: f45.ax2, y: f45.ay2 }];
    if (f45.o === n69) {
      var v41 = e68(f45.ax2, x27[0].ax1, x27[0].ax2) || c10(u52, y34).length > 0;
      if (v41) {
        var l48 = i33(f45, 1, x27);
        if (l48 != null) {
          var c47 = (l48.segment.ay1 + l48.segment.ay2) / 2;
          i45 = true;
          if (c47 < f45.ay1) {
            var h35 = Math.round((y34.y - o42) * 100) / 100;
            var g31 = f45.ay1;
            l48.others.forEach(function(a48) {
              a48.ay1 = h35;
              a48.ay2 = h35;
            });
            x27.splice(1, 0, { ax1: f45.ax1, ax2: f45.ax1, ay1: g31, ay2: h35, x1: 0, y1: 0, x2: 0, y2: 0, o: l33 });
            l48.segment.ay1 = h35;
          } else {
            var m44 = Math.round((y34.y2 + o42) * 100) / 100;
            var d32 = f45.ay1;
            l48.others.forEach(function(a48) {
              a48.ay1 = m44;
              a48.ay2 = m44;
            });
            x27.splice(1, 0, { ax1: f45.ax1, ax2: f45.ax1, ay1: d32, ay2: m44, x1: 0, y1: 0, x2: 0, y2: 0, o: l33 });
            l48.segment.ay1 = m44;
          }
        }
      }
    } else if (f45.o === l33) {
      var p49 = e68(f45.ay2, x27[0].ay1, x27[0].ay2) || c10(u52, y34).length > 0;
      if (p49) {
        var E17 = u36(f45, 1, x27);
        if (E17 != null) {
          var M20 = (E17.segment.ax1 + E17.segment.ax2) / 2;
          i45 = true;
          if (M20 < f45.ax1) {
            var j26 = Math.round((y34.x - o42) * 100) / 100;
            var A19 = f45.ax1;
            E17.others.forEach(function(a48) {
              a48.ax1 = j26;
              a48.ax2 = j26;
            });
            x27.splice(1, 0, { ay1: f45.ay1, ay2: f45.ay1, ax1: A19, ax2: j26, x1: 0, y1: 0, x2: 0, y2: 0, o: n69 });
            E17.segment.ax1 = j26;
          } else {
            var b28 = Math.round((y34.x2 + o42) * 100) / 100;
            var S20 = f45.ax1;
            E17.others.forEach(function(a48) {
              a48.ax1 = b28;
              a48.ax2 = b28;
            });
            x27.splice(1, 0, { ay1: f45.ay1, ay2: f45.ay1, ax1: S20, ax2: b28, x1: 0, y1: 0, x2: 0, y2: 0, o: n69 });
            E17.segment.ax1 = b28;
          }
        }
      }
    }
    return i45;
  }
  function f31(r53, t61, o42) {
    var f45 = r53.length - 2;
    var i45 = r53[f45];
    var u52 = false;
    var v41 = [{ x: i45.ax1, y: i45.ay1 }, { x: i45.ax2, y: i45.ay2 }];
    var l48 = r53[r53.length - 1];
    r53[0];
    if (i45.o === n69) {
      var c47 = e68(i45.ax1, l48.ax1, l48.ax2) || c10(v41, t61).length > 0;
      if (c47) {
        var h35 = o30(i45, f45, r53);
        if (h35 != null) {
          var g31 = (h35.segment.ay1 + h35.segment.ay2) / 2;
          u52 = true;
          if (g31 < i45.ay1) {
            var m44 = Math.round((t61.y - o42) * 100) / 100;
            var d32 = i45.ay1;
            h35.others.forEach(function(a48) {
              a48.ay1 = m44;
              a48.ay2 = m44;
            });
            r53.splice(f45 + 1, 0, { ax1: i45.ax2, ax2: i45.ax2, ay1: m44, ay2: d32, x1: 0, y1: 0, x2: 0, y2: 0, o: l33 });
            h35.segment.ay2 = m44;
          } else {
            var p49 = Math.round((t61.y2 + o42) * 100) / 100;
            var E17 = i45.ay1;
            h35.others.forEach(function(a48) {
              a48.ay1 = p49;
              a48.ay2 = p49;
            });
            r53.splice(f45 + 1, 0, { ax1: i45.ax2, ax2: i45.ax2, ay1: p49, ay2: E17, x1: 0, y1: 0, x2: 0, y2: 0, o: l33 });
            h35.segment.ay2 = p49;
          }
        }
      }
    } else if (i45.o === l33) {
      var M20 = e68(i45.ay1, l48.ay1, l48.ay2) || c10(v41, t61).length > 0;
      if (M20) {
        var j26 = l35(i45, f45, r53);
        if (j26 != null) {
          var A19 = (j26.segment.ax1 + j26.segment.ax2) / 2;
          u52 = true;
          if (A19 < i45.ax1) {
            var b28 = Math.round((t61.x - o42) * 100) / 100;
            var S20 = i45.ax1;
            j26.others.forEach(function(a48) {
              a48.ax1 = b28;
              a48.ax2 = b28;
            });
            r53.splice(f45 + 1, 0, { ay1: i45.ay2, ay2: i45.ay2, ax1: b28, ax2: S20, x1: 0, y1: 0, x2: 0, y2: 0, o: n69 });
            j26.segment.ax2 = b28;
          } else {
            var k20 = Math.round((t61.x2 + o42) * 100) / 100;
            var q12 = i45.ax1;
            j26.others.forEach(function(a48) {
              a48.ax1 = k20;
              a48.ax2 = k20;
            });
            r53.splice(f45 + 1, 0, { ay1: i45.ay2, ay2: i45.ay2, ax1: k20, ax2: q12, x1: 0, y1: 0, x2: 0, y2: 0, o: n69 });
            j26.segment.ax2 = k20;
          }
        }
      }
    }
    return u52;
  }
  function i34(a48, e78, r53, t61, x27) {
    if (a48.vertexAvoidance === false) {
      return { segments: e78, sourceAdjusted: false, targetAdjusted: false };
    } else {
      var y34, n91;
      if (x27) {
        y34 = f31(e78, t61, a48.targetStub);
        n91 = o31(e78, r53, a48.sourceStub);
      } else {
        n91 = o31(e78, r53, a48.sourceStub);
        y34 = f31(e78, t61, a48.targetStub);
      }
      return { segments: e78, sourceAdjusted: n91, targetAdjusted: y34 };
    }
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/connector-orthogonal/operations.js
  function w16(e78, n91, t61) {
    var r53 = e78.findIndex(function(e79) {
      return e79.ax1 === n91.ax1 && e79.ay1 === n91.ay1 && e79.ax2 === n91.ax2 && e79.ay2 === n91.ay2;
    });
    if (r53 > -1) {
      var o42 = e78[r53].o, a48 = e78[r53];
      return { segment: a48, index: r53, orientation: o42, prev: r53 > 1 ? e78[r53 - 1] : null, next: r53 < e78.length - 2 ? e78[r53 + 1] : null, left: t61 ? x18(e78, -1, o42, a48) : null, right: t61 ? x18(e78, 1, o42, a48) : null };
    } else {
      return null;
    }
  }
  function D12(e78, n91, t61, r53, o42, a48) {
    var l48 = w16(e78.orthogonalSegments, n91);
    if (l48 != null) {
      if (l48.orientation === l33) {
        l48.segment.ax1 = l48.segment.ax2 = t61[0];
      } else {
        l48.segment.ay1 = l48.segment.ay2 = t61[1];
      }
      var s40 = l48.orientation === l33;
      var u52 = l48.index;
      var g31 = l48.index;
      var i45 = u52 > 1 ? e78.orthogonalSegments[u52 - 1] : null, y34 = l48.segment;
      while (i45 != null) {
        if (i45.o === y34.o) {
          if (s40) {
            i45.ax1 = y34.ax1;
            i45.ax2 = y34.ax2;
          } else {
            i45.ay1 = y34.ay1;
            i45.ay2 = y34.ay2;
          }
        } else {
          i45.ax2 = y34.ax1;
          i45.ay2 = y34.ay1;
        }
        y34 = i45;
        u52--;
        i45 = u52 > 1 ? e78.orthogonalSegments[u52 - 1] : null;
      }
      if (y34.ax1 !== e78.orthogonalSegments[0].ax2) {
        var x27 = { x1: null, y1: null, x2: null, y2: null, o: n69, ax1: e78.orthogonalSegments[0].ax2, ay1: e78.orthogonalSegments[0].ay2, ax2: y34.ax1, ay2: y34.ay1 };
        e78.orthogonalSegments.splice(1, 0, x27);
        g31++;
      } else if (y34.ay1 !== e78.orthogonalSegments[0].ay2) {
        var m44 = { x1: null, y1: null, x2: null, y2: null, o: l33, ax1: e78.orthogonalSegments[0].ax2, ay1: e78.orthogonalSegments[0].ay2, ax2: y34.ax1, ay2: y34.ay1 };
        e78.orthogonalSegments.splice(1, 0, m44);
        g31++;
      }
      y34 = l48.segment;
      u52 = l48.index;
      var h35 = u52 < e78.orthogonalSegments.length - 2 ? e78.orthogonalSegments[u52 + 1] : null;
      while (h35 != null) {
        if (h35.o === y34.o) {
          if (s40) {
            h35.ax1 = y34.ax1;
            h35.ax2 = y34.ax2;
          } else {
            h35.ay1 = y34.ay1;
            h35.ay2 = y34.ay2;
          }
        } else {
          h35.ax1 = y34.ax2;
          h35.ay1 = y34.ay2;
        }
        y34 = h35;
        u52++;
        h35 = u52 < e78.orthogonalSegments.length - 2 ? e78.orthogonalSegments[u52 + 1] : null;
      }
      var v41 = e78.orthogonalSegments[e78.orthogonalSegments.length - 1];
      if (y34.ax2 !== v41.ax1) {
        var d32 = { x1: null, y1: null, x2: null, y2: null, o: n69, ax1: y34.ax2, ay1: y34.ay2, ax2: v41.ax1, ay2: v41.ay1 };
        e78.orthogonalSegments.splice(e78.orthogonalSegments.length - 1, 0, d32);
      } else if (y34.ay2 !== v41.ay1) {
        var X12 = { x1: null, y1: null, x2: null, y2: null, o: l33, ax1: y34.ax2, ay1: y34.ay2, ax2: v41.ax1, ay2: v41.ay1 };
        e78.orthogonalSegments.splice(e78.orthogonalSegments.length - 1, 0, X12);
      }
      if (a48 !== true) {
        var Y14 = i34(e78, e78.orthogonalSegments, r53, o42, false);
        if (Y14.sourceAdjusted) {
          g31 += 1;
        }
      }
      e78.orthogonalSegments = v30(e78.orthogonalSegments);
      e78.edited = true;
      return { ctx: l48, segments: e78.orthogonalSegments, index: g31 };
    } else {
      return null;
    }
  }
  function G10(e78) {
    var n91 = [x(e78[0])];
    var t61 = x(e78[e78.length - 1]);
    var o42 = e78.slice(1, e78.length - 1).filter(function(e79) {
      return s34(e79) > 0;
    }).map(x);
    if (o42.length === 0) {
      return e78;
    }
    var a48 = null;
    var l48 = null;
    for (var s40 = 0; s40 < o42.length; s40++) {
      if (a48 == null || l48 == null) {
        a48 = o42[s40];
        l48 = o42[s40].o;
      } else {
        if (o42[s40].o === l48) {
          a48.y2 = o42[s40].y2;
          a48.x2 = o42[s40].x2;
          a48.ay2 = o42[s40].ay2;
          a48.ax2 = o42[s40].ax2;
        } else {
          n91.push(a48);
          a48 = o42[s40];
          l48 = o42[s40].o;
        }
      }
    }
    n91.push(a48);
    n91.push(t61);
    if (n91.length === 3) {
      var u52 = n91[1], g31 = u52.o;
      var c47 = x(u52), y34 = x(u52), x27 = x(u52);
      y34.o = g31 === n69 ? l33 : n69;
      y34.x1 = c47.x1;
      y34.y1 = c47.y1;
      y34.x2 = c47.x1;
      y34.y2 = c47.y1;
      y34.ax1 = c47.ax1;
      y34.ay1 = c47.ay1;
      y34.ax2 = c47.ax1;
      y34.ay2 = c47.ay1;
      x27.o = g31 === n69 ? l33 : n69;
      x27.x1 = c47.x2;
      x27.y1 = c47.y2;
      x27.x2 = c47.x2;
      x27.y2 = c47.y2;
      x27.ax1 = c47.ax2;
      x27.ay1 = c47.ay2;
      x27.ax2 = c47.ax2;
      x27.ay2 = c47.ay2;
      n91 = [n91[0], y34, c47, x27, n91[2]];
    }
    return n91;
  }
  function L12(e78) {
    var n91 = G10(e78.orthogonalSegments);
    e78.orthogonalSegments = n91;
    if (e78.geometry != null) {
      e78.geometry.segments = v30(n91);
    }
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/connector-editors-orthogonal/orthogonal-editor.js
  var y24 = "jtk-orthogonal-handle";
  var d26 = "jtk-orthogonal-segment-drag";
  var c39 = "jtk-orthogonal-segment-drag-ns";
  var f32 = "jtk-orthogonal-segment-drag-ew";
  var v31 = function(l48) {
    a(p49, l48);
    var v41 = s(p49);
    function p49(e78, t61) {
      var r53;
      t(this, p49);
      r53 = v41.call(this, e78, t61);
      o(l(r53), "segments", void 0);
      o(l(r53), "segmentHandles", void 0);
      o(l(r53), "geometry", void 0);
      r53.segments = [];
      r53.segmentHandles = [];
      r53._addDragHandler({ selector: "." + d26, drag: function e79(t62) {
        var n91 = t62.drag.getDragElement()._jsPlumbDragHandle;
        var s40 = r53.jsplumb.getSize(n91.el);
        var o42 = [Math.floor(t62.pos.x + s40.w / 2), Math.floor(t62.pos.y + s40.h / 2)];
        var i45 = D12(r53.currentConnector, n91.geometry, o42, r53.sourceInfo, r53.targetInfo);
        if (i45 != null) {
          r53.segments.length = 0;
          r53.geometry.segments = i45.segments;
          Array.prototype.push.apply(r53.segments, r53.geometry.segments);
          n91.geometry = r53.geometry.segments[i45.index];
          r53.repaintConnection({ segmentInfo: n91, segmentIndex: i45.index });
        }
      }, constrainFunction: function e79(t62, n91, s40, o42) {
        var r54 = n91._jsPlumbDragHandle;
        var i45 = r54.geometry.ax1 === r54.geometry.ax2;
        if (i45) {
          return { x: t62.x, y: (r54.geometry.ay1 + r54.geometry.ay2) / 2 - o42.h / 2 };
        } else {
          return { x: (r54.geometry.ax1 + r54.geometry.ax2) / 2 - o42.w / 2, y: t62.y };
        }
      }, stop: function e79(t62) {
        r53._trimConnection();
        r53.fireConnectionEditEvent();
      } });
      return r53;
    }
    n(p49, [{ key: "_setHandlePosition", value: function e78(t61, n91) {
      t61.el.style.visibility = "visible";
      this._setElementPosition(t61.el, n91[0], n91[1]);
    } }, { key: "_repaint", value: function e78(t61) {
      this._update(t61);
      for (var n91 = 0; n91 < this.segmentHandles.length; n91++) {
        this.segmentHandles[n91].geometry = this.geometry.segments[n91 + 1];
        if (s34(this.segmentHandles[n91].geometry) > 0) {
          var s40 = [(this.segmentHandles[n91].geometry.ax1 + this.segmentHandles[n91].geometry.ax2) / 2, (this.segmentHandles[n91].geometry.ay1 + this.segmentHandles[n91].geometry.ay2) / 2];
          this._setHandlePosition(this.segmentHandles[n91], s40);
        } else {
          this.segmentHandles[n91].el.style.visibility = "hidden";
        }
      }
    } }, { key: "_clearHandles", value: function e78(t61) {
      for (var n91 = 0; n91 < this.segmentHandles.length; n91++) {
        if (this.segmentHandles[n91].el !== t61) {
          this.jsplumb._removeElement(this.segmentHandles[n91].el);
        }
      }
    } }, { key: "_activate", value: function e78(t61, n91) {
      this._update();
    } }, { key: "_elementDragged", value: function e78(t61) {
      this._trimConnection();
    } }, { key: "_elementDragging", value: function e78(t61) {
      this._repaint();
    } }, { key: "_update", value: function e78(t61) {
      t61 = t61 || {};
      var n91 = t61.segmentInfo, s40 = t61.segmentIndex;
      this.geometry = this.current.connector.geometry;
      if (this.geometry && this.geometry.segments) {
        this._clearHandles(n91 ? n91.el : null);
        this.segmentHandles.length = 0;
        this.segments.length = 0;
        Array.prototype.push.apply(this.segments, this.geometry.segments);
        for (var o42 = 1; o42 < this.segments.length - 1; o42++) {
          if (n91 == null || o42 !== s40) {
            var r53 = [(this.segments[o42].ax1 + this.segments[o42].ax2) / 2, (this.segments[o42].ay1 + this.segments[o42].ay2) / 2], l49 = r53[0], g31 = r53[1], m44 = this.segments[o42].o === l33, h35 = q8(l49, g31, this.jsplumb, [Z6, y24, d26, m44 ? f32 : c39].join(" "), true);
            var v42 = { left: l49, top: g31, el: h35, geometry: this.segments[o42], vertical: m44 };
            h35._jsPlumbDragHandle = v42;
            this.segmentHandles.push(v42);
            this._setHandlePosition(v42, r53);
          } else if (o42 === s40) {
            this.segmentHandles.push(n91);
          }
        }
      }
    } }, { key: "_trimConnection", value: function e78() {
      if (this.current) {
        L12(this.currentConnector);
        this.repaintConnection();
      }
    } }]);
    return p49;
  }($6);
  o(v31, "type", "Orthogonal");

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/connector-editors-orthogonal/index.js
  p32.set(v31.type, v31);
  function r38() {
    p32.set(v31.type, v31);
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/connector-bezier/bezier.js
  var t50 = { subtract: function r39(t61, n91) {
    return { x: t61.x - n91.x, y: t61.y - n91.y };
  }, dotProduct: function r40(t61, n91) {
    return t61.x * n91.x + t61.y * n91.y;
  }, square: function r41(t61) {
    return Math.sqrt(t61.x * t61.x + t61.y * t61.y);
  }, scale: function r42(t61, n91) {
    return { x: t61.x * n91, y: t61.y * n91 };
  } };
  var n70 = 64;
  var a36 = Math.pow(2, -n70 - 1);
  function u37(r53, n91) {
    var a48 = [], u52 = i35(r53, n91), o42 = n91.length - 1, e78 = 2 * o42 - 1, c47 = f33(u52, e78, a48, 0), h35 = t50.subtract(r53, n91[0]), y34 = t50.square(h35), l48 = 0, s40;
    for (var p49 = 0; p49 < c47; p49++) {
      h35 = t50.subtract(r53, v32(n91, o42, a48[p49], null, null));
      s40 = t50.square(h35);
      if (s40 < y34) {
        y34 = s40;
        l48 = a48[p49];
      }
    }
    h35 = t50.subtract(r53, n91[o42]);
    s40 = t50.square(h35);
    if (s40 < y34) {
      y34 = s40;
      l48 = 1;
    }
    return { location: l48, distance: y34 };
  }
  function o32(r53, t61) {
    var n91 = u37(r53, t61);
    return { point: v32(t61, t61.length - 1, n91.location, null, null), location: n91.location };
  }
  function i35(r53, n91) {
    var a48 = n91.length - 1, u52 = 2 * a48 - 1, o42 = [], i45 = [], f45 = [], e78 = [], c47 = [[1, 0.6, 0.3, 0.1], [0.4, 0.6, 0.6, 0.4], [0.1, 0.3, 0.6, 1]];
    for (var h35 = 0; h35 <= a48; h35++) {
      o42[h35] = t50.subtract(n91[h35], r53);
    }
    for (var v41 = 0; v41 <= a48 - 1; v41++) {
      i45[v41] = t50.subtract(n91[v41 + 1], n91[v41]);
      i45[v41] = t50.scale(i45[v41], 3);
    }
    for (var y34 = 0; y34 <= a48 - 1; y34++) {
      for (var l48 = 0; l48 <= a48; l48++) {
        if (!f45[y34])
          f45[y34] = [];
        f45[y34][l48] = t50.dotProduct(i45[y34], o42[l48]);
      }
    }
    for (var s40 = 0; s40 <= u52; s40++) {
      if (!e78[s40]) {
        e78[s40] = [];
      }
      e78[s40].y = 0;
      e78[s40].x = parseFloat("" + s40) / u52;
    }
    var p49 = a48, x27 = a48 - 1;
    for (var M20 = 0; M20 <= p49 + x27; M20++) {
      var w23 = Math.max(0, M20 - x27), q12 = Math.min(M20, p49);
      for (var b28 = w23; b28 <= q12; b28++) {
        var g31 = M20 - b28;
        e78[b28 + g31].y += f45[g31][b28] * c47[g31][b28];
      }
    }
    return e78;
  }
  function f33(r53, t61, a48, u52) {
    var o42 = [], i45 = [], y34, l48, s40 = [], p49 = [];
    switch (e69(r53, t61)) {
      case 0: {
        return 0;
      }
      case 1: {
        if (u52 >= n70) {
          a48[0] = (r53[0].x + r53[t61].x) / 2;
          return 1;
        }
        if (c40(r53, t61)) {
          a48[0] = h28(r53, t61);
          return 1;
        }
        break;
      }
    }
    v32(r53, t61, 0.5, o42, i45);
    y34 = f33(o42, t61, s40, u52 + 1);
    l48 = f33(i45, t61, p49, u52 + 1);
    for (var x27 = 0; x27 < y34; x27++) {
      a48[x27] = s40[x27];
    }
    for (var M20 = 0; M20 < l48; M20++) {
      a48[M20 + y34] = p49[M20];
    }
    return y34 + l48;
  }
  function e69(t61, n91) {
    var a48 = 0, u52, o42;
    u52 = o42 = R(t61[0].y);
    for (var i45 = 1; i45 <= n91; i45++) {
      u52 = R(t61[i45].y);
      if (u52 != o42)
        a48++;
      o42 = u52;
    }
    return a48;
  }
  function c40(r53, t61) {
    var n91, u52, o42, i45, f45, e78, c47, h35, v41, y34, l48, s40, p49, x27, M20, w23;
    e78 = r53[0].y - r53[t61].y;
    c47 = r53[t61].x - r53[0].x;
    h35 = r53[0].x * r53[t61].y - r53[t61].x * r53[0].y;
    var q12, b28;
    q12 = b28 = 0;
    for (var g31 = 1; g31 < t61; g31++) {
      var d32 = e78 * r53[g31].x + c47 * r53[g31].y + h35;
      if (d32 > q12) {
        q12 = d32;
      } else if (d32 < b28) {
        b28 = d32;
      }
    }
    l48 = 0;
    s40 = 1;
    p49 = 0;
    x27 = e78;
    M20 = c47;
    w23 = h35 - q12;
    v41 = l48 * M20 - x27 * s40;
    y34 = 1 / v41;
    u52 = (s40 * w23 - M20 * p49) * y34;
    x27 = e78;
    M20 = c47;
    w23 = h35 - b28;
    v41 = l48 * M20 - x27 * s40;
    y34 = 1 / v41;
    o42 = (s40 * w23 - M20 * p49) * y34;
    i45 = Math.min(u52, o42);
    f45 = Math.max(u52, o42);
    n91 = f45 - i45;
    return n91 < a36 ? 1 : 0;
  }
  function h28(r53, t61) {
    var n91 = 1, a48 = 0, u52 = r53[t61].x - r53[0].x, o42 = r53[t61].y - r53[0].y, i45 = r53[0].x - 0, f45 = r53[0].y - 0, e78 = u52 * a48 - o42 * n91, c47 = 1 / e78, h35 = (u52 * f45 - o42 * i45) * c47;
    return 0 + n91 * h35;
  }
  function v32(r53, t61, n91, a48, u52) {
    var o42 = [[]];
    for (var i45 = 0; i45 <= t61; i45++) {
      o42[0][i45] = r53[i45];
    }
    for (var f45 = 1; f45 <= t61; f45++) {
      for (var e78 = 0; e78 <= t61 - f45; e78++) {
        if (!o42[f45])
          o42[f45] = [];
        if (!o42[f45][e78])
          o42[f45][e78] = {};
        o42[f45][e78].x = (1 - n91) * o42[f45 - 1][e78].x + n91 * o42[f45 - 1][e78 + 1].x;
        o42[f45][e78].y = (1 - n91) * o42[f45 - 1][e78].y + n91 * o42[f45 - 1][e78 + 1].y;
      }
    }
    if (a48 != null) {
      for (var c47 = 0; c47 <= t61; c47++) {
        a48[c47] = o42[c47][0];
      }
    }
    if (u52 != null) {
      for (var h35 = 0; h35 <= t61; h35++) {
        u52[h35] = o42[t61 - h35][h35];
      }
    }
    return o42[t61][0];
  }
  function y25(r53, t61) {
    var n91 = [];
    r53--;
    for (var a48 = 0; a48 <= r53; a48++) {
      n91.push(l36(a48 / r53, t61));
    }
    return n91;
  }
  function l36(r53, t61) {
    var n91 = { x: 0, y: 0 };
    if (r53 === 0) {
      return t61[0];
    }
    var a48 = t61.length - 1;
    if (r53 === 1) {
      return t61[a48];
    }
    var u52 = t61;
    var o42 = 1 - r53;
    if (a48 === 0) {
      return t61[0];
    }
    if (a48 === 1) {
      return { x: o42 * u52[0].x + r53 * u52[1].x, y: o42 * u52[0].y + r53 * u52[1].y };
    }
    if (4 > a48) {
      var i45 = o42 * o42, f45 = r53 * r53, e78 = 0, c47, h35, v41;
      if (a48 === 2) {
        u52 = [u52[0], u52[1], u52[2], n91];
        c47 = i45;
        h35 = 2 * (o42 * r53);
        v41 = f45;
      } else if (a48 === 3) {
        c47 = i45 * o42;
        h35 = 3 * (i45 * r53);
        v41 = 3 * (o42 * f45);
        e78 = r53 * f45;
      }
      return { x: c47 * u52[0].x + h35 * u52[1].x + v41 * u52[2].x + e78 * u52[3].x, y: c47 * u52[0].y + h35 * u52[1].y + v41 * u52[2].y + e78 * u52[3].y };
    } else {
      return n91;
    }
  }
  function s35(r53) {
    var t61 = 0;
    if (!q9(r53)) {
      var n91 = 16;
      var a48 = y25(n91, r53);
      for (var u52 = 0; u52 < n91 - 1; u52++) {
        var o42 = a48[u52], i45 = a48[u52 + 1];
        t61 += w17(o42, i45);
      }
    }
    return t61;
  }
  var p34 = /* @__PURE__ */ new Map();
  function x19(r53) {
    var t61 = p34.get(r53);
    if (!t61) {
      t61 = [];
      var n91 = function t62() {
        return function(t63) {
          return Math.pow(t63, r53);
        };
      }, a48 = function t62() {
        return function(t63) {
          return Math.pow(1 - t63, r53);
        };
      }, u52 = function r54(t62) {
        return function(r55) {
          return t62;
        };
      }, o42 = function r54() {
        return function(r55) {
          return r55;
        };
      }, i45 = function r54() {
        return function(r55) {
          return 1 - r55;
        };
      }, f45 = function r54(t62) {
        return function(r55) {
          var n92 = 1;
          for (var a49 = 0; a49 < t62.length; a49++) {
            n92 = n92 * t62[a49](r55);
          }
          return n92;
        };
      };
      t61.push(n91());
      for (var e78 = 1; e78 < r53; e78++) {
        var c47 = [u52(r53)];
        for (var h35 = 0; h35 < r53 - e78; h35++) {
          c47.push(o42());
        }
        for (var v41 = 0; v41 < e78; v41++) {
          c47.push(i45());
        }
        t61.push(f45(c47));
      }
      t61.push(a48());
      p34.set(r53, t61);
    }
    return t61;
  }
  function M15(r53, t61) {
    var n91 = x19(r53.length - 1), a48 = 0, u52 = 0;
    for (var o42 = 0; o42 < r53.length; o42++) {
      a48 = a48 + r53[o42].x * n91[o42](t61);
      u52 = u52 + r53[o42].y * n91[o42](t61);
    }
    return { x: a48, y: u52 };
  }
  function w17(r53, t61) {
    return Math.sqrt(Math.pow(r53.x - t61.x, 2) + Math.pow(r53.y - t61.y, 2));
  }
  function q9(r53) {
    return r53[0].x === r53[1].x && r53[0].y === r53[1].y;
  }
  function b22(r53, t61, n91) {
    if (q9(r53)) {
      return { point: r53[0], location: t61 };
    }
    var a48 = M15(r53, t61), u52 = 0, o42 = t61, i45 = n91 > 0 ? 1 : -1, f45 = null;
    while (u52 < Math.abs(n91)) {
      o42 += 5e-3 * i45;
      f45 = M15(r53, o42);
      u52 += w17(f45, a48);
      a48 = f45;
    }
    return { point: f45, location: o42 };
  }
  function g25(r53, t61, n91) {
    return b22(r53, t61, n91).point;
  }
  function d27(r53, t61, n91) {
    return b22(r53, t61, n91).location;
  }
  function m32(r53, t61) {
    var n91 = M15(r53, t61), a48 = M15(r53.slice(0, r53.length - 1), t61), u52 = a48.y - n91.y, o42 = a48.x - n91.x;
    return u52 === 0 ? Infinity : Math.atan(u52 / o42);
  }
  function j19(r53, t61, n91, a48, u52) {
    var o42 = a48 - t61, i45 = r53 - n91, f45 = r53 * (t61 - a48) + t61 * (n91 - r53), e78 = A14(u52), c47 = [o42 * e78[0][0] + i45 * e78[1][0], o42 * e78[0][1] + i45 * e78[1][1], o42 * e78[0][2] + i45 * e78[1][2], o42 * e78[0][3] + i45 * e78[1][3] + f45], h35 = B12.apply(null, c47), v41 = [];
    if (h35 != null) {
      for (var y34 = 0; y34 < 3; y34++) {
        var l48 = h35[y34], s40 = Math.pow(l48, 2), p49 = Math.pow(l48, 3), x27 = { x: e78[0][0] * p49 + e78[0][1] * s40 + e78[0][2] * l48 + e78[0][3], y: e78[1][0] * p49 + e78[1][1] * s40 + e78[1][2] * l48 + e78[1][3] };
        var M20 = void 0;
        if (n91 - r53 !== 0) {
          M20 = (x27[0] - r53) / (n91 - r53);
        } else {
          M20 = (x27[1] - t61) / (a48 - t61);
        }
        if (l48 >= 0 && l48 <= 1 && M20 >= 0 && M20 <= 1) {
          v41.push(x27);
        }
      }
    }
    return v41;
  }
  function z12(r53, t61) {
    return [-r53[0][t61] + 3 * r53[1][t61] + -3 * r53[2][t61] + r53[3][t61], 3 * r53[0][t61] - 6 * r53[1][t61] + 3 * r53[2][t61], -3 * r53[0][t61] + 3 * r53[1][t61], r53[0][t61]];
  }
  function A14(r53) {
    return [z12(r53, "x"), z12(r53, "y")];
  }
  function B12(t61, n91, a48, u52) {
    var o42 = n91 / t61, i45 = a48 / t61, f45 = u52 / t61, e78 = (3 * i45 - Math.pow(o42, 2)) / 9, c47 = (9 * o42 * i45 - 27 * f45 - 2 * Math.pow(o42, 3)) / 54, h35 = Math.pow(e78, 3) + Math.pow(c47, 2), v41, y34, l48 = [0, 0, 0];
    if (h35 >= 0) {
      v41 = R(c47 + Math.sqrt(h35)) * Math.pow(Math.abs(c47 + Math.sqrt(h35)), 1 / 3);
      y34 = R(c47 - Math.sqrt(h35)) * Math.pow(Math.abs(c47 - Math.sqrt(h35)), 1 / 3);
      l48[0] = -o42 / 3 + (v41 + y34);
      l48[1] = -o42 / 3 - (v41 + y34) / 2;
      l48[2] = -o42 / 3 - (v41 + y34) / 2;
      if (Math.abs(Math.sqrt(3) * (v41 - y34) / 2) !== 0) {
        l48[1] = -1;
        l48[2] = -1;
      }
    } else {
      var s40 = Math.acos(c47 / Math.sqrt(-Math.pow(e78, 3)));
      l48[0] = 2 * Math.sqrt(-e78) * Math.cos(s40 / 3) - o42 / 3;
      l48[1] = 2 * Math.sqrt(-e78) * Math.cos((s40 + 2 * Math.PI) / 3) - o42 / 3;
      l48[2] = 2 * Math.sqrt(-e78) * Math.cos((s40 + 4 * Math.PI) / 3) - o42 / 3;
    }
    for (var p49 = 0; p49 < 3; p49++) {
      if (l48[p49] < 0 || l48[p49] > 1) {
        l48[p49] = -1;
      }
    }
    return l48;
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/connector-bezier/bezier-segment.js
  var p35 = "Bezier";
  function l37(n91, t61, r53) {
    if (r53) {
      t61 = d27(n91, t61 > 0 ? 0 : 1, t61);
    }
    return t61;
  }
  var v33 = { create: function n71(t61) {
    var r53 = o26(t61);
    var e78 = t61.cp1x;
    var c47 = t61.cp1y;
    var o42 = t61.cp2x;
    var i45 = t61.cp2y;
    var x27 = [{ x: r53.x1, y: r53.y1 }, { x: e78, y: c47 }, { x: o42, y: i45 }, { x: r53.x2, y: r53.y2 }];
    var a48 = { xmin: Math.min(r53.x1, r53.x2, e78, o42), ymin: Math.min(r53.y1, r53.y2, c47, i45), xmax: Math.max(r53.x1, r53.x2, e78, o42), ymax: Math.max(r53.y1, r53.y2, c47, i45) };
    return Object.assign(r53, { cp1x: e78, cp2x: o42, cp1y: c47, cp2y: i45, curve: x27, extents: a48, length: 0, type: p35 });
  }, boundingBoxIntersection: function n72(t61, r53) {
    return i26(t61, r53);
  }, boxIntersection: function n73(t61, r53, e78, c47, o42) {
    return r34(t61, r53, e78, c47, o42);
  }, findClosestPointOnPath: function t51(r53, e78, c47) {
    var o42 = o32({ x: e78, y: c47 }, r53.curve);
    return { d: Math.sqrt(Math.pow(o42.point.x - e78, 2) + Math.pow(o42.point.y - c47, 2)), x: o42.point.x, y: o42.point.y, l: 1 - o42.location, s: r53, x1: null, y1: null, x2: null, y2: null };
  }, getLength: function n74(r53) {
    if (r53.length == null || r53.length === 0) {
      r53.length = s35(r53.curve);
    }
    return r53.length;
  }, getPath: function n75(t61, r53) {
    return (r53 ? "M " + t61.x2 + " " + t61.y2 + " " : "") + "C " + t61.cp2x + " " + t61.cp2y + " " + t61.cp1x + " " + t61.cp1y + " " + t61.x1 + " " + t61.y1;
  }, gradientAtPoint: function n76(t61, e78, c47) {
    e78 = l37(t61.curve, e78, c47);
    return m32(t61.curve, e78);
  }, lineIntersection: function n77(t61, r53, c47, o42, i45) {
    return j19(r53, c47, o42, i45, t61.curve);
  }, pointAlongPathFrom: function n78(t61, r53, e78, o42) {
    r53 = l37(t61.curve, r53, o42);
    return g25(t61.curve, r53, e78);
  }, pointOnPath: function n79(t61, r53, e78) {
    r53 = l37(t61.curve, r53, e78);
    return M15(t61.curve, r53);
  } };
  n35(p35, v33);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/connector-segmented/operations.js
  function g26(t61, e78) {
    return t61.curX === e78.curX && t61.curY === e78.curY;
  }
  function m33(t61, e78) {
    var r53 = X9(e78);
    if (t61.smooth === true && r53.length >= 2) {
      var a48 = f34(t61, r53);
      a48.map(function(e79) {
        return g14(t61, e79.type, e79.segment);
      });
    } else {
      if (t61.cornerRadius != null) {
        v34(t61, r53);
      } else {
        r53.map(function(e79) {
          return g14(t61, e65, e79);
        });
      }
    }
    return r53;
  }
  function i36(t61) {
    return Math.atan2(t61.ay1 - t61.ay2, t61.ax1 - t61.ax2);
  }
  function l38(t61) {
    return Math.sqrt(Math.pow(t61.ax2 - t61.ax1, 2) + Math.pow(t61.ay2 - t61.ay1, 2));
  }
  function v34(t61, n91) {
    var s40 = null, u52, c47, g31;
    for (var m44 = 0; m44 < n91.length - 1; m44++) {
      s40 = s40 || Object.assign({}, n91[m44]);
      u52 = Object.assign(n91[m44 + 1]);
      c47 = i36(s40);
      g31 = i36(u52);
      if (t61.cornerRadius > 0 && c47 !== g31) {
        var v41 = Math.min(l38(s40), l38(u52));
        var f45 = Math.min(t61.cornerRadius, 0.99 * v41 / 2);
        var h35 = { x: s40.x2 + f45 * Math.cos(c47), y: s40.y2 + f45 * Math.sin(c47) };
        var b28 = { x: u52.x1 - f45 * Math.cos(g31), y: u52.y1 - f45 * Math.sin(g31) };
        var p49 = Math.atan((c47 - g31) / (1 + c47 * g31));
        var X12 = m11({ x: s40.x1, y: s40.y1 }, h35, 1e4);
        var Y14 = m11({ x: u52.x1, y: u52.y1 }, b28, 1e4);
        var M20 = s10(X12, Y14);
        var d32 = M20 != null ? o13(M20, h35) : 0;
        if (d32 > 0) {
          s40.x2 = h35.x;
          s40.y2 = h35.y;
          u52.x1 = b28.x;
          u52.y1 = b28.y;
          g14(t61, e65, Object.assign({}, s40));
          g14(t61, l34, { r: d32, x1: h35.x, y1: h35.y, x2: b28.x, y2: b28.y, cx: M20.x, cy: M20.y, ac: p49 > 0 });
        } else {
          g14(t61, e65, Object.assign({}, s40));
        }
      } else {
        g14(t61, e65, Object.assign({}, s40));
      }
      s40 = u52;
    }
    if (u52 != null) {
      g14(t61, e65, Object.assign({}, s40));
    }
  }
  function f34(t61, e78) {
    var r53 = function t62(e79, r54) {
      var a49 = r54.x - e79.x;
      var n92 = r54.y - e79.y;
      return { length: Math.sqrt(Math.pow(a49, 2) + Math.pow(n92, 2)), angle: Math.atan2(n92, a49) };
    };
    var a48 = function e79(a49, n92, s41, u53) {
      var o43 = n92 || a49;
      var y35 = s41 || a49;
      var c47 = r53(o43, y35);
      var x28 = c47.angle + (u53 ? Math.PI : 0);
      var g32 = c47.length * t61.smoothing;
      var m45 = a49.x + Math.cos(x28) * g32;
      var i46 = a49.y + Math.sin(x28) * g32;
      return { x: m45, y: i46 };
    };
    var n91 = e78[e78.length - 1];
    var s40 = [];
    function u52(t62) {
      var r54 = t62 === e78.length ? { x: n91.x2, y: n91.y2 } : e78[t62] != null ? { x: e78[t62].x1, y: e78[t62].y1 } : null;
      return r54;
    }
    for (var o42 = 2; o42 < e78.length + 1; o42++) {
      var y34 = u52(o42 - 1);
      var x27 = u52(o42);
      var g31 = u52(o42 + 1);
      var m44 = u52(o42 - 2);
      var i45 = a48(y34, m44, x27);
      var l48 = a48(x27, y34, g31, true);
      s40.push({ type: p35, segment: { x1: x27.x, x2: o42 === 2 ? e78[0].x1 : y34.x, y1: x27.y, y2: o42 === 2 ? e78[0].y1 : y34.y, cp2x: i45.x, cp2y: i45.y, cp1x: l48.x, cp1y: l48.y } });
    }
    return s40;
  }
  function h29(e78, r53, a48) {
    var n91 = M6({ x: r53.sx, y: r53.sy }, { x: r53.tx, y: r53.ty });
    if (e78.geometry == null || !e78.edited) {
      var s40 = [{ ax1: r53.sx + r53.x, ay1: r53.sy + r53.y, ax2: r53.x + r53.startStubX, ay2: r53.y + r53.startStubY, x1: r53.sx, y1: r53.sy, x2: r53.startStubX, y2: r53.startStubY }, { ax1: r53.x + r53.startStubX, ay1: r53.y + r53.startStubY, ax2: r53.x + r53.endStubX, ay2: r53.y + r53.endStubY, x1: r53.startStubX, y1: r53.startStubY, x2: r53.endStubX, y2: r53.endStubY }, { ax1: r53.x + r53.endStubX, ay1: r53.y + r53.endStubY, ax2: r53.x + r53.tx, ay2: r53.y + r53.ty, x1: r53.endStubX, y1: r53.endStubY, x2: r53.tx, y2: r53.ty }];
      var u52 = m33(e78, s40);
      e78.geometry = { source: a48.sourcePos, target: a48.targetPos, segments: u52, quadrant: n91 };
    } else {
      var o42 = a48.sourcePos, y34 = a48.targetPos;
      var c47 = !g26(o42, e78.geometry.source), x27 = !g26(y34, e78.geometry.target);
      if (x27) {
        var i45 = e78.geometry.segments[e78.geometry.segments.length - 1];
        i45.ax2 = y34.curX;
        i45.ay2 = y34.curY;
        e78.geometry.target.curX = y34.curX;
        e78.geometry.target.curY = y34.curY;
      } else if (c47) {
        var l48 = e78.geometry.segments[0];
        l48.ax1 = o42.curX;
        l48.ay1 = o42.curY;
        e78.geometry.source.curX = o42.curX;
        e78.geometry.source.curY = o42.curY;
      }
      e78.geometry.quadrant = n91;
      d28(e78);
      m33(e78, e78.geometry.segments);
    }
  }
  function b23(t61, e78, r53) {
    return { source: i25(t61.source, e78, r53), target: i25(t61.target, e78, r53), segments: t61.segments.map(function(t62) {
      return { x: t62.x + e78, y: t62.y + r53 };
    }) };
  }
  function p36(e78, r53) {
    if (r53 != null && r53.segments != null && r53.source != null && r53.target != null) {
      var a48 = [];
      var n91 = r53.source.curX, o42 = r53.source.curY;
      var y34 = n91, c47 = o42;
      for (var x27 = 0; x27 < r53.segments.length; x27++) {
        a48.push({ ax1: y34, ay1: c47, ax2: r53.segments[x27].x, ay2: r53.segments[x27].y, x1: 0, y1: 0, x2: 0, y2: 0 });
        y34 = r53.segments[x27].x;
        c47 = r53.segments[x27].y;
      }
      a48.push({ ax1: y34, ay1: c47, ax2: r53.target.curX, ay2: r53.target.curY, x1: 0, y1: 0, x2: 0, y2: 0 });
      var g31 = M6({ x: r53.source.curX, y: r53.source.curY }, { x: r53.target.curX, y: r53.target.curY });
      var i45 = m33(e78, Y11(a48));
      i18.setGeometry(e78, { source: r53.source, target: r53.target, segments: i45, quadrant: g31 }, false);
      u32(r53.source, e78.connection, 0);
      u32(r53.target, e78.connection, 1);
      return true;
    }
    return false;
  }
  function X9(t61) {
    if (t61.length === 0) {
      return [];
    } else {
      return t61.filter(function(t62) {
        return !(t62.x1 === t62.x2 && t62.y1 === t62.y2);
      });
    }
  }
  function Y11(t61) {
    var e78 = t61[0].ax1, r53 = t61[0].ay1, a48 = t61[t61.length - 1].ax2, n91 = t61[t61.length - 1].ay2, s40 = a48 >= e78 ? e78 : a48, u52 = n91 >= r53 ? r53 : n91;
    t61.forEach(function(t62) {
      t62.x1 = t62.ax1 - s40;
      t62.y1 = t62.ay1 - u52;
      t62.x2 = t62.ax2 - s40;
      t62.y2 = t62.ay2 - u52;
    });
    return t61;
  }
  function M16(t61) {
    if (t61.geometry == null) {
      return null;
    } else {
      var e78 = t61.geometry.segments.slice(0, t61.geometry.segments.length - 1).map(function(t62) {
        return { x: t62.ax2, y: t62.ay2 };
      });
      return { segments: e78, source: t61.geometry.source, target: t61.geometry.target };
    }
  }
  function d28(t61) {
    if (t61.geometry != null) {
      t61.geometry.segments = Y11(t61.geometry.segments);
    }
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/connector-segmented/segmented-connector.js
  var m34 = 0.15;
  var a37 = "Segmented";
  i18.register(a37, { compute: h29, create: l39, setAnchorOrientation: function r43(o42, e78, t61) {
  }, geometryImporter: p36, geometryExporter: M16, transformGeometry: b23 });
  function l39(r53, o42) {
    var t61 = c36(a37, r53, o42, [0, 0]);
    var n91 = Object.assign(t61, { cornerRadius: o42.cornerRadius != null ? o42.cornerRadius : null, smooth: o42.smooth === true, smoothing: o42.smoothing == null ? m34 : o42.smoothing, geometry: { segments: [] } });
    return n91;
  }
  var u38 = function o33() {
    t(this, o33);
  };
  o(u38, "type", a37);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/connector-editors-segmented/segmented-editor.js
  var f35 = "jtk-segmented-handle";
  var v35 = "jtk-segmented-segment-drag";
  var p37 = "jtk-segmented-segment-split";
  var y26 = "jtk-segmented-segment-delete";
  var x20 = "jtk-segmented-editor-guideline";
  var j20 = "jtk-edge-guideline";
  var H8 = function(g31) {
    a(H12, g31);
    var c47 = s(H12);
    function H12(e78, t61) {
      var a48;
      t(this, H12);
      a48 = c47.call(this, e78, t61);
      o(l(a48), "geometry", void 0);
      o(l(a48), "segments", []);
      o(l(a48), "segmentHandles", []);
      o(l(a48), "guideLine", void 0);
      o(l(a48), "splitListener", void 0);
      o(l(a48), "deleteListener", void 0);
      a48.segments = [];
      a48.splitListener = function(e79) {
        var t62 = e79.target._jsPlumbDragHandle;
        if (t62) {
          var s40 = { ax1: t62.focus.ax1, ay1: t62.focus.ay1, ax2: t62.midPoint.x, ay2: t62.midPoint.y, x1: 0, x2: 0, y1: 0, y2: 0 };
          t62.focus.ax1 = t62.midPoint.x;
          t62.focus.ay1 = t62.midPoint.y;
          var n91 = a48.current.connector.geometry.segments;
          n91[t62.index].ax1 = t62.midPoint.x;
          n91[t62.index].ay1 = t62.midPoint.y;
          n91.splice(t62.index, 0, s40);
          d28(a48.currentConnector);
          a48.currentConnector.edited = true;
          a48.repaintConnection();
          a48.fireConnectionEditEvent();
        }
      }.bind(l(a48));
      a48.deleteListener = function(e79) {
        var t62 = e79.target._jsPlumbDragHandle;
        if (t62) {
          var s40 = t62.index;
          if (s40 === 0) {
            a48.segments[1].ax1 = t62.focus.ax1;
            a48.segments[1].ay1 = t62.focus.ay1;
          } else if (s40 < a48.segments.length - 1) {
            a48.segments[s40 - 1].ax2 = t62.focus.ax2;
            a48.segments[s40 - 1].ay2 = t62.focus.ay2;
            a48.segments[s40 + 1].ax1 = t62.focus.ax2;
            a48.segments[s40 + 1].ay1 = t62.focus.ay2;
          } else if (s40 === a48.segments.length - 1) {
            a48.segments[s40 - 1].ax2 = t62.focus.ax2;
            a48.segments[s40 - 1].ay2 = t62.focus.ay2;
          }
          a48.current.connector.geometry.segments.splice(s40, 1);
          d28(a48.currentConnector);
          a48.currentConnector.edited = true;
          a48.repaintConnection();
          a48.fireConnectionEditEvent();
        }
      }.bind(l(a48));
      a48._addDragHandler({ selector: "." + v35, drag: function e79(t62) {
        var s40 = t62.drag.getDragElement()._jsPlumbDragHandle;
        var n91 = t62.pos.x - t62.originalPos.x, i45 = t62.pos.y - t62.originalPos.y;
        s40.focus.ax1 = s40.originalLocation.x + n91;
        s40.focus.ay1 = s40.originalLocation.y + i45;
        if (s40.previous) {
          s40.previous.ax2 = s40.focus.ax1;
          s40.previous.ay2 = s40.focus.ay1;
        }
        d28(a48.currentConnector);
        a48.currentConnector.edited = true;
        a48.repaintConnection();
      }, stop: function e79(t62) {
        a48.fireConnectionEditEvent();
      } });
      return a48;
    }
    n(H12, [{ key: "_activate", value: function e78(t61, s40) {
      this.surface.on(this.surface.getContainer(), l9, a5(p37), this.splitListener);
      this.surface.on(this.surface.getContainer(), l9, a5(y26), this.deleteListener);
      this._update();
    } }, { key: "_clearHandles", value: function e78(t61) {
      for (var s40 = 0; s40 < this.segmentHandles.length; s40++) {
        if (this.segmentHandles[s40].index !== t61) {
          if (this.segmentHandles[s40].splitButton) {
            this.surface.jsplumb._removeElement(this.segmentHandles[s40].splitButton);
          }
          if (this.segmentHandles[s40].deleteButton) {
            this.surface.jsplumb._removeElement(this.segmentHandles[s40].deleteButton);
          }
          if (this.segmentHandles[s40].dragHandle) {
            this.surface.jsplumb._removeElement(this.segmentHandles[s40].dragHandle);
          }
        }
      }
      if (this.guideLine && this.guideLine.parentNode) {
        this.guideLine.parentNode.removeChild(this.guideLine);
      }
    } }, { key: "_elementDragged", value: function e78(t61) {
    } }, { key: "_elementDragging", value: function e78(t61) {
      this._repaint();
    } }, { key: "_repaint", value: function e78(t61) {
      this._update(t61);
      for (var s40 = 0; s40 < this.segmentHandles.length; s40++) {
      }
    } }, { key: "_maybeDrawGuideline", value: function e78() {
      if (this.currentConnector.smooth && this.segments.length > 1) {
        this.guideLine = this.surface.jsplumb.svg.node("svg", { width: 10, height: 10 });
        this.guideLine.style.overflow = "visible";
        this.surface.jsplumb.addClass(this.guideLine, [x20, j20].join(" "));
        var t61 = this.segments[this.segments.length - 1];
        var s40 = "M ".concat(this.segments[0].ax1, ", ").concat(this.segments[0].ay1, " ");
        for (var n91 = 0; n91 < this.segments.length; n91++) {
          s40 += "L ".concat(this.segments[n91].ax2, ", ").concat(this.segments[n91].ay2, " ");
        }
        s40 += "L ".concat(t61.ax2, ", ").concat(t61.ay2);
        var i45 = this.surface.jsplumb.svg.node("path", { d: s40 });
        this.guideLine.appendChild(i45);
        this.surface.jsplumb._appendElement(this.guideLine, this.surface.getContainer());
      }
    } }, { key: "_update", value: function e78(t61) {
      t61 = t61 || {};
      var s40 = t61.segmentInfo;
      this.geometry = this.current.connector.geometry;
      if (this.geometry && this.geometry.segments) {
        this._clearHandles();
        this.segmentHandles.length = 0;
        this.segments.length = 0;
        Array.prototype.push.apply(this.segments, this.geometry.segments);
        for (var n91 = 0; n91 < this.segments.length; n91++) {
          if (s40 == null || n91 !== s40.index) {
            var i45 = this.segments[n91];
            var a48 = { x: (i45.ax1 + i45.ax2) / 2, y: (i45.ay1 + i45.ay2) / 2 };
            var r53 = { x: (i45.ax2 + a48.x) / 2, y: (i45.ay2 + a48.y) / 2 };
            var o42 = a48;
            var g32 = null;
            if (n91 > 0) {
              g32 = q8(this.segments[n91].ax1, this.segments[n91].ay1, this.surface.jsplumb, [Z6, f35, v35].join(" "), true);
            }
            var c48 = q8(o42.x, o42.y, this.surface.jsplumb, [Z6, f35, p37].join(" "), true);
            var d32 = this.segments.length > 1 ? q8(r53.x, r53.y, this.surface.jsplumb, [Z6, f35, y26].join(" "), true) : null;
            var m44 = { focus: i45, previous: n91 >= 0 ? this.segments[n91 - 1] : null, dragHandle: g32, splitButton: c48, deleteButton: d32, index: n91, originalLocation: { x: i45.ax1, y: i45.ay1 }, midPoint: a48 };
            if (g32 != null) {
              g32._jsPlumbDragHandle = m44;
            }
            if (c48 != null) {
              c48._jsPlumbDragHandle = m44;
            }
            if (d32 != null) {
              d32._jsPlumbDragHandle = m44;
            }
            this.segmentHandles.push(m44);
          }
        }
        this._maybeDrawGuideline();
      }
    } }, { key: "deactivate", value: function e78(t61) {
      p(u(H12.prototype), "deactivate", this).call(this, t61);
      this.surface.off(this.surface.getContainer(), l9, this.splitListener);
    } }]);
    return H12;
  }($6);
  o(H8, "type", a37);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/connector-editors-segmented/index.js
  p32.set(H8.type, H8);
  function t52() {
    p32.set(H8.type, H8);
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/connector-bezier/abstract-bezier-connector.js
  function i37(i45, r53, c47) {
    var a48 = c36(i45, r53, c47, [0, 0]);
    var t61 = Object.assign(a48, { showLoopback: c47.showLoopback !== false, curviness: c47.curviness || 10, margin: c47.margin || 5, proximityLimit: c47.proximityLimit || 80, clockwise: c47.orientation && c47.orientation === "clockwise", loopbackRadius: c47.loopbackRadius || 25, isLoopbackCurrently: false });
    return t61;
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/connector-bezier/operations.js
  function l40(o42) {
    if (o42.geometry == null) {
      return null;
    } else {
      return { controlPoints: [u2({}, o42.geometry.controlPoints[0]), u2({}, o42.geometry.controlPoints[1])], source: u2({}, o42.geometry.source), target: u2({}, o42.geometry.target) };
    }
  }
  function y27(r53, o42, e78, t61, n91, c47) {
    var u52 = n91[0] !== c47[0] || n91[1] === c47[1], i45 = { x: 0, y: 0 };
    if (!u52) {
      if (n91[0] === 0) {
        i45.x = e78.curX < t61.curX ? o42.x + r53.minorAnchor : o42.x - r53.minorAnchor;
      } else {
        i45.x = o42.x - r53.majorAnchor * n91[0];
      }
      if (n91[1] === 0) {
        i45.y = e78.curY < t61.curY ? o42.y + r53.minorAnchor : o42.y - r53.minorAnchor;
      } else {
        i45.y = o42.y + r53.majorAnchor * c47[1];
      }
    } else {
      if (c47[0] === 0) {
        i45.x = t61.curX < e78.curX ? o42.x + r53.minorAnchor : o42.x - r53.minorAnchor;
      } else {
        i45.x = o42.x + r53.majorAnchor * c47[0];
      }
      if (c47[1] === 0) {
        i45.y = t61.curY < e78.curY ? o42.y + r53.minorAnchor : o42.y - r53.minorAnchor;
      } else {
        i45.y = o42.y + r53.majorAnchor * n91[1];
      }
    }
    return i45;
  }
  function a39(r53, o42, e78, t61, n91, u52, i45) {
    var l48, a48, m44 = t61.curX < n91.curX ? u52 : 0, f45 = t61.curY < n91.curY ? i45 : 0, x27 = t61.curX < n91.curX ? 0 : u52, g31 = t61.curY < n91.curY ? 0 : i45;
    if (r53.edited !== true) {
      l48 = y27(r53, { x: m44, y: f45 }, t61, n91, o42.so, o42.to);
      a48 = y27(r53, { x: x27, y: g31 }, n91, t61, o42.to, o42.so);
    } else {
      l48 = r53.geometry.controlPoints[0];
      a48 = r53.geometry.controlPoints[1];
    }
    r53.geometry = { controlPoints: [l48, a48], source: e78.sourcePos, target: e78.targetPos };
    g14(r53, p35, { x1: m44, y1: f45, x2: x27, y2: g31, cp1x: l48.x, cp1y: l48.y, cp2x: a48.x, cp2y: a48.y });
  }
  function m35(r53, o42, e78, t61, u52, i45, l48) {
    var y34 = t61.curX < u52.curX ? 0 : i45, a48 = t61.curY < u52.curY ? 0 : l48, m44 = t61.curX < u52.curX ? i45 : 0, x27 = t61.curY < u52.curY ? l48 : 0;
    if (t61.x === 0) {
      y34 -= r53.margin;
    }
    if (t61.x === 1) {
      y34 += r53.margin;
    }
    if (t61.y === 0) {
      a48 -= r53.margin;
    }
    if (t61.y === 1) {
      a48 += r53.margin;
    }
    if (u52.x === 0) {
      m44 -= r53.margin;
    }
    if (u52.x === 1) {
      m44 += r53.margin;
    }
    if (u52.y === 0) {
      x27 -= r53.margin;
    }
    if (u52.y === 1) {
      x27 += r53.margin;
    }
    if (r53.edited !== true) {
      var g31 = (y34 + m44) / 2, P18 = (a48 + x27) / 2, p49 = M6({ x: y34, y: a48 }, { x: m44, y: x27 }), X12 = Math.sqrt(Math.pow(m44 - y34, 2) + Math.pow(x27 - a48, 2));
      r53._controlPoint = f36(g31, P18, p49, e78.sourcePos, e78.targetPos, r53.curviness, r53.curviness, X12, r53.proximityLimit);
    } else {
      r53._controlPoint = r53.geometry.controlPoints[0];
    }
    var Y14, h35, b28, d32;
    Y14 = r53._controlPoint.x;
    h35 = r53._controlPoint.x;
    b28 = r53._controlPoint.y;
    d32 = r53._controlPoint.y;
    r53.geometry = { controlPoints: [r53._controlPoint, r53._controlPoint], source: e78.sourcePos, target: e78.targetPos };
    g14(r53, p35, { x1: m44, y1: x27, x2: y34, y2: a48, cp1x: Y14, cp1y: b28, cp2x: h35, cp2y: d32 });
  }
  function f36(r53, o42, e78, t61, n91, c47, u52, i45, s40) {
    if (i45 <= s40) {
      return { x: r53, y: o42 };
    }
    if (e78 === 1) {
      if (t61.curY <= 0 && n91.curY >= 1) {
        return { x: r53 + (t61.x < 0.5 ? -1 * c47 : c47), y: o42 };
      } else if (t61.curX >= 1 && n91.curX <= 0) {
        return { x: r53, y: o42 + (t61.y < 0.5 ? -1 * u52 : u52) };
      } else {
        return { x: r53 + -1 * c47, y: o42 + -1 * u52 };
      }
    } else if (e78 === 2) {
      if (t61.curY >= 1 && n91.curY <= 0) {
        return { x: r53 + (t61.x < 0.5 ? -1 * c47 : c47), y: o42 };
      } else if (t61.curX >= 1 && n91.curX <= 0) {
        return { x: r53, y: o42 + (t61.y < 0.5 ? -1 * u52 : u52) };
      } else {
        return { x: r53 + c47, y: o42 + -1 * u52 };
      }
    } else if (e78 === 3) {
      if (t61.curY >= 1 && n91.curY <= 0) {
        return { x: r53 + (t61.x < 0.5 ? -1 * c47 : c47), y: o42 };
      } else if (t61.curX <= 0 && n91.curX >= 1) {
        return { x: r53, y: o42 + (t61.y < 0.5 ? -1 * u52 : u52) };
      } else {
        return { x: r53 + -1 * c47, y: o42 + -1 * u52 };
      }
    } else if (e78 === 4) {
      if (t61.curY <= 0 && n91.curY >= 1) {
        return { x: r53 + (t61.x < 0.5 ? -1 * c47 : c47), y: o42 };
      } else if (t61.curX <= 0 && n91.curX >= 1) {
        return { x: r53, y: o42 + (t61.y < 0.5 ? -1 * u52 : u52) };
      } else {
        return { x: r53 + c47, y: o42 + -1 * u52 };
      }
    }
  }
  function x21(r53, o42, e78) {
    var n91 = e78.sourcePos, u52 = e78.targetPos, s40 = Math.abs(n91.curX - u52.curX), l48 = Math.abs(n91.curY - u52.curY);
    if (!r53.showLoopback || e78.sourceEndpoint.elementId !== e78.targetEndpoint.elementId) {
      r53.isLoopbackCurrently = false;
      if (r53.type === a38) {
        a39(r53, o42, e78, n91, u52, s40, l48);
      } else {
        m35(r53, o42, e78, n91, u52, s40, l48);
      }
    } else {
      r53.isLoopbackCurrently = true;
      var y34 = e78.sourcePos.curX, f45 = e78.sourcePos.curY - r53.margin, x27 = y34, g31 = f45 - r53.loopbackRadius, P18 = x27 - r53.loopbackRadius, p49 = g31 - r53.loopbackRadius;
      s40 = 2 * r53.loopbackRadius;
      l48 = 2 * r53.loopbackRadius;
      o42.points[0] = P18;
      o42.points[1] = p49;
      o42.points[2] = s40;
      o42.points[3] = l48;
      g14(r53, l34, { loopback: true, x1: y34 - P18 + 4, y1: f45 - p49, startAngle: 0, endAngle: 2 * Math.PI, r: r53.loopbackRadius, ac: !r53.clockwise, x2: y34 - P18 - 4, y2: f45 - p49, cx: x27 - P18, cy: g31 - p49 });
    }
  }
  function g27(r53, o42, t61) {
    return { controlPoints: [{ x: r53.controlPoints[0].x + o42, y: r53.controlPoints[0].y + t61 }, { x: r53.controlPoints[1].x + o42, y: r53.controlPoints[1].y + t61 }], source: i25(r53.source, o42, t61), target: i25(r53.target, o42, t61) };
  }
  function P12(r53, e78) {
    if (e78 != null) {
      if (e78.controlPoints == null || e78.controlPoints.length != 2) {
        Q("jsPlumb Bezier: cannot import geometry; controlPoints missing or does not have length 2");
        i18.setGeometry(r53, null, true);
        return false;
      }
      if (e78.controlPoints[0].x == null || e78.controlPoints[0].y == null || e78.controlPoints[1].x == null || e78.controlPoints[1].y == null) {
        Q("jsPlumb Bezier: cannot import geometry; controlPoints malformed");
        i18.setGeometry(r53, null, true);
        return false;
      }
      if (e78.source == null || e78.source.curX == null || e78.source.curY == null) {
        Q("jsPlumb Bezier: cannot import geometry; source missing or malformed");
        i18.setGeometry(r53, null, true);
        return false;
      }
      if (e78.target == null || e78.target.curX == null || e78.target.curY == null) {
        Q("jsPlumb Bezier: cannot import geometry; target missing or malformed");
        i18.setGeometry(r53, null, true);
        return false;
      }
      i18.setGeometry(r53, e78, false);
      return true;
    } else {
      return false;
    }
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/connector-bezier/bezier-connector.js
  var a38 = "Bezier";
  function m36(r53, e78) {
    var t61 = i37(a38, r53, e78);
    var n91 = Object.assign(t61, { curviness: e78.curviness || 150, majorAnchor: e78.curviness || 150, minorAnchor: 10 });
    return n91;
  }
  i18.register(a38, { compute: x21, create: m36, setAnchorOrientation: function r44(e78, o42, t61) {
  }, geometryImporter: P12, geometryExporter: l40, transformGeometry: g27 });
  var p38 = function e70() {
    t(this, e70);
  };
  o(p38, "type", a38);
  var u39 = function e71() {
    t(this, e71);
  };
  o(u39, "type", a38);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/ui-core/connector-bezier/statemachine-connector.js
  var a40 = "StateMachine";
  function m37(r53, t61) {
    var e78 = i37(a40, r53, t61);
    var i45 = Object.assign(e78, { curviness: t61.curviness || 10, margin: t61.margin || 5, proximityLimit: t61.proximityLimit || 80, clockwise: t61.orientation && t61.orientation === "clockwise", _controlPoint: { x: 0, y: 0 } });
    return i45;
  }
  i18.register(a40, { compute: x21, create: m37, setAnchorOrientation: function r45(t61, o42, e78) {
  }, geometryImporter: P12, geometryExporter: l40, transformGeometry: g27 });
  var p39 = function t53() {
    t(this, t53);
  };
  o(p39, "type", a40);
  var l41 = function t54() {
    t(this, t54);
  };
  o(l41, "type", a40);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/connector-editors-bezier/bezier-editor.js
  var G11 = "jtk-bezier-handle";
  var E12 = "jtk-bezier-handle-control-point";
  var S16 = "jtk-bezier-handle-control-point-1";
  var O16 = "jtk-bezier-handle-control-point-2";
  var w18 = "jtk-bezier-handle-secondary";
  var T10 = "jtk-bezier-handle-secondary-source";
  var I13 = "jtk-bezier-handle-secondary-target";
  var Q7 = "jtk-bezier-guideline";
  var D13 = "dual";
  var W10 = "single";
  var F15 = function(l48) {
    a(C19, l48);
    var c47 = s(C19);
    function C19(t61, i45) {
      var n91;
      t(this, C19);
      n91 = c47.call(this, t61, i45);
      o(l(n91), "mode", void 0);
      o(l(n91), "center", void 0);
      o(l(n91), "cp", void 0);
      o(l(n91), "cp1", { x: 0, y: 0 });
      o(l(n91), "cp2", { x: 0, y: 0 });
      o(l(n91), "originalCp1", { x: 0, y: 0 });
      o(l(n91), "originalCp2", { x: 0, y: 0 });
      o(l(n91), "origin", void 0);
      o(l(n91), "flipY", void 0);
      o(l(n91), "sp", void 0);
      o(l(n91), "tp", void 0);
      o(l(n91), "sourceMidpoints", void 0);
      o(l(n91), "targetMidpoints", void 0);
      o(l(n91), "sourceFace", void 0);
      o(l(n91), "targetFace", void 0);
      o(l(n91), "sourceCenter", void 0);
      o(l(n91), "targetCenter", void 0);
      o(l(n91), "sourceEdgeSupported", void 0);
      o(l(n91), "targetEdgeSupported", void 0);
      o(l(n91), "noEdits", void 0);
      o(l(n91), "nodeQuadrant", void 0);
      o(l(n91), "h1", void 0);
      o(l(n91), "h2", void 0);
      o(l(n91), "h3", void 0);
      o(l(n91), "h4", void 0);
      o(l(n91), "l1", void 0);
      o(l(n91), "l2", void 0);
      o(l(n91), "lockHandles", void 0);
      o(l(n91), "h1Size", void 0);
      o(l(n91), "h2Size", void 0);
      o(l(n91), "h3Size", void 0);
      o(l(n91), "h4Size", void 0);
      o(l(n91), "geometry", void 0);
      n91.flipY = false;
      n91.noEdits = true;
      n91._addDragHandler({ selector: "." + G11, drag: function t62(i46) {
        if (n91.noEdits) {
          n91._setGeometry();
          n91.noEdits = false;
        }
        var e78 = i46.drag.getDragElement();
        var s40 = e78._jsPlumbControlPoint, o42 = e78._jsPlumbOriginalControlPoint;
        var r53 = i46.pos.x - i46.originalPos.x, a48 = i46.pos.y - i46.originalPos.y;
        i46.pos.x - n91.origin.x;
        i46.pos.y - n91.origin.y;
        if (!n91.lockHandles) {
          s40.x = o42.x + r53;
          s40.y = o42.y + a48;
        } else {
          if (n91.mode === D13) {
            var p49 = o13(n91.center, i46.pos);
            var l49 = m11(n91.center, i46.pos, p49 * 1.5);
            var c48 = Math.min(l49[0].y, l49[1].y), d32 = Math.min(l49[0].x, l49[1].x);
            var g31 = Math.max(l49[0].y, l49[1].y), m44 = Math.max(l49[0].x, l49[1].x);
            l49 = [null, [{ x: m44, y: c48 }, { x: d32, y: g31 }], [{ x: m44, y: g31 }, { x: d32, y: c48 }], [{ x: d32, y: g31 }, { x: m44, y: c48 }], [{ x: d32, y: c48 }, { x: m44, y: g31 }]][n91.nodeQuadrant];
            n91.cp1.x = l49[0].x - n91.origin.x;
            n91.cp1.y = l49[0].y - n91.origin.y;
            n91.cp2.x = l49[1].x - n91.origin.x;
            n91.cp2.y = l49[1].y - n91.origin.y;
            n91.h3.style.left = n91.origin.x + n91.cp1.x + N10;
            n91.h3.style.top = n91.origin.y + n91.cp1.y + N10;
            n91.h4.style.left = n91.origin.x + n91.cp2.x + N10;
            n91.h4.style.top = n91.origin.y + n91.cp2.y + N10;
          } else {
            n91.cp1.x = n91.originalCp1.x + r53;
            n91.cp1.y = n91.originalCp1.y + a48;
            n91.cp2.x = n91.cp1.x;
            n91.cp2.y = n91.cp1.y;
          }
        }
        n91._updateQuadrants();
        n91._setGeometry();
        n91._updateGuidelines();
      }, stop: function t62(i46) {
        n91.originalCp1.x = n91.cp1.x;
        n91.originalCp1.y = n91.cp1.y;
        n91.originalCp2.x = n91.cp2.x;
        n91.originalCp2.y = n91.cp2.y;
        if (!n91.noEdits) {
          var e78 = i46.drag.getDragElement();
          e78._jsPlumbOriginalControlPoint.x = e78._jsPlumbControlPoint.x;
          e78._jsPlumbOriginalControlPoint.y = e78._jsPlumbControlPoint.y;
          n91.fireConnectionEditEvent();
        }
        n91.noEdits = true;
      } });
      return n91;
    }
    n(C19, [{ key: "getPosition", value: function t61(i45) {
      return h8(i45, this.jsplumb);
    } }, { key: "getSize", value: function t61(i45) {
      return c7(i45, this.jsplumb.currentZoom);
    } }, { key: "_updateOrigin", value: function t61() {
      this.sp = this.getPosition(this.current.endpoints[0].endpoint.canvas);
      this.tp = this.getPosition(this.current.endpoints[1].endpoint.canvas);
      this.origin = { x: Math.min(this.sp.x, this.tp.x), y: Math.min(this.sp.y, this.tp.y) };
      this.center = { x: (this.sp.x + this.tp.x) / 2, y: (this.sp.y + this.tp.y) / 2 };
      this.nodeQuadrant = M6({ x: this.sp.x, y: this.sp.y }, { x: this.tp.x, y: this.tp.y });
    } }, { key: "_updateConnectorInfo", value: function t61() {
      this._updateOrigin();
      this.geometry = l40(this.currentConnector);
      if (this.geometry && this.geometry.controlPoints) {
        this.cp = this.geometry.controlPoints;
        this.cp1.x = this.geometry.controlPoints[0].x;
        this.cp1.y = this.geometry.controlPoints[0].y;
        this.cp2.x = this.geometry.controlPoints[1].x;
        this.cp2.y = this.geometry.controlPoints[1].y;
        this.originalCp1 = Object.assign({}, this.cp1);
        this.originalCp2 = Object.assign({}, this.cp2);
      }
    } }, { key: "_updateQuadrants", value: function t61() {
      var i45 = { x: this.origin.x + this.cp2.x, y: this.origin.y + this.cp2.y }, e78 = { x: this.origin.x + this.cp1.x, y: this.origin.y + this.cp1.y };
      this.sourceMidpoints.sort(function(t62, e79) {
        return o13(t62, i45) < o13(e79, i45) ? -1 : 1;
      });
      this.sourceFace = this.sourceMidpoints[0][2];
      this.targetMidpoints.sort(function(t62, i46) {
        return o13(t62, e78) < o13(i46, e78) ? -1 : 1;
      });
      this.targetFace = this.targetMidpoints[0][2];
    } }, { key: "_updateHandlePositions", value: function t61() {
      if (this.mode === D13) {
        this.h1.style.left = this.origin.x + (this.cp1.x + this.cp2.x) / 2 + N10;
        this.h1.style.top = this.origin.y + (this.cp1.y + this.cp2.y) / 2 + N10;
        this.h3.style.left = this.origin.x + this.cp1.x + N10;
        this.h3.style.top = this.origin.y + this.cp1.y + N10;
        this.h4.style.left = this.origin.x + this.cp2.x + N10;
        this.h4.style.top = this.origin.y + this.cp2.y + N10;
      } else {
        this.h1.style.left = this.origin.x + this.cp1.x + N10;
        this.h1.style.top = this.origin.y + this.cp1.y + N10;
        var i45 = this.lockHandles ? this.cp1 : this.cp2;
        this.h2.style.left = this.origin.x + i45.x + N10;
        this.h2.style.top = this.origin.y + i45.y + N10;
      }
      this._updateQuadrants();
    } }, { key: "_setGeometry", value: function t61() {
      var i45 = { controlPoints: [this.cp1, this.cp2], source: u2({}, this.geometry.source), target: u2({}, this.geometry.target) };
      i18.setGeometry(this.current.connector, i45, false);
      this.jsplumb.revalidate(this.current.endpoints[0].element);
      if (this.current.endpoints[0].elementId !== this.current.endpoints[1].elementId) {
        this.jsplumb.revalidate(this.current.endpoints[1].element);
      }
    } }, { key: "_updateGuidelines", value: function t61() {
      this._updateGuideline(this.h1, this.tp, this.l1, this.origin.x + this.cp1.x, this.origin.y + this.cp1.y);
      var i45 = this.lockHandles ? this.cp1 : this.cp2;
      this._updateGuideline(this.lockHandles ? this.h1 : this.h2, this.sp, this.l2, this.origin.x + i45.x, this.origin.y + i45.y);
    } }, { key: "_makeGuideline", value: function t61(i45, e78, s40, o42) {
      var n91 = Math.abs(s40 - e78.x), h35 = Math.abs(o42 - e78.y), r53 = this.surface.jsplumb.svg.node("svg", { width: n91, height: h35 }), a48 = this.surface.jsplumb.svg.node("path", { d: "M 0 0 L " + n91 + " " + h35 });
      r53.appendChild(a48);
      this.surface.jsplumb.addClass(r53, Q7);
      this.surface.jsplumb.addClass(r53, j20);
      this._updateGuideline(i45, e78, r53, s40, o42);
      return r53;
    } }, { key: "_updateGuideline", value: function t61(i45, e78, s40, o42, n91) {
      o42 = o42 + i45.offsetWidth / 2;
      n91 = n91 + i45.offsetHeight / 2;
      var r53 = Math.max(5, Math.abs(o42 - e78.x)), a48 = Math.max(5, Math.abs(n91 - e78.y));
      this.surface.jsplumb.svg.attr(s40, { width: r53, height: a48 });
      s40.style.left = Math.min(e78.x, o42) + N10;
      s40.style.top = Math.min(e78.y, n91) + N10;
      var p49 = "M " + (o42 > e78.x ? r53 : "0") + " " + (n91 > e78.y ? a48 : "0") + " L " + (o42 > e78.x ? "0" : r53) + " " + (n91 > e78.y ? "0" : a48);
      this.surface.jsplumb.svg.attr(s40.childNodes[0], { d: p49 });
    } }, { key: "_activate", value: function t61(i45, e78) {
      this.cp1 = { x: 0, y: 0 };
      this.cp2 = { x: 0, y: 0 };
      this.cp = [this.cp1, this.cp2];
      e78 = e78 || {};
      this.mode = e78.mode || W10;
      this._updateConnectorInfo();
      this.h1 = G9(this.sp.x + this.cp[0].x, this.sp.y + this.cp[0].y, [Z6, G11, E12, S16].join(" "));
      this.h2 = G9(this.sp.x + this.cp[1].x, this.sp.y + this.cp[1].y, [Z6, G11, E12, O16].join(" "));
      this.h1._jsPlumbControlPoint = this.cp1;
      this.h2._jsPlumbControlPoint = this.cp2;
      this.h1._jsPlumbOriginalControlPoint = Object.assign({}, this.cp1);
      this.h2._jsPlumbOriginalControlPoint = Object.assign({}, this.cp2);
      this.h3 = G9(this.origin.x + this.cp[0].x, this.origin.y + this.cp[0].y, [Z6, w18, T10].join(" "));
      this.h4 = G9(this.origin.x + this.cp[0].x, this.origin.y + this.cp[0].y, [Z6, w18, I13].join(" "));
      if (this.mode === D13) {
        this.h3.style.display = o7;
        this.h4.style.display = o7;
        this.jsplumb._appendElementToContainer(this.h3);
        this.jsplumb._appendElementToContainer(this.h4);
        this.flipY = this.tp.y < this.sp.y;
      }
      this.jsplumb._appendElementToContainer(this.h1);
      this.jsplumb._appendElementToContainer(this.h2);
      this.h1Size = { w: this.h1.offsetWidth, h: this.h1.offsetHeight };
      this.h1.style.display = o7;
      if (!this.lockHandles) {
        this.h2.style.display = o7;
        this.h2Size = { w: this.h2.offsetWidth, h: this.h2.offsetHeight };
      }
      if (this.mode === D13) {
        this.h3.style.display = o7;
        this.h4.style.display = o7;
        this.h3Size = { w: this.h3.offsetWidth, h: this.h3.offsetHeight };
        this.h4Size = { w: this.h4.offsetWidth, h: this.h4.offsetHeight };
      }
      this.l1 = this._makeGuideline(this.h1, this.tp, this.origin.x + this.cp[0].x, this.origin.y + this.cp[0].y);
      this.l2 = this._makeGuideline(this.lockHandles ? this.h1 : this.h2, this.sp, this.origin.x + this.cp[1].x, this.origin.y + this.cp[1].y);
      this.jsplumb._appendElementToContainer(this.l1);
      this.jsplumb._appendElementToContainer(this.l2);
      var s40 = this.getSize(this.current.source), o42 = this.getPosition(this.current.source), n91 = this.getSize(this.current.target), h35 = this.getPosition(this.current.target);
      this.sourceCenter = { x: o42.x + s40.w / 2, y: o42.y + s40.h / 2 };
      this.targetCenter = { x: h35.x + n91.w / 2, y: h35.y + n91.h / 2 };
      this.sourceMidpoints = [[o42.x, this.sourceCenter.y, n16], [this.sourceCenter.x, o42.y, o20], [o42.x + s40.w, this.sourceCenter.y, i17], [this.sourceCenter.x, o42.y + s40.h, e46]];
      this.targetMidpoints = [[h35.x, this.targetCenter.y, n16], [this.targetCenter.x, h35.y, o20], [h35.x + n91.w, this.targetCenter.y, i17], [this.targetCenter.x, h35.y + n91.h, e46]];
      this._updateHandlePositions();
      var l49 = e78.guidelines !== false;
      this.l1.style.display = l49 ? o7 : v5;
      this.l2.style.display = l49 ? o7 : v5;
      this.sp = this.getPosition(this.current.endpoints[0].endpoint.canvas);
      this.tp = this.getPosition(this.current.endpoints[1].endpoint.canvas);
      this._updateGuidelines();
      B8.addClass(this.current, T9);
      this._setGeometry();
    } }, { key: "_elementDragged", value: function t61(i45) {
      this._updateOrigin();
      this._updateHandlePositions();
      this._updateGuidelines();
    } }, { key: "_elementDragging", value: function t61(i45) {
      this.sp = this.getPosition(this.current.endpoints[0].endpoint.canvas);
      this.tp = this.getPosition(this.current.endpoints[1].endpoint.canvas);
      this._updateGuidelines();
      this._repaint();
    } }, { key: "_clearHandles", value: function t61() {
      (function(t62) {
        for (var i45 = 0; i45 < t62.length; i45++) {
          if (t62[i45] != null && t62[i45].parentNode) {
            t62[i45].parentNode.removeChild(t62[i45]);
          }
        }
      })([this.h1, this.h2, this.h3, this.h4, this.l1, this.l2]);
    } }, { key: "_repaint", value: function t61(i45) {
      this._update();
    } }, { key: "_update", value: function t61() {
      this._updateOrigin();
      this._updateConnectorInfo();
      this._updateHandlePositions();
      this._updateGuidelines();
    } }, { key: "exportGeometry", value: function t61() {
      if (this.geometry == null) {
        return null;
      } else {
        return { controlPoints: [u2({}, this.geometry.controlPoints[0]), u2({}, this.geometry.controlPoints[1])], source: u2({}, this.geometry.source), target: u2({}, this.geometry.target) };
      }
    } }]);
    return C19;
  }($6);
  o(F15, "type", a38);
  var N11 = function(s40) {
    a(n91, s40);
    var o42 = s(n91);
    function n91(t61, i45) {
      var s41;
      t(this, n91);
      s41 = o42.call(this, t61, i45);
      s41.lockHandles = true;
      return s41;
    }
    return n91;
  }(F15);
  o(N11, "type", a40);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/connector-editors-bezier/index.js
  p32.set(F15.type, F15);
  p32.set(N11.type, N11);
  function o34() {
    p32.set(F15.type, F15);
    p32.set(N11.type, N11);
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui/group-sizer.js
  function i38(i45, a48, r53, v41, d32, h35, t61, l48, n91, m44) {
    var o42, e78;
    v41.x + d32;
    v41.y + h35;
    m44 = m44 || a48.minSize;
    var f45 = a48.maxSize;
    var x27 = a48.padding || 0;
    var u52 = ((o42 = m44) === null || o42 === void 0 ? void 0 : o42.w) || 0;
    var g31 = ((e78 = m44) === null || e78 === void 0 ? void 0 : e78.h) || 0;
    var M20 = 0;
    var w23 = 0;
    if (i45.xmin < x27 && l48) {
      M20 = x27 - i45.xmin;
    }
    if (i45.ymin < x27 && l48) {
      w23 = x27 - i45.ymin;
    }
    var y34 = i45.xmax + M20 + x27;
    var c47 = i45.ymax + w23 + x27;
    var s40 = Math.min((f45 === null || f45 === void 0 ? void 0 : f45.w) || y34, y34);
    var S20 = Math.min((f45 === null || f45 === void 0 ? void 0 : f45.h) || c47, c47);
    s40 = Math.max(u52, s40);
    S20 = Math.max(g31, S20);
    if (r53 === true) {
      if (i45.xmin > x27 && t61) {
        var p49;
        var z16 = i45.xmin - x27;
        var G17 = s40 - z16;
        s40 = Math.max(((p49 = m44) === null || p49 === void 0 ? void 0 : p49.w) || G17, G17);
        if (s40 > G17) {
          z16 -= s40 - G17;
        }
        M20 = -z16;
      }
      if (i45.ymin > x27 && t61) {
        var T18;
        var X12 = i45.ymin - x27;
        var Y14 = S20 - X12;
        S20 = Math.max(((T18 = m44) === null || T18 === void 0 ? void 0 : T18.h) || Y14, Y14);
        if (S20 > Y14) {
          X12 -= S20 - Y14;
        }
        w23 = -X12;
      }
    } else {
      if (a48.elastic)
        ;
    }
    if (n91.grid && n91.fitGroupsToGrid !== false) {
      var b28 = s40 / n91.grid.w;
      s40 = n91.grid.w * Math.ceil(b28);
      var j26 = S20 / n91.grid.h;
      S20 = n91.grid.h * Math.ceil(j26);
      var k20 = M20 / n91.grid.w;
      M20 = n91.grid.w * Math.ceil(k20);
      var q12 = w23 / n91.grid.h;
      w23 = n91.grid.h * Math.ceil(q12);
    }
    return { width: s40, height: S20, layoutShiftX: M20, layoutShiftY: w23 };
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui/elastic-group-manager.js
  var l42 = "jtk-surface-elastic-group-resize";
  var y28 = function() {
    function y34(t61, u52, n91, a48, p49) {
      var f45 = this;
      t(this, y34);
      this.surface = t61;
      this.focusVertex = u52;
      this.group = n91;
      this.groupDef = a48;
      this.allowShrinkFromOrigin = p49;
      o(this, "groupEntry", void 0);
      o(this, "focusPosition", void 0);
      o(this, "siblingEntries", []);
      o(this, "xMinEntries", []);
      o(this, "xMaxEntries", []);
      o(this, "yMinEntries", []);
      o(this, "yMaxEntries", []);
      o(this, "uiGroup", void 0);
      o(this, "frame", void 0);
      o(this, "layout", void 0);
      o(this, "uiGroupContentArea", void 0);
      o(this, "alwaysShowFrame", void 0);
      o(this, "_initialExtents", void 0);
      o(this, "layoutShiftX", 0);
      o(this, "layoutShiftY", 0);
      o(this, "width", 0);
      o(this, "height", 0);
      o(this, "minSize", void 0);
      o(this, "x", 0);
      o(this, "y", 0);
      o(this, "parent", void 0);
      this.uiGroup = t61.jsplumb.getGroup(n91.id);
      this.uiGroupContentArea = this.uiGroup.contentArea;
      this.frame = D3(v6);
      this.layout = t61._$_layoutMap.get(n91.id);
      t61.jsplumb._appendElement(this.frame, this.uiGroupContentArea);
      this.alwaysShowFrame = true;
      h5(this.frame, l42);
      if (this.surface._useModelForSizes) {
        this.minSize = { w: n91.data[this.surface._modelWidthAttribute], h: n91.data[this.surface._modelHeightAttribute] };
      }
      this.groupEntry = t61.jsplumb.viewport._elementMap.get(n91.id);
      var g31 = Object.assign({}, t61.jsplumb.viewport._elementMap.get(u52.id));
      this.width = this.groupEntry.w;
      this.height = this.groupEntry.h;
      this.focusPosition = W(g31, this.groupEntry, -1);
      var c47 = n91.members.filter(function(t62) {
        return t62.id !== u52.id;
      });
      c47.forEach(function(i45) {
        var s40 = t61.jsplumb.viewport._elementMap.get(i45.id);
        var h35 = W(s40, f45.groupEntry, -1);
        f45.siblingEntries.push(s40);
        f45.xMinEntries.push(h35);
        f45.xMaxEntries.push(h35);
        f45.yMinEntries.push(h35);
        f45.yMaxEntries.push(h35);
      });
      this._sortEntries();
      this._initialExtents = this.getCurrentExtents();
      if (n91.group) {
        var m44 = this.surface.jsplumb.getGroup(n91.group.id);
        if (m44.elastic) {
          this.parent = new y34(t61, n91, n91.group, m44, p49);
        }
      }
      this._$_recompute();
    }
    n(y34, [{ key: "_sortEntries", value: function t61() {
      this.xMinEntries.sort(function(t62, i45) {
        return t62.x < i45.x ? -1 : 1;
      });
      this.yMinEntries.sort(function(t62, i45) {
        return t62.y < i45.y ? -1 : 1;
      });
      this.xMaxEntries.sort(function(t62, i45) {
        return t62.x + t62.w > i45.x + i45.w ? -1 : 1;
      });
      this.yMaxEntries.sort(function(t62, i45) {
        return t62.y + t62.h > i45.y + i45.h ? -1 : 1;
      });
    } }, { key: "setFocusPosition", value: function t61(i45, s40, r53, h35) {
      var e78 = (r53 === null || r53 === void 0 ? void 0 : r53.w) || this.focusPosition.w;
      var o42 = (r53 === null || r53 === void 0 ? void 0 : r53.h) || this.focusPosition.h;
      var u52 = { x: i45.x - (h35 ? this.groupEntry.x : 0), y: i45.y - (h35 ? this.groupEntry.y : 0) };
      this.focusPosition.x = u52.x;
      this.focusPosition.y = u52.y;
      this.focusPosition.w = e78;
      this.focusPosition.h = o42;
      this._$_recompute(s40);
    } }, { key: "_$_recompute", value: function t61(i45) {
      var s40 = !this.allowShrinkFromOrigin && (i45 == null ? false : i45.metaKey || i45.ctrlKey);
      var r53 = this.getCurrentExtents();
      var h35 = i38(r53, this.groupDef, this.allowShrinkFromOrigin, { x: this.groupEntry.x, y: this.groupEntry.y }, this.groupEntry.w, this.groupEntry.h, true, true, this.surface._$_gridProfile, s40 ? null : this.minSize);
      this.width = h35.width;
      this.height = h35.height;
      this.layoutShiftX = h35.layoutShiftX;
      this.layoutShiftY = h35.layoutShiftY;
      s7(this.frame, this.width, this.height);
      i7(this.frame, { x: -this.layoutShiftX, y: -this.layoutShiftY });
      this.parent && this.parent.setFocusPosition({ x: this.groupEntry.x - this.layoutShiftX, y: this.groupEntry.y - this.layoutShiftY }, i45, { w: this.width, h: this.height }, true);
      if (!this.alwaysShowFrame) {
        var e78 = this.width !== this.groupEntry.w || this.height !== this.groupEntry.h || this.layoutShiftX !== 0 || this.layoutShiftY !== 0;
        this.frame.style.visibility = e78 ? "visible" : "hidden";
      }
    } }, { key: "getCurrentExtents", value: function t61() {
      var i45 = this.xMaxEntries[0] || { x: -Infinity, w: 0 };
      var s40 = this.yMaxEntries[0] || { y: -Infinity, h: 0 };
      return { xmin: Math.min(this.focusPosition.x, (this.xMinEntries[0] || { x: Infinity }).x), ymin: Math.min(this.focusPosition.y, (this.yMinEntries[0] || { y: Infinity }).y), xmax: Math.max(this.focusPosition.x + this.focusPosition.w, i45.x + i45.w), ymax: Math.max(this.focusPosition.y + this.focusPosition.h, s40.y + s40.h) };
    } }, { key: "cleanup", value: function t61() {
      this.frame.parentNode.removeChild(this.frame);
      this.parent && this.parent.cleanup();
    } }, { key: "getValues", value: function t61(i45) {
      if (i45 == this.group.id) {
        return { layoutShiftX: this.layoutShiftX, layoutShiftY: this.layoutShiftY, width: this.width, height: this.height };
      } else {
        return this.parent ? this.parent.getValues(i45) : null;
      }
    } }, { key: "persist", value: function t61(i45, s40) {
      var r53 = this;
      i45 = i45 || {};
      s40 = s40 || {};
      var h35 = function t62(s41, r54, h36) {
        i45[s41] = i45[s41] || { original: r54, current: h36 };
        i45[s41].current = h36;
      };
      var e78 = this.surface.getLayoutFor(this.group);
      var o42 = { x: this.groupEntry.x - this.layoutShiftX, y: this.groupEntry.y - this.layoutShiftY };
      var u52 = Object.assign({}, o42);
      if (this.group.group) {
        var n91 = this.surface.jsplumb.viewport._elementMap.get(this.group.group.id);
        u52.x -= n91.x;
        u52.y -= n91.y;
      }
      if (this.layoutShiftX !== 0 || this.layoutShiftY !== 0) {
        this.layout.getPositions().forEach(function(t62, i46) {
          var s41 = { x: t62.x + r53.layoutShiftX, y: t62.y + r53.layoutShiftY };
          r53.layout.setPosition(i46, s41.x, s41.y, true);
          r53.surface.jsplumb.viewport.updateElement(i46, s41.x + o42.x, s41.y + o42.y, null, null, null);
          h35(i46, t62, s41);
        });
        this.layout._$_calculateExtents();
        h35(this.group.id, { x: this.groupEntry.x, y: this.groupEntry.y }, u52);
      }
      if (this.width !== this.groupEntry.w || this.height !== this.groupEntry.h) {
        s40[this.group.id] = { group: this.group, originalGroupSize: { w: this.groupEntry.w, h: this.groupEntry.h }, newGroupSize: { w: this.width, h: this.height } };
      }
      this.surface.jsplumb.viewport.updateElement(this.group.id, o42.x, o42.y, this.width, this.height, null);
      e78.setPosition(this.group.id, u52.x, u52.y, true);
      if (this.parent) {
        this.parent.persist(i45, s40);
      }
      return { movedElements: i45, resizedGroups: s40 };
    } }]);
    return y34;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui/surface.js
  var Ao = "pan";
  var Do = "select";
  var Co = "disabled";
  var Fo = "vertexDrawing";
  var Oo = "left";
  var Zo = "top";
  var $o = "selected-vertices";
  var Lo = ["color", "lineWidth", "outlineWidth", "outlineColor"];
  function Vo(e78) {
    return e78.endpoints[0].element._jtkVisible !== false && e78.endpoints[1].element._jtkVisible !== false;
  }
  function No(e78, t61, n91) {
    if (t61.connections.length === 1) {
      m17.setVisible(t61, n91, true);
    } else {
      if (n91) {
        m17.setVisible(t61, true, true);
      } else {
        for (var o42 = 0; o42 < t61.connections.length; o42++) {
          if (t61.connections[o42] !== e78 && t61.connections[o42].visible) {
            return;
          }
        }
        m17.setVisible(t61, false, true);
      }
    }
  }
  function Bo(e78) {
    var t61 = e78.value(B9);
    var n91 = e78.value(G7);
    var o42 = e78.value(S12);
    var i45 = e78.value(R8);
    var r53 = e78.value(w14);
    var a48 = e78.value(C14);
    var s40 = e78.value(z9);
    var l48 = e78.value(D10);
    var u52 = e78.value(H5);
    var d32 = e78.value(I10);
    var p49 = e78.value(J4);
    var c47 = p2({ portId: t61, portType: n91, source: d32, target: p49, edgeType: u52 });
    if (o42 != null && i45 != null) {
      c47.anchor = [parseFloat(o42), parseFloat(i45), parseInt(s40 || "0", 10), parseInt(l48 || "0", 10), parseFloat(r53 || "0"), parseFloat(a48 || "0")];
    }
    return c47;
  }
  function Ho(e78) {
    return e78.nodeType != null && e78.nodeType !== 3 && e78.nodeType !== 8;
  }
  var Wo = function(x27) {
    a(I17, x27);
    var P18 = s(I17);
    function I17(t61, n91) {
      var r53;
      var a48;
      t(this, I17);
      a48 = P18.call(this);
      a48.templateRenderer = n91;
      o(l(a48), "_debug", void 0);
      o(l(a48), "_$_magnetizeProfile", void 0);
      o(l(a48), "_$_gridProfile", void 0);
      o(l(a48), "_$_layoutMap", /* @__PURE__ */ new Map());
      o(l(a48), "dataSource", void 0);
      o(l(a48), "toolkitInstance", void 0);
      o(l(a48), "_layout", void 0);
      o(l(a48), "_addToDragSelectionOnSelect", void 0);
      o(l(a48), "_edgePathEditor", void 0);
      o(l(a48), "container", void 0);
      o(l(a48), "containerElement", void 0);
      o(l(a48), "canvasElement", void 0);
      o(l(a48), "logicalPorts", void 0);
      o(l(a48), "_$_storePositionsInModel", void 0);
      o(l(a48), "_$_storeGroupSizesInModel", false);
      o(l(a48), "decorators", void 0);
      o(l(a48), "vertexList", []);
      o(l(a48), "connMap", {});
      o(l(a48), "_unrenderedEdges", []);
      o(l(a48), "nodeRenderer", void 0);
      o(l(a48), "portRenderer", void 0);
      o(l(a48), "groupRenderer", void 0);
      o(l(a48), "_$_dataLoading", false);
      o(l(a48), "_$_suspendRendering", void 0);
      o(l(a48), "_refreshAutomatically", void 0);
      o(l(a48), "_$_propertyMapper", void 0);
      o(l(a48), "_$_shapeLibrary", void 0);
      o(l(a48), "_unrenderedVertices", /* @__PURE__ */ new Map());
      o(l(a48), "objectFilter", void 0);
      o(l(a48), "_modelTopAttribute", void 0);
      o(l(a48), "_modelLeftAttribute", void 0);
      o(l(a48), "_modelWidthAttribute", void 0);
      o(l(a48), "_modelHeightAttribute", void 0);
      o(l(a48), "elementsDraggable", void 0);
      o(l(a48), "enhancedView", void 0);
      o(l(a48), "_ignoreToolkitEvents", false);
      o(l(a48), "view", void 0);
      o(l(a48), "dragOptions", void 0);
      o(l(a48), "refreshLayoutOnEdgeConnect", void 0);
      o(l(a48), "jsplumb", void 0);
      o(l(a48), "_useModelForSizes", void 0);
      o(l(a48), "_currentElasticGroup", void 0);
      o(l(a48), "id", void 0);
      o(l(a48), "panZoom", void 0);
      o(l(a48), "contentBounds", null);
      o(l(a48), "plugins", void 0);
      o(l(a48), "pluginMap", /* @__PURE__ */ new Map());
      o(l(a48), "wheelReverse", void 0);
      o(l(a48), "_$_simpleEdgeStyles", void 0);
      o(l(a48), "directRender", void 0);
      o(l(a48), "_directRenderResizeObserver", void 0);
      o(l(a48), "_autoPanObserver", void 0);
      o(l(a48), "zoomToFitOnLoad", void 0);
      o(l(a48), "mode", Ao);
      o(l(a48), "autoExitSelectMode", true);
      o(l(a48), "_boundToolkitEvents", []);
      o(l(a48), "_shapeDefsSvgElement", null);
      a48.refreshLayoutOnEdgeConnect = t61.refreshLayoutOnEdgeConnect === true;
      a48.directRender = t61.directRender === true;
      a48.elementsDraggable = a48.directRender !== true && !(t61.elementsDraggable === false);
      var s40 = m2(t61.defaults || {}, { managedElementsSelector: n3(f7, B9), useSvgContainer: t61.useSvgContainer, elementsDraggable: a48.elementsDraggable });
      var l48 = { getCompoundZoom: function e78() {
        return a48.panZoom.getCompoundZoom();
      }, container: t61.container, beforeDetach: function e78(t62, n92) {
        return a48.beforeDetach(t62, n92);
      }, beforeDrag: function e78(t62) {
        return a48.beforeDrag(t62);
      }, beforeStartDetach: function e78(t62) {
        return a48.beforeStartDetach(t62);
      }, beforeDrop: function e78(t62) {
        return a48.beforeDrop(t62);
      }, connectionEstablished: function e78(t62) {
        return a48._connectionEstablished(t62);
      }, onElementDragInit: function e78(t62) {
        var n92 = a48.getModelObjectFromElement(t62, true);
        if (n92 != null && y10(n92)) {
          if (a48.mode === Fo) {
            return false;
          }
        }
        return null;
      } };
      a48.logicalPorts = t61.logicalPorts === true;
      a48.jsplumb = new bt(t61.toolkitInstance, l48, s40);
      a48.decorators = n13(t61.decorators, l(a48), t61.container);
      a48._debug = t61.debug === true;
      a48._addToDragSelectionOnSelect = t61.addToDragSelectionOnSelect === true;
      a48.container = t61.container;
      a48.dataSource = t61.dataSource;
      a48.toolkitInstance = t61.toolkitInstance;
      a48.containerElement = a48.container;
      a48._$_simpleEdgeStyles = t61.simpleEdgeStyles !== false;
      if (t61.editablePaths) {
        new m31(l(a48));
      }
      a48.dragOptions = t61.dragOptions || {};
      if (a48.dragOptions.autoPan !== false && typeof IntersectionObserver !== "undefined") {
        a48._autoPanObserver = new IntersectionObserver(function(e78, t62) {
          e78.forEach(function(e79) {
            if (!e79.isIntersecting) {
              var t63 = e79.boundingClientRect.y < e79.rootBounds.y ? 1 : e79.boundingClientRect.y + e79.boundingClientRect.height > e79.rootBounds.y + e79.rootBounds.height ? -1 : 0;
              var n92 = e79.boundingClientRect.x < e79.rootBounds.x ? 1 : e79.boundingClientRect.x + e79.boundingClientRect.width > e79.rootBounds.x + e79.rootBounds.width ? -1 : 0;
              a48.panZoom.startPanRepeat(n92, t63, a48.dragOptions.autoPanDelta || 5, a48.dragOptions.autoPanDelta || 5, a48.dragOptions.autoPanRepeat || 15, function(e80) {
                a48.jsplumb.dragManager.canvasPanned({ x: e80.x / a48.panZoom.zoom, y: e80.y / a48.panZoom.zoom });
              });
            } else {
              a48.panZoom.stopPanRepeat();
            }
          });
        }, { root: a48.container, rootMargin: "0px", threshold: 0.99 });
      }
      a48._$_suspendRendering = false;
      a48._refreshAutomatically = t61.refreshAutomatically !== false;
      a48.enhancedView = t61.enhancedView !== false;
      a48._useModelForSizes = t61.useModelForSizes === true;
      a48._modelLeftAttribute = t61.modelLeftAttribute || a48.toolkitInstance.modelLeftAttribute || n16;
      a48._modelTopAttribute = t61.modelTopAttribute || a48.toolkitInstance.modelTopAttribute || o20;
      a48._modelWidthAttribute = t61.modelWidthAttribute || a48.toolkitInstance.modelWidthAttribute || N7;
      a48._modelHeightAttribute = t61.modelHeightAttribute || a48.toolkitInstance.modelHeightAttribute || o20;
      a48._$_storePositionsInModel = t61.storePositionsInModel !== false;
      a48.objectFilter = t61.objectFilter || function(e78) {
        return true;
      };
      a48._$_gridProfile = new r29(t61.grid);
      a48._$_magnetizeProfile = new e59(t61.magnetize, a48._$_gridProfile);
      a48._layout = n66.get(s31.type, { adapter: new s19(l(a48)), toolkit: a48.toolkitInstance, container: t61.container, options: {} });
      a48._$_storePositionsInModel = t61.storePositionsInModel !== false;
      if (t61.shapes != null) {
        if (t61.shapes.library == null) {
          Q('Render option "shapes" passed to Surface but no "library" is present. Shape library is not enabled.');
        } else {
          a48._$_shapeLibrary = t61.shapes.library;
          var u52 = a48._$_shapeLibrary.getShapeTagDefinition(t61.shapes.strokeWidth || 2, t61.shapes.showLabels, t61.shapes.labelAttribute);
          a48.registerTag(t61.shapes.tagName || l32, u52);
          a48._setupShapeDefs();
        }
      }
      if (t61.events) {
        for (var p49 in t61.events) {
          a48.bind(p49, t61.events[p49]);
        }
      }
      a48.setView(t61.view);
      if (t61.propertyMappings != null) {
        a48._$_propertyMapper = new r31(l(a48), t61.propertyMappings);
      }
      a48._bindToolkitEvents();
      a48.nodeRenderer = a48.createRenderer("node", a48.dataSource.getNodeId.bind(a48.dataSource), a48.dataSource.getNodeType.bind(a48.dataSource));
      a48.portRenderer = a48.createRenderer("port", a48.dataSource.getPortId.bind(a48.dataSource), a48.dataSource.getPortType.bind(a48.dataSource));
      a48.groupRenderer = a48.createRenderer("group", a48.dataSource.getNodeId.bind(a48.dataSource), a48.dataSource.getNodeType.bind(a48.dataSource));
      a48.id = t61.id || $();
      var f45 = { position: Pa.relative, width: Pa.nominalSize, height: Pa.nominalSize, left: 0, top: 0, clazz: ea };
      if (t61.useSvgContainer) {
        f45.type = v6;
        f45.ns = M3;
      }
      a48.canvasElement = a48._createElement(f45, a48.containerElement);
      a48.jsplumb.setContainer(a48.canvasElement);
      a48._setSelectors();
      a48._bindToJsPlumb();
      if (a48.dragOptions.filter != null) {
        a48.jsplumb.addDragFilter(a48.dragOptions.filter, true);
      }
      if (a48.dragOptions.constrainFunction != null) {
        a48.jsplumb.setDragConstrainFunction(a48.dragOptions.constrainFunction);
      }
      if (a48._$_gridProfile.grid != null) {
        a48.jsplumb.setDragGrid(a48._$_gridProfile.grid);
      }
      a48.wheelReverse = t61.wheel && t61.wheel.reverse === true;
      h5(a48.containerElement, $4);
      if (L4()) {
        h5(a48.containerElement, aa);
      }
      if (M5()) {
        h5(a48.containerElement, ta);
      }
      if (a48.directRender) {
        a48._configureDirectRender();
      }
      if (t61.enablePan === false) {
        h5(a48.containerElement, ra);
      }
      var g31 = function e78(t62, n92, o42) {
        var r54 = function e79(t63) {
          var r55 = t63.srcElement || t63.target;
          if (r55 === a48.containerElement || r55 === a48.canvasElement || a48.panZoom.background.owns(r55)) {
            var s41 = t63.button === 2 && o42 != null ? o42 : n92;
            a48.fire(s41, l(a48), t63);
          }
        };
        a48.jsplumb.on(a48.containerElement, t62, r54);
      };
      g31(l9, r27, o11);
      g31(a9, e58);
      a48.zoomToFitOnLoad = t61.zoomToFit === true;
      a48.panZoom = new L5({ viewport: a48.jsplumb.viewport, viewportElement: a48.containerElement, canvasElement: a48.canvasElement, getOffset: function e78(t62) {
        return a48.jsplumb.getOffset(t62);
      }, getOffsetRelativeToRoot: function e78(t62) {
        return S3(t62);
      }, getSize: function e78(t62) {
        return a48.jsplumb.getSize(t62);
      }, consumeRightClick: t61.consumeRightClick, idFunction: function e78(t62) {
        return a48.jsplumb.getId(t62);
      }, directRender: a48.directRender, enablePan: !a48.directRender && t61.enablePan !== false, wheel: a48._getWheelOptions(t61), enableAnimation: t61.enableAnimation, clamp: t61.clamp, clampToBackground: t61.clampToBackground, clampToBackgroundExtents: t61.clampToBackgroundExtents, panFilter: t61.panFilter, panWithMetaKey: t61.panWithMetaKey, events: (r53 = {}, o(r53, p23, function(e78, t62, n92, o42, i45) {
        a48.fire(p23, { x: e78, y: t62, zoom: n92, oldZoom: o42, event: i45 });
      }), o(r53, x10, function(e78, t62, n92, o42, i45) {
        a48.jsplumb.setZoom(n92);
        a48.fire(x10, { x: e78, y: t62, zoom: n92, oldZoom: o42, event: i45 });
      }), o(r53, t4, function() {
        h5(a48.containerElement, ja);
        h5(document.body, Oa);
      }), o(r53, u11, function() {
        y3(a48.containerElement, ja);
        y3(document.body, Oa);
      }), r53), zoom: t61.zoom, zoomRange: t61.zoomRange });
      a48.autoExitSelectMode = t61.autoExitSelectMode !== false;
      var h35 = t61.plugins || [];
      a48.plugins = [];
      j2(h35, function(e78) {
        a48._addPlugin(e78, true);
      });
      a48.bind(j13, function() {
        a48.relayoutPanZoom();
      });
      a48.bind(y11, function(e78) {
        a48.panZoom.remove(e78.el);
        a48.relayoutPanZoom();
      });
      a48.bind(u16, function(e78) {
        a48.panZoom.remove(e78.el);
        if (e78.childrenRemoved === false) {
          for (var t62 = 0; t62 < e78.children.length; t62++) {
            var n92 = a48.jsplumb.getManagedElement(e78.children[t62].id);
            if (n92) {
              a48.panZoom.restore(n92);
            }
          }
        }
        a48.relayoutPanZoom();
      });
      a48.jsplumb.bind(x5, function(e78) {
        if (a48.elementsDraggable && !a48.panZoom.isPinchZooming() && a48.mode !== Co) {
          a48.toolkitInstance.openTransaction(e78.dragGroup && e78.dragGroupMemberSpec ? Z3 : null);
          a48.contentBounds = a48.panZoom.getBoundsInfo();
          if (a48.dragOptions.addHelperClasses !== false) {
            h5(a48.containerElement, ca);
            j2(a48.containerElement.querySelectorAll("." + La), function(e79) {
              y3(e79, La);
            });
          }
          var t62 = a48.getModelObjectFromElement(e78.el);
          if (t62.group) {
            var n92 = a48.getGroupDefinition(t62.group);
            if (n92.elastic && e78.e.shiftKey !== true) {
              var o42 = n92.allowShrinkFromOrigin === true;
              var r54 = e78.e.ctrlKey === true || e78.e.metaKey === true;
              if (r54) {
                o42 = !o42;
              }
              a48._currentElasticGroup = new y28(l(a48), t62, t62.group, n92, o42);
              a48._sizeElasticGroupFrame(e78.e);
            }
          }
          a48.fire(G6, { domEl: e78.el, pos: y6(e78.el), elementId: a48.jsplumb.getId(e78.el), originalPosition: e78.originalPosition, vertex: t62 });
          a48._autoPanObserver && a48._autoPanObserver.observe(e78.el);
          return { vertex: t62 };
        } else {
          return false;
        }
      });
      a48.jsplumb.bind(g8, function(e78) {
        var t62 = e78.el;
        var n92 = t62.jtk;
        var o42 = (n92 === null || n92 === void 0 ? void 0 : n92.node) || (n92 === null || n92 === void 0 ? void 0 : n92.group) || e78.payload.vertex;
        var r54 = { el: t62, vertex: o42, pos: e78.pos, e: e78.e, type: o42.objectType, originalPosition: e78.originalPosition, renderer: l(a48) };
        if (a48._$_magnetizeProfile.constant && !v12(r54.vertex) && !k7(r54.vertex)) {
          a48._setMagnetizedPosition(r54.vertex.id, r54.pos.x, r54.pos.y, true, a48._layout);
        }
        if (a48._currentElasticGroup != null && a48._currentElasticGroup.focusVertex.id === o42.id) {
          a48._sizeElasticGroupFrame(e78.e, e78.pos);
        }
        a48.fire(H4, r54);
      });
      a48.jsplumb.bind(k4, function(e78) {
        a48.panZoom.stopPanRepeat();
        try {
          var t62 = [];
          var n92 = {};
          var o42 = /* @__PURE__ */ new Map();
          if (a48.dragOptions.addHelperClasses !== false) {
            y3(a48.containerElement, ca);
            j2(a48.containerElement.querySelectorAll("." + La), function(e79) {
              y3(e79, La);
            });
          }
          j2(e78.elements, function(r55) {
            a48._autoPanObserver && a48._autoPanObserver.unobserve(r55.el);
            if (a48.dragOptions.addHelperClasses !== false) {
              h5(r55.el, La);
            }
            var s41 = r55.el;
            var l49 = a48.getModelObjectFromElement(r55.el);
            if (l49 != null && (f14(l49) || y10(l49))) {
              var u53 = { el: s41, vertex: l49, pos: r55.pos, e: e78.e, type: l49.objectType, originalPosition: r55.originalPos, renderer: l(a48) };
              var d32 = v12(u53.vertex) || k7(u53.vertex);
              r55.redrawResult.c.forEach(function(e79) {
                var t63 = e79.edge;
                if (t63 != null && t63.geometry != null) {
                  a48.dataSource.setEdgeGeometry(t63, i18.exportGeometry(e79.connector), l(a48));
                }
              });
              var p50 = d32 ? a48._$_layoutMap.get(u53.vertex.group.id) : a48._layout;
              var c47 = p50.getPosition(u53.vertex.id);
              u53.originalPosition = { x: c47.x, y: c47.y };
              if (r55.dropGroup == null) {
                if (a48._$_magnetizeProfile.afterDrag && !d32) {
                  t62.push({ id: u53.vertex.id, x: u53.pos.x, y: u53.pos.y });
                } else {
                  n92[u53.vertex.id] = { id: u53.vertex.id, x: u53.pos.x, y: u53.pos.y, layout: p50 };
                  if (d32) {
                    var f46 = u53.vertex.group;
                    var g32 = a48.view.getGroupDefinition(a48.dataSource.getNodeType(f46.data));
                    if (!(a48._useModelForSizes && g32.elastic)) {
                      o42.set(f46.id, [f46, g32]);
                    }
                  }
                }
              }
            }
          });
          for (var r54 in n92) {
            a48._setDirectPosition(r54, n92[r54].x, n92[r54].y, false, n92[r54].layout);
          }
          o42.forEach(function(e79) {
            var t63 = a48._autoSizeAGroup(e79[0], e79[1], null, null, false), n93 = t63.movedElements, o43 = t63.resizedGroups, i45 = t63.layout;
            a48._updateMovedElements(n93);
            a48._trackGroupSizeChanges(o43);
          });
          a48._setMagnetizedPositions(t62, !a48._$_magnetizeProfile.repositionDraggedElement, a48._layout);
          if (a48._currentElasticGroup && a48._useModelForSizes) {
            a48._persistElasticGroup(a48._currentElasticGroup);
          }
        } catch (e79) {
          Q("Could not process dragged vertex", e79);
        } finally {
          a48._currentElasticGroup && a48._currentElasticGroup.cleanup();
          a48._currentElasticGroup = null;
          a48.toolkitInstance.commitTransaction(true);
        }
      });
      var m44 = t61.layout || { type: s32.type };
      a48.setLayout(m44, true);
      if (t61.modelEvents) {
        t61.modelEvents.forEach(function(e78) {
          a48.bindModelEvent(e78.event, e78.selector, function(t62, n92, o42) {
            setTimeout(function() {
              return e78.callback(t62, n92, o42);
            }, 0);
          });
        });
      }
      a48._loadStartFn();
      var y34 = a48._loadExistingData(t61);
      a48._loadEndFn(!y34);
      return a48;
    }
    n(I17, [{ key: "_attachEdgePathEditor", value: function e78(t61) {
      this._edgePathEditor = t61;
      r38();
      t52();
      o34();
    } }, { key: "getShapeLibrary", value: function e78() {
      return this._$_shapeLibrary;
    } }, { key: "_persistElasticGroup", value: function e78(t61) {
      var n91 = t61.persist(), o42 = n91.movedElements, i45 = n91.resizedGroups;
      this._updateMovedElements(o42);
      this._trackGroupSizeChanges(i45, true);
    } }, { key: "getNodes", value: function e78() {
      return this.vertexList.filter(f14);
    } }, { key: "getGroups", value: function e78() {
      return this.vertexList.filter(y10);
    } }, { key: "setView", value: function e78(t61) {
      this.view = new k9(this.toolkitInstance, this.dataSource.getModel(), t61, this.jsplumb);
    } }, { key: "isSuspendRendering", value: function e78() {
      return this._$_suspendRendering;
    } }, { key: "isDataLoading", value: function e78() {
      return this._$_dataLoading;
    } }, { key: "_sizeElasticGroupFrame", value: function e78(t61, n91) {
      if (this._currentElasticGroup != null) {
        if (n91 != null) {
          this._currentElasticGroup.setFocusPosition(n91, t61);
        }
      }
    } }, { key: "addPlugin", value: function e78(t61) {
      return this._addPlugin(t61, true);
    } }, { key: "_addPlugin", value: function e78(t61, n91) {
      var o42 = l2(t61) ? t61 : t61.type;
      var i45 = l2(t61) ? {} : t61.options || {};
      i45.viewport = this.jsplumb.viewport;
      var r53 = qo.get(o42);
      if (r53 != null) {
        r53.initialise(this, i45);
        this.plugins.push(r53);
        this.pluginMap.set(o42, r53);
        if (n91) {
          this.fire(y17, r53);
        }
        return r53;
      }
    } }, { key: "getPlugin", value: function e78(t61) {
      return this.pluginMap.get(t61);
    } }, { key: "setHoverSuspended", value: function e78(t61) {
      this.jsplumb.hoverSuspended = t61;
    } }, { key: "setMode", value: function t61(n91, o42) {
      var i45 = this, r53;
      var a48 = (r53 = {}, o(r53, Ao, function() {
        i45.panZoom.setEnabled(true);
      }), o(r53, Do, function() {
        i45.jsplumb.clearDragSelection();
        i45.panZoom.setEnabled(false);
      }), o(r53, Co, function() {
        i45.jsplumb.clearDragSelection();
        i45.panZoom.setEnabled(false);
      }), o(r53, Fo, function() {
        i45.panZoom.setEnabled(false);
      }), r53);
      if (a48[n91]) {
        this.mode = n91;
        a48[n91]();
        if (n91 === Pa.select && !o42) {
          this.toolkitInstance.clearSelection();
        }
        this.fire(m23, n91);
      } else {
        throw new TypeError("Surface: unknown mode '" + n91 + "'");
      }
    } }, { key: "selectEdges", value: function e78(t61) {
      return this._selectEdges(t61, "getEdges");
    } }, { key: "selectAllEdges", value: function e78(t61) {
      return this._selectEdges(t61, "getAllEdges");
    } }, { key: "getOffset", value: function e78(t61) {
      return this.jsplumb.getOffset(t61);
    } }, { key: "setPosition", value: function e78(t61, n91, o42, i45, r53) {
      var a48 = this;
      this.toolkitInstance.openTransaction(Z3);
      try {
        var s40 = this._setPosition({ vertex: t61, x: n91, y: o42, doRevalidate: true, doNotRunGroupResize: r53 }), l48 = s40.movedElements, u52 = s40.resizedGroups;
        if (this._$_gridProfile.snap) {
          u2(l48, this.snapToGrid(t61));
        }
        var d32 = this.getObjectInfo(t61);
        if (d32.obj) {
          var p49 = l48[d32.id];
          this._fireNodeMovedEvent(t61, p49.current.x, p49.current.y, p49.original.x, p49.original.y);
          if (i45) {
            setTimeout(function() {
              return a48.jsplumb.revalidate(d32.el);
            }, 0);
          }
        }
      } catch (e79) {
        Q("Exception thrown when setting position", e79);
      } finally {
        this.toolkitInstance.commitTransaction();
      }
    } }, { key: "addClass", value: function e78(t61, n91) {
      var o42 = this;
      if (t61.constructor === N8) {
        t61.eachVertex(function(e79, t62) {
          return o42.addClass(t62, n91);
        });
        t61.eachEdge(function(e79, t62) {
          return o42.addClass(t62, n91);
        });
      } else {
        this._classOperation(t61, n91, h5);
      }
    } }, { key: "removeClass", value: function e78(t61, n91) {
      var o42 = this;
      if (t61.constructor === N8) {
        t61.eachVertex(function(e79, t62) {
          return o42.removeClass(t62, n91);
        });
        t61.eachEdge(function(e79, t62) {
          return o42.removeClass(t62, n91);
        });
      } else {
        this._classOperation(t61, n91, y3);
      }
    } }, { key: "toggleClass", value: function e78(t61, n91) {
      var o42 = this;
      if (t61.constructor === N8) {
        t61.eachVertex(function(e79, t62) {
          return o42.toggleClass(t62, n91);
        });
        t61.eachEdge(function(e79, t62) {
          return o42.toggleClass(t62, n91);
        });
      } else {
        this._classOperation(t61, n91, L2);
      }
    } }, { key: "hasClass", value: function e78(t61, n91) {
      if (t61 != null) {
        var o42 = this.getObjectInfo(t61);
        if (o42.el) {
          return g4(o42.el, n91);
        } else {
          if (Ho(t61)) {
            return g4(t61, n91);
          } else {
            return false;
          }
        }
      }
    } }, { key: "on", value: function e78(t61, n91, o42, i45) {
      this.jsplumb.on(t61, n91, o42, i45);
    } }, { key: "off", value: function e78(t61, n91, o42) {
      var i45 = o42.__tkWrapper || o42;
      this.jsplumb.off(t61, n91, i45);
    } }, { key: "bindModelEvent", value: function e78(t61, n91, o42) {
      var i45 = this;
      var r53 = function e79(t62, n92) {
        var r54 = i45.getObjectInfo(n92);
        if (r54.obj != null) {
          o42(t62, n92, r54);
        }
      };
      o42.__tkWrapper = r53;
      this.jsplumb.on(this.canvasElement, t61, n91, r53);
    } }, { key: "unbindModelEvent", value: function e78(t61, n91) {
      if (n91.__tkWrapper != null) {
        this.jsplumb.off(this.canvasElement, t61, n91.__tkWrapper);
      }
    } }, { key: "setDraggable", value: function e78(t61, n91) {
      var o42 = this.getObjectInfo(t61);
      if (o42.obj) {
        this.jsplumb.setDraggable(o42.el, n91);
      }
    } }, { key: "getCoordinates", value: function e78(t61, n91) {
      var o42 = this.getObjectInfo(t61);
      if (o42.obj) {
        var i45 = this.jsplumb.getSize(o42.el);
        var r53 = v12(o42.obj) || k7(o42.obj) ? o42.obj.group : null;
        var a48 = r53 != null ? this._$_layoutMap.get(r53.id) : this._layout;
        var s40 = a48.getPosition(o42.id), l48 = { x: s40.x, y: s40.y };
        if (n91 && r53 != null) {
          var u52 = this.getRenderedElement(r53), d32 = this.jsplumb.getOffset(u52), p49 = u52.querySelector(g18);
          l48.x += d32.x;
          l48.y += d32.y;
          if (p49 != null) {
            var c47 = p49.getBoundingClientRect(), f45 = u52.getBoundingClientRect();
            l48.x += c47.left - f45.left;
            l48.y += c47.top - f45.top;
          }
        }
        return { x: l48.x, y: l48.y, w: i45.w, h: i45.h };
      } else {
        return { x: 0, y: 0, w: 0, h: 0 };
      }
    } }, { key: "snapToGrid", value: function e78(t61, n91) {
      n91 = n91 || this._$_gridProfile.grid;
      var o42;
      if (n91) {
        if (t61 != null) {
          var i45 = this.getObjectInfo(t61);
          if (i45.obj) {
            o42 = i45.obj.id;
          }
        }
        var r53 = this._layout.snapToGrid(n91, o42);
        this._updateMovedElements(r53);
        return r53;
      }
    } }, { key: "fixElement", value: function e78(t61, n91, o42, i45) {
      return this.panZoom.fixElement(t61, n91, o42, i45);
    } }, { key: "unfixElement", value: function e78(t61) {
      this.panZoom.unfixElement(t61);
    } }, { key: "appendElement", value: function e78(t61, n91, o42) {
      var i45 = n91.x, r53 = n91.y, a48 = null;
      this._append(t61, true);
      if (o42 && o42.alignX && o42.alignX === o4.right) {
        a48 = n5(t61, this.getZoom());
        i45 -= a48.w;
      }
      if (o42 && o42.alignY && o42.alignY === u4.bottom) {
        a48 = a48 || n5(t61, this.getZoom());
        r53 -= a48.h;
      }
      i7(t61, { x: i45, y: r53 });
    } }, { key: "floatElement", value: function e78(t61, n91) {
      this.panZoom.floatElement(t61, n91);
    } }, { key: "zoomToFit", value: function e78(t61) {
      this.panZoom.zoomToFit(t61);
    } }, { key: "zoomToFitIfNecessary", value: function e78(t61) {
      this.panZoom.zoomToFitIfNecessary(t61);
    } }, { key: "zoomToElements", value: function e78(t61) {
      this.panZoom.zoomToElements(t61);
    } }, { key: "zoomToBackground", value: function e78(t61) {
      this.panZoom.zoomToBackground(t61);
    } }, { key: "zoomToDecorator", value: function e78(t61) {
      var n91 = l2(t61.decorator) ? this.getDecorator(t61.decorator) : t61.decorator;
      if (n91 != null) {
        var o42 = this.getBoundsInfo();
        var i45 = n91.getBounds();
        this.panZoom.zoomToExtents(Object.assign(t61, { extents: [o42, i45] }));
      }
    } }, { key: "zoomToExtents", value: function e78(t61) {
      this.panZoom.zoomToExtents(t61);
    } }, { key: "alignContent", value: function e78(t61) {
      this.panZoom.alignContent(t61);
    } }, { key: "alignContentTop", value: function e78(t61) {
      this.panZoom.alignContentTop(t61);
    } }, { key: "alignContentBottom", value: function e78(t61) {
      this.panZoom.alignContentBottom(t61);
    } }, { key: "alignContentLeft", value: function e78(t61) {
      this.panZoom.alignContentLeft(t61);
    } }, { key: "alignContentRight", value: function e78(t61) {
      this.panZoom.alignContentRight(t61);
    } }, { key: "mapEventLocation", value: function e78(t61) {
      return this.panZoom.mapEventLocation(t61);
    } }, { key: "getLayoutFor", value: function e78(t61) {
      return v12(t61) || k7(t61) ? this._$_layoutMap.get(t61.group.id) : this._layout;
    } }, { key: "centerContent", value: function e78(t61) {
      this.panZoom.centerContent(t61);
    } }, { key: "zoomToSelection", value: function e78(t61) {
      var n91 = this;
      t61 = t61 || {};
      var o42 = function e79() {
        if (t61.filter) {
          return n91.toolkitInstance.filter(t61.filter);
        } else {
          return n91.toolkitInstance.getSelection();
        }
      };
      var i45 = t61.selection || o42(), r53 = [];
      i45.eachNode(function(e79, t62) {
        r53.push(n91.getRenderedElement(t62.id));
      });
      i45.eachGroup(function(e79, t62) {
        r53.push(n91.getRenderedElement(t62.id));
      });
      if (r53.length > 0) {
        this.panZoom.zoomToElements({ elements: r53, fill: t61.fill, doNotZoomIfVisible: t61.doNotZoomIfVisible, doNotAnimate: t61.doNotAnimate });
      }
    } }, { key: "getPath", value: function e78(t61) {
      return new a29(this.toolkitInstance.getPath(t61), this);
    } }, { key: "setGrid", value: function e78(t61) {
      this._$_gridProfile.grid = t61;
      this.jsplumb.setDragGrid(t61);
    } }, { key: "getGrid", value: function e78() {
      return this._$_gridProfile.grid;
    } }, { key: "getDragConstrainFunction", value: function e78() {
      return this.dragOptions.constrainFunction;
    } }, { key: "getApparentCanvasLocation", value: function e78() {
      return this.panZoom.getApparentCanvasLocation();
    } }, { key: "setApparentCanvasLocation", value: function e78(t61, n91) {
      return this.panZoom.setApparentCanvasLocation(t61, n91);
    } }, { key: "getBoundsInfo", value: function e78() {
      return this.panZoom.getBoundsInfo();
    } }, { key: "setZoom", value: function e78(t61, n91) {
      return this.panZoom.setZoom(t61, n91);
    } }, { key: "setZoomRange", value: function e78(t61, n91) {
      return this.panZoom.setZoomRange(t61, n91);
    } }, { key: "getZoomRange", value: function e78() {
      return this.panZoom.getZoomRange();
    } }, { key: "getZoom", value: function e78() {
      return this.panZoom.getZoom();
    } }, { key: "nudgeZoom", value: function e78(t61, n91) {
      return this.panZoom.nudgeZoom(t61, n91);
    } }, { key: "nudgeWheelZoom", value: function e78(t61, n91) {
      this.panZoom.nudgeWheelZoom(t61, n91);
    } }, { key: "getPan", value: function e78() {
      return this.panZoom.getPan();
    } }, { key: "pan", value: function e78(t61, n91, o42) {
      this.panZoom.pan(t61, n91, !o42);
    } }, { key: "setPan", value: function e78(t61, n91, o42, i45) {
      this.panZoom.setPan(t61, n91, o42, i45);
    } }, { key: "setPanAndZoom", value: function e78(t61, n91, o42, i45) {
      this.setPan(t61, n91, i45);
      this.setZoom(o42, i45);
    } }, { key: "centerOnAndZoom", value: function e78(t61, n91, o42) {
      var i45 = this.getObjectInfo(t61);
      if (i45.el != null) {
        this.panZoom.centerOnAndZoom({ bounds: this.jsplumb.viewport._elementMap.get(i45.id), fillRatio: n91, doNotAnimate: o42 });
      }
    } }, { key: "centerOn", value: function e78(t61) {
      var n91 = this.getObjectInfo(t61);
      if (n91.el != null) {
        this.panZoom.centerOn({ bounds: this.jsplumb.viewport._elementMap.get(n91.id) });
      }
    } }, { key: "centerOnHorizontally", value: function e78(t61) {
      var n91 = this.getObjectInfo(t61);
      if (n91.el != null) {
        this.panZoom.centerOnHorizontally({ bounds: this.jsplumb.viewport._elementMap.get(n91.id) });
      }
    } }, { key: "centerOnVertically", value: function e78(t61) {
      var n91 = this.getObjectInfo(t61);
      if (n91.el != null) {
        this.panZoom.centerOnVertically({ bounds: this.jsplumb.viewport._elementMap.get(n91.id) });
      }
    } }, { key: "setClamping", value: function e78(t61) {
      this.panZoom.setClamping(t61);
    } }, { key: "isClamping", value: function e78() {
      return this.panZoom.isClamping();
    } }, { key: "getContainer", value: function e78() {
      return this.jsplumb.getContainer();
    } }, { key: "isInViewport", value: function e78(t61, n91) {
      return this.panZoom.isInViewport(t61, n91);
    } }, { key: "fromPageLocation", value: function e78(t61, n91) {
      return this.panZoom.fromPageLocation(t61, n91);
    } }, { key: "toPageLocation", value: function e78(t61, n91) {
      return this.panZoom.toPageLocation(t61, n91);
    } }, { key: "findIntersectingVertices", value: function e78(t61, n91, o42, i45, r53, a48, s40) {
      var l48 = this;
      if (r53 === true && i45 === true && a48 === true) {
        return [];
      }
      var u52 = this.panZoom.findIntersectingElements(t61, n91, o42, function(e79, t62, n92) {
        var o43 = l48.toolkitInstance.getVertex(n92);
        if (o43 != null) {
          var u53 = f14(o43), d32 = u53 && v12(o43), p49 = y10(o43), c47 = p49 && k7(o43), f45 = r53 === true && u53, g31 = i45 === true && p49, v41 = a48 && d32, h35 = s40 && c47;
          return !(f45 || g31 || v41 || h35);
        } else {
          return false;
        }
      });
      return u52.map(function(e79) {
        return { enclosed: o42, id: e79.id, r: e79.r, v: l48.toolkitInstance.getVertex(e79.id), el: l48.getRenderedElement(e79.id) };
      });
    } }, { key: "findAllIntersectingVerticesInCanvas", value: function e78(t61, n91, o42) {
      var i45 = this;
      var r53 = this.panZoom.findIntersectingElements(t61, n91, o42, null, true);
      return r53.map(function(e79) {
        return { enclosed: o42, id: e79.id, r: e79.r, v: i45.toolkitInstance.getVertex(e79.id), el: i45.getRenderedElement(e79.id) };
      });
    } }, { key: "findIntersectingNodes", value: function e78(t61, n91, o42, i45) {
      return this.findIntersectingVertices(t61, n91, o42, true, false, i45, true);
    } }, { key: "findIntersectingGroups", value: function e78(t61, n91, o42, i45) {
      return this.findIntersectingVertices(t61, n91, o42, true, false, true, true);
    } }, { key: "positionElementAt", value: function e78(t61, n91, o42, i45, r53, a48) {
      this.panZoom.positionElementAt(t61, n91, o42, i45, r53, a48);
    } }, { key: "positionElementAtEventLocation", value: function e78(t61, n91, o42, i45) {
      this.panZoom.positionElementAtEventLocation(t61, n91, o42, i45);
    } }, { key: "positionElementAtPageLocation", value: function e78(t61, n91, o42, i45, r53) {
      this.panZoom.positionElementAtPageLocation(t61, n91, o42, i45, r53);
    } }, { key: "repaintEverything", value: function e78() {
      this.jsplumb.repaintEverything();
    } }, { key: "reload", value: function e78() {
      if (this.dataSource instanceof N8) {
        this.dataSource.reload();
      } else {
        Q("JSPLUMB: Surface not rendering a selection, `reload` has no effect.");
      }
    } }, { key: "destroy", value: function e78() {
      if (this._edgePathEditor != null) {
        this._edgePathEditor.destroy();
      }
      if (this._directRenderResizeObserver) {
        this._directRenderResizeObserver.disconnect();
      }
      if (this._autoPanObserver) {
        this._autoPanObserver.disconnect();
      }
      if (this._shapeDefsSvgElement != null && this._shapeDefsSvgElement.parentNode != null) {
        this._shapeDefsSvgElement.parentNode.removeChild(this._shapeDefsSvgElement);
      }
      var t61;
      for (var n91 = 0; n91 < this._boundToolkitEvents.length; n91++) {
        try {
          t61 = this._boundToolkitEvents[n91];
          this.dataSource.unbind(t61.event, t61.fn);
        } catch (e79) {
          Q("WARN: Could not unbind event " + t61.event + " during destroy operation.");
        }
      }
      this.canvasElement.parentNode.removeChild(this.canvasElement);
      y3(this.containerElement, $4);
      y3(this.containerElement, _9);
      y3(this.containerElement, ra);
      j2(this.plugins, function(e79) {
        e79.destroy();
      });
      this.panZoom.destroy();
      this.panZoom = null;
      this.fire(t6, this);
    } }, { key: "batch", value: function e78(t61) {
      this.setSuspendEvents(true);
      this.dataSource.batch(t61);
      this.setSuspendEvents(false);
    } }, { key: "rotate", value: function e78(t61, n91) {
      var o42 = this;
      var i45 = this.getObjectInfo(t61);
      if (i45.el) {
        i45.obj.data.rotation = n91;
        var r53 = this.jsplumb.rotate(i45.el, n91);
        r53.c.forEach(function(e79) {
          var t62 = e79.edge, n92 = e79.connector;
          if (n92.geometry) {
            o42.toolkitInstance.setEdgeGeometry(t62, i18.exportGeometry(n92), o42);
          }
        });
        this.fire(l19, { obj: i45.obj, rotation: n91 });
      }
    } }, { key: "setMagnetizedPosition", value: function e78(t61, n91, o42, i45) {
      this.toolkitInstance.openTransaction(Z3);
      var r53 = this._setPosition({ info: null, vertex: t61, x: n91, y: o42, doNotUpdateElement: i45, magnetize: true, doRevalidate: true });
      this.toolkitInstance.commitTransaction();
      return r53;
    } }, { key: "storePositionInModel", value: function e78(t61) {
      var n91 = typeof t61 === "string" ? t61 : t61.id;
      var o42 = typeof t61 === "string" ? null : t61.pos;
      var i45 = typeof t61 === "string" ? Oo : t61.leftAttribute || Oo, r53 = typeof t61 === "string" ? Zo : t61.topAttribute || Zo, a48 = t61.obj || this.dataSource.getVertex(n91);
      if (a48 && (this._$_storePositionsInModel || t61.force)) {
        var s40 = v12(a48) || k7(a48) ? this._$_layoutMap.get(a48.group.id) : this._layout;
        o42 = o42 || s40.getPosition(n91);
        r2(a48.data, i45, o42.x);
        r2(a48.data, r53, o42.y);
      }
      return o42;
    } }, { key: "storePositionsInModel", value: function e78(t61) {
      var n91 = this;
      t61 = t61 || {};
      var o42 = t61.leftAttribute || Pa.left, i45 = t61.topAttribute || Pa.top;
      var r53 = this._layout.getPositions();
      r53.forEach(function(e79, t62) {
        var r54 = n91.toolkitInstance.getNode(t62) || n91.toolkitInstance.getGroup(t62);
        if (r54) {
          r2(r54.data, o42, e79.x);
          r2(r54.data, i45, e79.y);
        }
      });
      this.toolkitInstance.eachGroup(function(e79, t62) {
        var r54 = t62.getMembers(), a48 = n91._$_layoutMap.get(t62.id).getPositions();
        for (e79 = 0; e79 < r54.length; e79++) {
          r2(r54[e79].data, o42, a48.get(r54[e79].id).x);
          r2(r54[e79].data, i45, a48.get(r54[e79].id).y);
        }
      });
    } }, { key: "magnetize", value: function e78(t61) {
      this._doMagnetize(t61, null, null, false);
    } }, { key: "magnetizeAtPoint", value: function e78(t61) {
      this._doMagnetize(null, t61, null, false);
    } }, { key: "magnetizeAtEvent", value: function e78(t61) {
      this._doMagnetize(null, null, t61, false);
    } }, { key: "gather", value: function e78(t61) {
      this._doMagnetize(t61, null, null, true);
    } }, { key: "setVisible", value: function e78(t61, n91, o42) {
      var i45 = this;
      if (t61 == null)
        return;
      var r53 = function e79(t62) {
        switch (t62.type) {
          case S8.objectType:
            i45._toggleEdge(t62.obj, n91, o42);
            break;
          case j8.objectType:
          case V6.objectType:
            i45._toggleNode(t62.obj, t62.el, n91, o42);
            break;
          case x8.objectType:
            i45._togglePort(t62.obj, n91);
            break;
        }
      };
      this._applyFunctionToObject(t61, r53);
    } }, { key: "setOverlaysVisible", value: function e78(t61, n91) {
      var o42 = this;
      for (var i45 = arguments.length, r53 = new Array(i45 > 2 ? i45 - 2 : 0), a48 = 2; a48 < i45; a48++) {
        r53[a48 - 2] = arguments[a48];
      }
      if (t61 == null) {
        return;
      }
      var s40 = [];
      if (l30(t61)) {
        t61.eachEdge(function(e79, t62) {
          s40.push(o42.getRenderedConnection(t62.id));
        });
      } else if (m5(t61)) {
        for (var l48 = 0; l48 < t61.length; l48++) {
          if (m13(t61[l48])) {
            s40.push(this.getRenderedConnection(t61[l48].id));
          }
        }
      } else if (m13(t61)) {
        s40.push(this.getRenderedConnection(t61.id));
      }
      j2(s40, function(e79) {
        if (n91) {
          j12.apply(void 0, [e79].concat(r53));
        } else {
          E7.apply(void 0, [e79].concat(r53));
        }
      });
    } }, { key: "getObjectInfo", value: function e78(t61) {
      if (t61 == null) {
        return { id: null, obj: null, el: null, type: null };
      } else if (_5(t61)) {
        var n91 = t61.edge;
        return { obj: n91, id: n91.id, type: S8.objectType, el: t61.connector.canvas };
      } else {
        if (Ho(t61)) {
          var o42 = this.getModelObjectFromElement(t61, true);
          if (o42 != null) {
            return { el: this.getRenderedElement(o42.getFullId()), id: o42.getFullId(), type: o42.objectType, obj: o42 };
          } else {
            return { id: null, obj: null, el: null, type: null };
          }
        } else {
          var i45 = this.toolkitInstance.getObjectInfo(t61);
          if (i45.obj != null) {
            if (i45.type === S8.objectType) {
              return u2({ el: this.getRenderedConnection(i45.id).connector.canvas }, i45);
            } else {
              return u2({ el: this.getRenderedElement(i45.obj) }, i45);
            }
          } else {
            return u2({ el: null }, i45);
          }
        }
      }
    } }, { key: "refresh", value: function e78(t61) {
      var n91 = this;
      if (!this._$_suspendRendering && (!t61 || this._refreshAutomatically)) {
        this._layout.layout(function(e79) {
          n91.updateVertexPositions(e79.positions, e79.sizes);
          n91.fire(a30, { bounds: n91.getBoundsInfo(), positions: e79.positions, sizes: n91._layout.getSizes() });
          if (n91.directRender) {
            n91.relayoutPanZoom();
          }
          n91.jsplumb.repaintEverything();
        }, this._$_magnetizeProfile.afterLayout);
      }
    } }, { key: "_decorate", value: function e78(t61, n91) {
      var o42 = this;
      t61.decorate({ surface: this, adapter: this._layout.adapter, layout: this._layout, setAbsolutePosition: function e79(t62, n92) {
        return i7(t62, n92);
      }, toolkit: this.toolkitInstance, bounds: n91.bounds, positions: n91.positions, fixElement: function e79(n92, i45, r53, a48) {
        var s40 = Array.from(t61.fixedElements).find(function(e80) {
          return e80.el === n92;
        });
        if (s40 == null) {
          s40 = o42.fixElement(n92, i45, r53, a48);
          t61.fixedElements.add(s40);
        }
        return s40;
      }, floatElement: function e79(n92, i45) {
        var r53 = Array.from(t61.floatedElements).find(function(e80) {
          return e80.el === n92;
        });
        if (r53 == null) {
          r53 = { el: n92, pos: i45, constraints: {} };
          o42.floatElement(n92, i45);
          t61.floatedElements.add(r53);
        }
        return r53;
      }, appendElement: function e79(n92, i45, r53) {
        var a48 = Array.from(t61.appendedElements).find(function(e80) {
          return e80.el === n92;
        });
        if (a48 == null) {
          a48 = { el: n92, pos: i45, constraints: r53 };
          o42.appendElement(n92, i45, r53);
          t61.appendedElements.add(a48);
        }
        return a48;
      } });
    } }, { key: "relayout", value: function e78(t61) {
      var n91 = this;
      if (!this._$_suspendRendering) {
        this._layout.relayout(t61, function(e79) {
          n91.updateVertexPositions(e79.positions, e79.sizes);
          n91._relayoutGroups();
          for (var t62 = 0; t62 < n91.decorators.length; t62++) {
            if (!n91.decorators[t62].incremental) {
              n91.decorators[t62].clear();
            }
            n91._decorate(n91.decorators[t62], e79);
          }
          if (n91.directRender) {
            n91.relayoutPanZoom();
          }
          n91.jsplumb.repaintEverything();
          n91.fire(j13, { bounds: n91.getBoundsInfo(), positions: e79.positions, sizes: n91._layout.getSizes() });
        }, this._$_magnetizeProfile.afterLayout);
      }
    } }, { key: "getModelObjectFromElement", value: function e78(t61, n91) {
      var o42 = this;
      var i45 = function e79(t62) {
        var i46;
        var r53 = t62.getAttribute(f7);
        if (r53 != null) {
          var a48 = o42.toolkitInstance.getVertex(r53);
          if (a48 != null) {
            i46 = a48;
          }
        }
        if (i46 == null) {
          var s40 = t62.getAttribute(B9) || t62.getAttribute(U5) || t62.getAttribute(V9);
          if (s40 != null) {
            var l48 = u6(t62, n3(f7), o42.jsplumb.getContainer(), false);
            if (l48 != null) {
              var u52 = l48.getAttribute(f7);
              var d32 = o42.toolkitInstance.getNode(u52) || o42.toolkitInstance.getGroup(u52);
              if (d32) {
                var p49 = t62.getAttribute(G7) || t62.getAttribute(W8) || t62.getAttribute(X6) || r7;
                return d32.addPort({ id: s40, type: p49 });
              }
            }
          }
        }
        if (i46 == null && n91 === true) {
          var c47 = t62.parentElement;
          if (c47 != null && c47 !== o42.jsplumb.getContainer()) {
            return e79(c47);
          } else {
            return null;
          }
        } else {
          return i46;
        }
      };
      return i45(t61);
    } }, { key: "setLayout", value: function e78(t61, n91) {
      if (t61) {
        this._layout = this._createLayout(t61);
        if (!n91) {
          this.refresh();
        }
      }
    } }, { key: "adHocLayout", value: function e78(t61) {
      if (t61) {
        var n91 = this._layout;
        this.jsplumb.select().each(function(e79) {
          P7(e79.connector);
        });
        this.setLayout(t61);
        this._layout = n91;
        this.fire(t28);
      }
    } }, { key: "adHocGroupLayout", value: function e78(t61, n91) {
      if (n91) {
        var o42 = this.toolkitInstance.getObjectInfo(t61);
        if (o42.obj) {
          var i45 = this._$_layoutMap.get(o42.id);
          this._$_layoutMap.set(o42.id, this._createGroupLayout(n91, o42.obj));
          this.relayoutGroup(o42.obj, p17);
          this._$_layoutMap.set(o42.id, i45);
        }
      }
    } }, { key: "getModelPositionAttributes", value: function e78() {
      return [this._modelLeftAttribute, this._modelTopAttribute];
    } }, { key: "getLabelLocationAttribute", value: function e78(t61) {
      var n91 = this.view.getEdgeDefinition(this.dataSource.getEdgeType(t61.data || {}));
      return n91.labelLocationAttribute || M10;
    } }, { key: "setEnabled", value: function e78(t61, n91) {
      var o42 = t61.getFullId();
      var i45 = this.getRenderedEndpoint(o42) || this.getRenderedElement(o42) || this.getRenderedPort(o42);
      if (i45 != null) {
        if (Ho(i45)) {
          if (n91) {
            i45.removeAttribute(s25);
          } else {
            i45.setAttribute(s25, v9);
          }
        } else {
          i45.enabled = n91;
        }
      }
      return n91;
    } }, { key: "getRenderedElement", value: function e78(t61) {
      if (t61 == null) {
        return null;
      }
      var n91 = l2(t61) ? t61 : t61.getFullId();
      var o42 = n91.split(this.toolkitInstance.portSeparator), i45 = this.jsplumb.getManagedElement(o42[0]);
      if (i45 && o42.length > 1) {
        var r53 = i45.querySelector(j9(B9, o42[1])) || i45.querySelector(j9(U5, o42[1])) || i45.querySelector(j9(V9, o42[1]));
        if (r53 == null) {
          if (this.logicalPorts === true || i45.getAttribute(B9) === o42[1] || i45.getAttribute(U5) === o42[1] || i45.getAttribute(V9) === o42[1] || i45.getAttribute(F12) === o42[1] || i45.getAttribute(K5) === o42[1] || i45.getAttribute(Q5) === o42[1]) {
            return i45;
          }
        } else {
          return r53;
        }
      } else {
        return i45;
      }
    } }, { key: "getRenderedVertex", value: function e78(t61) {
      return this.jsplumb.getManagedElement(t61);
    } }, { key: "getRenderedPort", value: function e78(t61) {
      var n91 = t61.split(".");
      var o42 = this.getRenderedElement(n91[0]);
      var i45 = o42 ? o42.querySelector(j9(B9, n91[1])) || o42.querySelector(j9(V9, n91[1])) || o42.querySelector(j9(U5, n91[1])) || o42 : null;
      return i45 == null ? null : i45.tagName.toLowerCase() === Z4 ? null : i45;
    } }, { key: "getRenderedConnection", value: function e78(t61) {
      return this.connMap[t61];
    } }, { key: "getRenderedEndpoint", value: function e78(t61) {
      return this.jsplumb.getEndpoint(t61);
    } }, { key: "setSuspendRendering", value: function e78(t61, n91) {
      this.panZoom.setSuspendRendering(t61);
      this._$_suspendRendering = t61;
      this.jsplumb.setSuspendDrawing(t61);
      if (n91) {
        this.refresh();
      }
    } }, { key: "expandGroup", value: function e78(t61) {
      this.jsplumb.expandGroup(typeof t61 === "string" ? t61 : t61.id);
    } }, { key: "collapseGroup", value: function e78(t61) {
      this.jsplumb.collapseGroup(typeof t61 === "string" ? t61 : t61.id);
    } }, { key: "toggleGroup", value: function e78(t61) {
      this.jsplumb.toggleGroup(typeof t61 === "string" ? t61 : t61.id);
    } }, { key: "autoSizeGroups", value: function e78(t61) {
      var n91 = this;
      this.jsplumb.groupManager.forEach(function(e79) {
        var o42 = n91.dataSource.getGroup(e79.id);
        if (o42) {
          var i45 = n91.view.getGroupDefinition(n91.dataSource.getNodeType(o42.data));
          n91._autoSizeAGroup(o42, i45, null, null, t61);
        }
      });
    } }, { key: "sizeGroupToFit", value: function e78(t61, n91) {
      if (t61) {
        var o42 = this.view.getGroupDefinition(this.dataSource.getNodeType(t61.data));
        var i45 = this._autoSizeAGroup(t61, o42, null, null, n91), r53 = i45.movedElements, a48 = i45.resizedGroups;
        i45.layout;
        this._updateMovedElements(r53);
        this._trackGroupSizeChanges(a48);
      }
    } }, { key: "setSize", value: function e78(t61, n91, o42) {
      var i45 = this.getObjectInfo(t61);
      if (i45.obj && i45.el) {
        var r53 = v12(i45.obj) || k7(i45.obj) ? this._$_layoutMap.get(i45.obj.group.id) : this._layout;
        r53.setSize(i45.obj.getFullId(), { w: n91, h: o42 });
        s7(i45.el, n91, o42);
      }
    } }, { key: "getConnectionForEdge", value: function e78(t61) {
      return this.connMap[t61.getId()];
    } }, { key: "getConnectionsForEdges", value: function e78(t61) {
      var n91 = [];
      for (var o42 = 0; o42 < t61.length; o42++) {
        n91.push(this.connMap[t61[o42].getId()]);
      }
      return n91;
    } }, { key: "_connectionEdited", value: function e78(t61) {
      var n91 = i18.exportGeometry(t61.connector);
      this.dataSource.setEdgeGeometry(t61.edge, n91, this);
    } }, { key: "onDestroy", value: function e78(t61) {
      this.bind(t6, t61);
    } }, { key: "_setPosition", value: function e78(t61) {
      var n91 = {};
      var o42 = t61.info || this.getObjectInfo(t61.vertex);
      var i45 = {};
      if (o42 && o42.obj) {
        var r53 = o42.obj;
        if (b11(o42.obj)) {
          r53 = o42.obj.getParent();
        }
        var a48 = r53.id;
        if (t61.doNotUpdateLayout !== true) {
          var s40 = v12(r53) || k7(r53);
          var l48 = s40 ? this._$_layoutMap.get(r53.group.id) : this._layout;
          if (t61.magnetize) {
            u2(n91, this._setMagnetizedPosition(a48, t61.x, t61.y, true, l48));
          } else {
            u2(n91, l48.setPosition(a48, t61.x, t61.y));
          }
          if (s40 && !t61.doNotRunGroupResize) {
            var u52 = this.view.getGroupDefinition(this.dataSource.getNodeType(r53.group.data));
            var d32 = this._autoSizeAGroup(r53.group, u52, null, null, false);
            if (d32 != null) {
              Object.assign(n91, d32.movedElements);
              Object.assign(i45, d32.resizedGroups);
            }
          }
        }
        var p49 = t61.size ? t61.size.w : null;
        var c47 = t61.size ? t61.size.h : null;
        if (o42.el != null) {
          this.jsplumb.viewport.updateElement(this.jsplumb.getId(o42.el), t61.x, t61.y, p49, c47, null);
          if (t61.doNotUpdateElement !== true && !t61.magnetize) {
            i7(o42.el, { x: t61.x, y: t61.y });
          }
          if (t61.doRevalidate === true) {
            this.jsplumb.revalidate(o42.el);
          }
        }
        if (t61.storeInModel && this._$_storePositionsInModel) {
          this.storePositionInModel(a48);
        }
      }
      return { movedElements: n91, resizedGroups: i45 };
    } }, { key: "_relayoutGroups", value: function e78() {
      var t61 = this;
      this.dataSource.eachGroup(function(e79, n91) {
        if (t61.objectFilter(n91)) {
          t61.relayoutGroup(n91, i16);
        }
      });
    } }, { key: "relayoutGroup", value: function e78(t61, n91) {
      var o42 = this;
      var i45 = y10(t61) ? t61 : this.toolkitInstance.getGroup(t61);
      var r53 = this._$_layoutMap.get(i45.id);
      if (r53 == null) {
        return;
      }
      r53.relayout(null, function(e79) {
        e79.positions.forEach(function(e80, t62) {
          i7(o42.jsplumb.getManagedElement(t62), e80);
          if (o42._$_storePositionsInModel) {
            o42.storePositionInModel({ id: t62, pos: e80 });
          }
        });
      }, false);
      var a48 = true;
      if (this._$_dataLoading && this._useModelForSizes) {
        a48 = false;
      }
      if (a48) {
        this.sizeGroupToFit(i45);
      }
      var s40 = this.jsplumb.getManagedElement(i45.id);
      this.jsplumb.revalidate(s40);
      this.fire(n47, { group: i45, layout: r53, el: s40 });
    } }, { key: "_getViewportPosition", value: function e78(t61) {
      return this._getViewportPositionById(t61.id);
    } }, { key: "_getViewportPositionById", value: function e78(t61) {
      return this.jsplumb.viewport.getPosition(t61);
    } }, { key: "repaint", value: function e78(t61, n91) {
      var o42 = this.getObjectInfo(t61);
      if (o42.el != null && o42.obj != null) {
        if (n91) {
          var i45 = this._layout.getPosition(o42.id);
          i7(o42.el, i45);
        }
        this.jsplumb.revalidate(o42.el);
        this.fire(k13, o42);
      }
    } }, { key: "_resolveInitialVertexSize", value: function e78(t61, n91) {
      var o42 = f14(t61) ? this.jsplumb.defaults.nodeSize || { w: 100, h: 80 } : this.jsplumb.defaults.groupSize || { w: 300, h: 300 };
      var i45 = t61.data[this._modelWidthAttribute];
      var r53 = t61.data[this._modelHeightAttribute];
      if (i45 == null) {
        var a48;
        i45 = (a48 = n91.defaultSize) === null || a48 === void 0 ? void 0 : a48.w;
      }
      if (r53 == null) {
        var s40;
        r53 = (s40 = n91.defaultSize) === null || s40 === void 0 ? void 0 : s40.h;
      }
      if (i45 == null) {
        i45 = o42 === null || o42 === void 0 ? void 0 : o42.w;
      }
      if (r53 == null) {
        r53 = o42 === null || o42 === void 0 ? void 0 : o42.h;
      }
      return { w: i45, h: r53 };
    } }, { key: "vertexRendered", value: function e78(t61, n91, o42, i45) {
      if (!n91) {
        throw new Error("Cannot render vertex");
      }
      var r53 = n91;
      n91.setAttribute("data-jtk-vertex", t61.getFullId());
      var a48 = f14(t61), s40 = y10(t61);
      var l48 = a48 ? Na : s40 ? Ma : b11(t61) ? Ta : "";
      h5(n91, l48);
      r53.jtk = r53.jtk || {};
      r53.jtk[t61.objectType.toLowerCase()] = t61;
      r53.jtk.vertex = t61;
      this.jsplumb.manage(n91, t61.id);
      if (f14(t61) || y10(t61)) {
        this._extractEndpointFromElementAndDefinition(n91, t61);
        this.vertexList.push(t61);
      }
      if (a48) {
        n91.jtk = { node: t61 };
      }
      if (s40) {
        n91.jtk = { group: t61 };
      }
      if (this._useModelForSizes) {
        var u52 = this._resolveInitialVertexSize(t61, o42), d32 = u52.w, p49 = u52.h;
        s7(n91, d32, p49);
        t61.data[this._modelWidthAttribute] = d32;
        t61.data[this._modelHeightAttribute] = p49;
      }
      if (s40 || f14(t61) && t61.group == null) {
        this._append(n91);
      } else if (f14(t61)) {
        this._appendNodeToGroup(n91, t61, t61.group);
      }
      this.jsplumb.viewport.refreshElement(t61.id);
      if (t61.data.rotation != null) {
        this.jsplumb.rotate(n91, t61.data.rotation);
      }
      if (f14(t61)) {
        var c47 = { el: n91, id: t61.id, vertex: t61 };
        if (t61.group == null) {
          c47.pos = this._layout.vertexAdded(c47, i45);
        }
        this.fireNodeAdded(c47);
      } else if (y10(t61)) {
        var f45 = { el: n91, vertex: t61, id: t61.id };
        var g31 = o42;
        var v41 = Object.assign({ el: n91, id: t61.id }, g31);
        var h35 = this.jsplumb.addGroup(t61, v41);
        var m44 = o42.layout || { type: s32.type };
        this._$_layoutMap.set(t61.id, this._createGroupLayout(m44, t61));
        var y34 = this._layout;
        if (t61.group != null) {
          this.jsplumb.addToGroup(t61.group.id, n91);
          y34 = this._$_layoutMap.get(t61.group.id);
        }
        f45.pos = y34.vertexAdded({ el: n91, id: t61.id, vertex: t61 }, i45);
        this.fire(t7, f45);
        if (!this._$_dataLoading) {
          if (g31.minSize) {
            var b28 = this.jsplumb.getSize(h35.el);
            if (b28.w < g31.minSize.w || b28.h < g31.minSize.h) {
              s7(h35.el, Math.max(g31.minSize.w, b28.w), Math.max(g31.minSize.h, b28.h));
            }
          }
        }
      }
      this._unrenderedVertices.delete(t61.id);
      if (this._$_dataLoading && this.templateRenderer.asynchronous) {
        this._loadEndFn(false);
      } else {
        this._flushUnrenderedEdges();
        this.refresh(true);
      }
    } }, { key: "_createElement", value: function e78(t61, n91) {
      var o42 = { width: t61.width, height: t61.height, position: t61.position || Pa.absolute };
      var i45 = t61.atts || {};
      if (t61.display != null) {
        o42.display = t61.display;
      }
      if (t61.id != null) {
        i45.id = t61.id;
      }
      if (t61.top != null) {
        o42.top = t61.top + "px";
      }
      if (t61.left != null) {
        o42.left = t61.left + "px";
      }
      if (t61.right != null) {
        o42.right = t61.right + "px";
      }
      if (t61.bottom != null) {
        o42.bottom = t61.bottom + "px";
      }
      var r53 = V2(t61.ns, t61.type || Pa.div, o42, t61.clazz, i45);
      if (n91 != null) {
        n91.appendChild(r53);
      }
      return r53;
    } }, { key: "startEditingPath", value: function e78(t61, n91) {
      if (this._edgePathEditor != null) {
        this._edgePathEditor.startEditing(t61, n91);
      } else {
        Q("ERROR: cannot start path edit - surface not created with 'editablePaths:true'");
      }
    } }, { key: "stopEditingPath", value: function e78() {
      if (this._edgePathEditor != null) {
        this._edgePathEditor.stopEditing();
      } else {
        Q("ERROR: cannot edit paths - surface not created with 'editablePaths:true'");
      }
    } }, { key: "clearPathEdits", value: function e78(t61) {
      if (this._edgePathEditor != null) {
        return this._edgePathEditor.clearEdits(t61);
      } else {
        Q("ERROR: cannot edit paths - surface not created with 'editablePaths:true'");
        return false;
      }
    } }, { key: "_getWheelOptions", value: function e78(t61) {
      var n91 = t61.wheel != null ? t61.wheel.zoom !== false : true;
      var o42 = t61.wheel ? t61.wheel.filter : null;
      return { filter: o42 ? function(e79) {
        var t62 = e79.srcElement || e79.target;
        return !s4(t62, o42);
      } : null, reverse: t61.wheel != null ? t61.wheel.reverse === true : false, pan: t61.wheel != null ? t61.wheel.pan === true : false, zoom: !this.directRender && n91, useMetaKey: t61.wheel != null ? t61.wheel.useMetaKey === true : false, axis: t61.wheel ? t61.wheel.axis : "both" };
    } }, { key: "_fireNodeMovedEvent", value: function e78(t61, n91, o42, i45, r53, a48) {
      if (a48 || n91 !== i45 || o42 !== r53) {
        var s40 = this.getObjectInfo(t61);
        if (s40.el) {
          this.fire(I8, { el: s40.el, id: s40.id, pos: { x: n91, y: o42 }, vertex: s40.obj, e: null, type: s40.obj.objectType, originalPosition: { x: i45, y: r53 }, renderer: this });
        }
      }
    } }, { key: "_applyFunctionToObject", value: function e78(t61, n91) {
      var o42 = this;
      var i45;
      if (l30(t61)) {
        i45 = { nodes: [], edges: [] };
        t61.eachVertex(function(e79, t62) {
          i45.nodes.push(n91(o42.getObjectInfo(t62)));
        });
        t61.eachEdge(function(e79, t62) {
          i45.edges.push(n91(o42.getObjectInfo(t62)));
        });
      } else if (m5(t61)) {
        i45 = [];
        for (var r53 = 0; r53 < t61.length; r53++) {
          i45.push(n91(this.getObjectInfo(t61[r53])));
        }
      } else {
        i45 = n91(this.getObjectInfo(t61));
      }
      return i45;
    } }, { key: "updateVertexPositions", value: function e78(t61, n91) {
      var o42 = this;
      t61.forEach(function(e79, t62) {
        o42._setPosition({ vertex: t62, x: e79.x, y: e79.y, doNotUpdateElement: false, doNotUpdateLayout: true, doRevalidate: false, size: n91.get(t62) });
        if (o42._$_storePositionsInModel) {
          o42.storePositionInModel({ id: t62, pos: e79 });
        }
      });
    } }, { key: "_doMagnetize", value: function e78(t61, n91, o42, i45) {
      var r53 = { options: {} };
      if (n91) {
        r53.origin = n91;
      }
      if (i45) {
        r53.options.gather = i45;
      }
      if (o42) {
        r53.origin = this.panZoom.mapEventLocation(o42);
      }
      if (t61) {
        var a48 = this.getObjectInfo(t61);
        if (a48.obj) {
          r53.focus = a48.obj.id;
        }
      }
      if (this._$_gridProfile.grid) {
        r53.options.grid = this._$_gridProfile.grid;
      }
      var s40 = this._layout.magnetize(r53, false);
      this._updateMovedElements(s40);
      this.jsplumb.repaintEverything();
    } }, { key: "_toggleNode", value: function e78(t61, n91, o42, i45) {
      if (n91) {
        n91.style.display = o42 ? "block" : "none";
        n91._jtkVisible = o42;
        this.fire(s24, { node: t61, el: n91, state: o42 });
        if (!i45) {
          var r53 = this.dataSource.getAllEdgesFor(t61);
          for (var a48 = 0; a48 < r53.length; a48++) {
            if (!o42) {
              this._toggleEdge(r53[a48], o42, i45);
            } else {
              var s40 = p12(r53[a48].source), l48 = p12(r53[a48].target), u52 = s40 === t61 ? l48 : s40, d32 = this.isVisible(u52);
              if (d32) {
                this._toggleEdge(r53[a48], o42, i45);
              }
            }
          }
        }
      }
    } }, { key: "_togglePort", value: function e78(t61, n91) {
      var o42 = t61.getFullId(), i45 = this.jsplumb.getEndpoint(o42);
      m17.setVisible(i45, n91);
    } }, { key: "isVisible", value: function e78(t61) {
      var n91 = this;
      return this._applyFunctionToObject(t61, function(e79) {
        switch (e79.type) {
          case S8.objectType:
            var t62 = n91.getConnectionForEdge(e79.obj);
            return t62 ? t62.visible : false;
          case j8.objectType:
          case V6.objectType:
            return e79.el._jtkVisible !== false;
        }
      });
    } }, { key: "beforeDrop", value: function e78(t61) {
      var n91 = t61.connection, o42 = this.jsplumb.getModelObjectFromEndpoint(n91.endpoints[0]), i45 = this.jsplumb.getModelObjectFromEndpoint(t61.dropEndpoint), r53 = t61.connection.edge;
      if (r53 == null)
        return this.dataSource.beforeConnect(o42, i45, D8.getData(n91), true);
      else
        return this.dataSource.beforeMoveConnection(o42, i45, r53);
    } }, { key: "beforeDrag", value: function e78(t61) {
      var n91 = t61.endpoint.parameters, o42 = this.toolkitInstance.getNode(n91.vertexId), i45 = n91.portId ? o42.addPort({ id: n91.portId, type: n91.portType }) : o42, r53 = t61.endpoint.edgeType, a48 = this.dataSource.beforeStartConnect(i45, r53);
      if (this._debug) {
        var s40 = this.view.getEdgeDefinition(r53) || {};
        console.log("\n------------------------\nDrag started with edge type `" + r53 + "`, having definition :");
        console.log(s40);
        console.log("Edge source is a " + i45.objectType + ", having type [" + i45.getType() + "], with definition :");
        var l48 = this.view["get" + i45.objectType + "Definition"](i45.getType()) || {};
        console.log(l48);
        console.log("Toolkit response to drag start :");
        console.log(a48);
        console.log("---------------------------\n");
      }
      if (a48 === false) {
        if (t61.endpoint.isTemporarySource) {
          this.jsplumb.deleteEndpoint(t61.endpoint);
        }
      } else if (a2(a48)) {
        if (this._$_propertyMapper != null) {
          var u52 = this._$_propertyMapper.computeTypes(a48);
          if (u52.length > 0) {
            a48.type = (a48.type || "") + " " + u52;
          }
        }
      }
      return a48;
    } }, { key: "beforeDetach", value: function e78(t61, n91) {
      var o42 = t61.edge;
      return o42 == null ? true : this.dataSource.beforeDetach(o42.source, o42.target, o42);
    } }, { key: "beforeStartDetach", value: function e78(t61) {
      if (this.directRender) {
        return false;
      }
      var n91 = this.jsplumb.getModelObjectFromEndpoint(t61.endpoint), o42 = t61.connection.edge;
      return o42 == null ? true : this.dataSource.beforeStartDetach(n91, o42);
    } }, { key: "_fireEdgeRemoved", value: function e78(t61) {
      this.fire(l12, { sourceNodeId: h13(t61.source), targetNodeId: h13(t61.target), sourcePortId: c12(t61.source), targetPortId: c12(t61.target), sourceId: t61.source.getFullId(), targetId: t61.target.getFullId(), source: t61.source, target: t61.target, edge: t61 });
    } }, { key: "_loadStartFn", value: function e78() {
      this._$_dataLoading = true;
      this.setSuspendRendering(true);
      this.fire(g17);
    } }, { key: "_appendStartFn", value: function e78() {
      this.setSuspendRendering(true);
    } }, { key: "_loadEndFn", value: function e78(t61) {
      if (!this.templateRenderer.asynchronous || this._unrenderedVertices.size === 0) {
        this.setSuspendRendering(false, false);
        this._flushUnrenderedEdges();
        if (!t61) {
          this.relayout();
          this.jsplumb.repaintEverything();
        }
        if (this.zoomToFitOnLoad && !t61) {
          this.zoomToFit();
        }
        this._$_dataLoading = false;
        this.fire(x14);
      }
    } }, { key: "_appendEndFn", value: function e78() {
      this.setSuspendRendering(false);
      this._flushUnrenderedEdges();
      this.refresh();
      this.jsplumb.setSuspendDrawing(false, true);
      this.fire(x14);
    } }, { key: "_appendNodeToGroup", value: function e78(t61, n91, o42) {
      var i45 = this.jsplumb.getManagedElement(o42.id);
      if (i45) {
        var r53 = i45.querySelector(n3(c29)) || i45;
        r53.appendChild(t61);
        this.jsplumb.addToGroup(o42.id, t61);
        this._$_layoutMap.get(o42.id).vertexAdded({ el: t61, vertex: n91 });
        this.panZoom.suspend(t61);
      }
    } }, { key: "_extractEndpointsFromVertex", value: function e78(t61) {
      var n91 = [];
      var o42 = t61.querySelectorAll([n3(Y6), Z4].join(","));
      j2(o42, function(e79) {
        var t62 = Bo(new a31(e79));
        n91.push([t62, e79]);
      });
      if (t61.getAttribute(Y6) != null) {
        var i45 = Bo(new a31(t61));
        n91.push([i45, t61]);
      }
      return n91;
    } }, { key: "_extractEndpointFromElementAndDefinition", value: function e78(t61, n91) {
      var o42 = this;
      var i45 = this._extractEndpointsFromVertex(t61);
      j2(i45, function(e79) {
        var i46 = b(e79, 2), r53 = i46[0], s40 = i46[1];
        var l48;
        var u52 = u2({}, r53);
        if (r53.portId != null) {
          l48 = n91.addPort({ id: r53.portId, type: r53.portType });
          u52.uuid = l48.getFullId();
          u52.data = l48.data;
        }
        if (u52.uuid == null) {
          if (s40 === t61) {
            u52.uuid = n91.id;
          }
        }
        var d32 = o42.view.getPortDefinition(r53.portType || r7);
        if (d32 != null) {
          u2(u52, d32);
        }
        u52.element = t61;
        var p49 = o42.jsplumb._internal_newEndpoint(u52);
        D8.mergeParameters(p49, p2({ vertexId: n91.id, portId: r53.portId, portType: r53.portType, edgeType: r53.edgeType }));
      });
    } }, { key: "_doRenderNode", value: function e78(t61, n91) {
      var o42 = this.jsplumb.getManagedElement(t61.id);
      if (o42 == null) {
        var i45 = this.getNodeDefinition(t61);
        if (i45.ignore !== true) {
          this._unrenderedVertices.set(t61.id, { vertex: t61, def: i45, eventInfo: n91 });
          this.nodeRenderer(t61, t61.data, t61, i45, n91);
        }
      }
    } }, { key: "_doRenderGroup", value: function e78(t61, n91) {
      var o42 = this.jsplumb.getManagedElement(t61.id);
      if (o42 == null) {
        var i45 = this.getGroupDefinition(t61);
        if (i45.ignore !== true) {
          if (i45.ghost === true) {
            i45.ghostProxyParent = this.containerElement;
          }
          this._unrenderedVertices.set(t61.id, { vertex: t61, def: i45, eventInfo: n91 });
          this.groupRenderer(t61, t61.data, t61, i45, n91);
        }
      }
    } }, { key: "_flushUnrenderedEdges", value: function e78() {
      var t61 = [];
      for (var n91 = 0; n91 < this._unrenderedEdges.length; n91++) {
        var o42 = this._maybeRenderEdge(this._unrenderedEdges[n91].edge, this._unrenderedEdges[n91].addedByMouse);
        if (o42 == null) {
          t61.push(this._unrenderedEdges[n91]);
        }
      }
      this._unrenderedEdges = t61;
    } }, { key: "_prepareConnectionParams", value: function e78(t61) {
      var n91 = this;
      var o42 = this.dataSource.getEdgeType(t61.data), i45 = { type: o42, edgeType: o42, data: t61.data, cost: t61.getCost(), directed: t61.isDirected(), geometry: t61.geometry, ports: [], parameters: { edgeId: t61.id }, edge: t61 }, r53 = this.view.getEdgeDefinition(o42);
      (function(e79) {
        if (r53) {
          for (var t62 = 0; t62 < e79.length; t62++) {
            if (r53[e79[t62]])
              i45[e79[t62]] = r53[e79[t62]];
          }
        }
      })([t8, c17, i15, l15, s18, "cssClass", d15]);
      if (i45.anchor && !i45.anchors) {
        i45.anchors = [i45.anchor, i45.anchor];
        delete i45.anchor;
      }
      if (i45.endpoint && !i45.endpoints) {
        i45.endpoints = [i45.endpoint, i45.endpoint];
        delete i45.endpoint;
      }
      var a48 = function e79(t62, n92, o43, i46, r54) {
        if (i46 && i46[o43]) {
          var a49 = t62[n92] || [i46[o43], i46[o43]];
          a49[r54] = i46[o43];
          t62[n92] = a49;
        }
      };
      var s40 = function e79(o43, r54, s41) {
        if (b11(o43)) {
          var l48 = o43.getParent(), u52 = o43.getFullId(), d32 = n91.jsplumb.getEndpoint(u52) || n91.getRenderedPort(u52);
          i45[r54] = d32 || n91.jsplumb.getManagedElement(n91.dataSource.getNodeId(l48.data));
          var p49 = n91.view.getPortDefinition(o43.getType());
          a48(i45, e20, r17, p49, s41);
          a48(i45, c17, i15, p49, s41);
          i45.ports[s41] = o43.id;
        } else {
          var c47 = t61[r54].id;
          var f45 = n91.jsplumb.getEndpoint(c47);
          i45[r54] = f45 || n91.jsplumb.getManagedElement(c47);
        }
      };
      s40(t61.source, t3, 0);
      s40(t61.target, e9, 1);
      return i45;
    } }, { key: "getDecorator", value: function e78(t61) {
      return this.decorators.find(function(e79) {
        return e79.id === t61;
      });
    } }, { key: "__bindToToolkit", value: function e78(t61, n91) {
      this._boundToolkitEvents.push({ event: t61, fn: n91 });
      this.dataSource.bind(t61, n91, true);
    } }, { key: "_nodeAdded", value: function e78(t61) {
      var n91 = t61.node;
      if (this.objectFilter(n91)) {
        this._doRenderNode(n91, t61.eventInfo);
      }
    } }, { key: "_groupAdded", value: function e78(t61) {
      var n91 = t61.group;
      if (this.objectFilter(n91)) {
        this._doRenderGroup(n91, t61.eventInfo);
      }
    } }, { key: "_nodeRemoved", value: function e78(t61) {
      var n91 = t61.parentGroup ? t61.parentGroup.id : v12(t61.node) || k7(t61.node) ? t61.node.group.id : null;
      var o42 = n91 != null ? this._$_layoutMap.get(n91) : this._layout;
      var i45 = o42.getPosition(t61.node.id);
      o42.vertexRemoved(t61.node, false);
      var r53 = this.jsplumb.getManagedElement(t61.node.id);
      if (t61.parentGroup) {
        this.jsplumb.removeFromGroup(t61.parentGroup.id, r53, true);
        if (!t61.parentGroupIsBeingRemoved) {
          this.relayoutGroup(t61.parentGroup, n14);
        }
      }
      this.fire(y11, { vertex: t61.node, el: r53, pos: i45 });
      this.jsplumb.unmanage(r53, false);
      this.templateRenderer.cleanupVertex(t61.node.id, r53);
      E(this.vertexList, function(e79) {
        return e79.id === t61.node.id;
      });
      delete r53["jtk"];
      this.refresh(true);
    } }, { key: "_groupRemoved", value: function e78(t61) {
      var n91 = t61.group;
      var o42 = t61.parentGroup ? t61.parentGroup.id : null;
      var i45 = o42 != null ? this._$_layoutMap.get(o42) : this._layout;
      var r53 = i45.getPosition(t61.group.id);
      i45.vertexRemoved(n91, false);
      var a48 = this.jsplumb.getManagedElement(n91.id);
      if (t61.parentGroup) {
        this.jsplumb.removeFromGroup(t61.parentGroup.id, a48, true);
        if (!t61.parentGroupIsBeingRemoved) {
          this.relayoutGroup(t61.parentGroup, n14);
        }
      }
      var s40 = this.jsplumb.removeGroup(n91.id, t61.removeChildren, true, true), l48 = null;
      if (s40 != null) {
        l48 = {};
        for (var u52 in s40) {
          var d32 = this.toolkitInstance.getVertex(u52);
          if (d32 != null) {
            if (d32.group == null) {
              this.panZoom.restore(d32.id);
            }
            this._setPosition({ vertex: d32, x: s40[u52].x, y: s40[u52].y, doNotUpdateElement: true });
            l48[d32.id] = { x: s40[u52].x, y: s40[u52].y };
          } else {
            Q("Could not reposition element removed from group - no DOM node found.");
          }
        }
      }
      this.fire(u16, { el: a48, vertex: n91, children: t61.children, childrenRemoved: t61.removeChildren, childPositions: l48, pos: r53 });
      this.templateRenderer.cleanupVertex(n91.id, a48);
      E(this.vertexList, function(e79) {
        return e79.id === t61.group.id;
      });
      delete a48["jtk"];
    } }, { key: "_edgeAdded", value: function e78(t61) {
      if (t61.source !== this) {
        var n91 = t61.edge;
        if (this.objectFilter(n91.source) && this.objectFilter(n91.target)) {
          var o42 = this.view.getEdgeDefinition(this.dataSource.getEdgeType(n91.data || {}));
          if (o42 && o42.ignore === true)
            return;
          this._enqueueEdge(n91, t61.addedByMouse, true);
        }
      }
    } }, { key: "_connectionEstablished", value: function e78(t61) {
      var n91 = this;
      if (this.dragOptions.addHelperClasses !== false) {
        y3(this.containerElement, la);
      }
      if (t61.connection.edge != null) {
        return;
      }
      var o42 = t61.sourceEndpoint.parameters, i45 = t61.targetEndpoint.parameters, r53 = o42.portId, a48 = o42.vertexId, s40 = i45.portId, l48 = i45.vertexId, u52 = t61.sourceEndpoint.parameters[M9.portType] || r7, d32 = this.view.getPortDefinition(u52), p49 = d32 != null && d32.edgeType ? d32.edgeType : t61.sourceEndpoint.parameters[M9.edgeType] || r7;
      var c47 = this.jsplumb.getModelObjectFromEndpoint(t61.sourceEndpoint), f45 = this.jsplumb.getModelObjectFromEndpoint(t61.targetEndpoint), g31 = c47.getFullId(), v41 = f45.getFullId();
      var h35 = { sourceVertexId: a48, sourcePortId: r53, targetVertexId: l48, targetPortId: s40, type: p49, source: c47, target: f45, sourceId: g31, targetId: v41, sourceType: c47.objectType, targetType: f45.objectType };
      var m44 = this.dataSource.edgeFactory(p49, D8.getData(t61.connection) || {}, function(e79) {
        e79 = M(e79, c47, null, true);
        e79.type = e79.type || p49;
        var o43 = null;
        if (n91._edgePathEditor != null) {
          o43 = n91._edgePathEditor._connectionEstablished(t61);
        }
        h35.edge = n91.dataSource.addEdge({ source: g31, target: v41, cost: t61.connection.cost, directed: t61.connection.directed, data: e79, addedByMouse: true, geometry: o43 }, n91);
        if (h35.edge != null) {
          n91.connMap[h35.edge.getId()] = t61.connection;
          t61.connection.edge = h35.edge;
          var i46 = n91._prepareConnectionParams(h35.edge);
          D8.setType(t61.connection, [Pa.default, i46.type].join(" "), i46.data);
          h35.addedByMouse = true;
          h35.connection = t61.connection;
          n91.fire(m14, h35);
        } else {
          n91.jsplumb.deleteConnection(t61.connection);
        }
      }, function() {
        n91.jsplumb.deleteConnection(t61.connection);
      }, h35);
      if (m44 === false) {
        this.jsplumb.deleteConnection(t61.connection);
      }
    } }, { key: "_graphClearStart", value: function e78() {
      var t61 = this;
      this.jsplumb.reset();
      for (var n91 = 0; n91 < this.decorators.length; n91++) {
        this.decorators[n91].reset({ remove: function e79(t62) {
          return t62.parentNode && t62.parentNode.removeChild(t62);
        } });
      }
      this.panZoom.reset();
      j2(this.plugins, function(e79) {
        return e79.reset();
      });
      j2(this.vertexList, function(e79) {
        var n92 = t61.jsplumb.getManagedElement(e79.id);
        if (n92 != null) {
          t61.templateRenderer.cleanupVertex(e79.id, n92);
        }
      });
      this._layout && this._layout._reset();
      this.vertexList.length = 0;
      this.connMap = {};
      this._$_layoutMap.clear();
      this.jsplumb.setZoom(this.getZoom());
    } }, { key: "_graphClearEnd", value: function e78() {
    } }, { key: "_bindToolkitEvents", value: function e78() {
      var t61 = this;
      this.__bindToToolkit(g11, function(e79) {
        var n91 = t61.jsplumb.getManagedElement(e79.vertex.id);
        var o42 = t61.jsplumb.getManagedElement(e79.group.id);
        if (n91 && o42) {
          t61.panZoom.suspend(n91);
          if (e79.pos) {
            if (e79.vertex.data[t61._modelLeftAttribute] != null) {
              e79.vertex.data[t61._modelLeftAttribute] = e79.pos.x;
            }
            if (e79.vertex.data[t61._modelTopAttribute] != null) {
              e79.vertex.data[t61._modelTopAttribute] = e79.pos.y;
            }
          }
          t61.fire(g11, { vertex: e79.vertex, group: e79.group, uigroup: t61.jsplumb.getGroup(e79.group.id), sourceGroup: e79.sourceGroup, pos: e79.pos, el: n91, groupEl: t61.jsplumb.getManagedElement(e79.group.id) });
          if (e79.source !== t61) {
            t61.jsplumb.addToGroup(e79.group.id, n91);
          }
          t61._layout.vertexRemoved(e79.vertex, false);
          if (e79.sourceGroup) {
            t61._$_layoutMap.get(e79.sourceGroup.id).vertexRemoved(e79.vertex, false);
          }
          t61._$_layoutMap.get(e79.group.id).vertexAdded({ el: n91, pos: e79.pos, vertex: e79.vertex });
          if (!t61._$_suspendRendering) {
            t61.relayoutGroup(e79.group, e79.vertexIsNew ? c20 : v18);
          }
        }
      });
      this.__bindToToolkit(m16, function(e79) {
        var n91 = t61.jsplumb.getManagedElement(e79.vertex.id);
        if (n91) {
          var o42 = null;
          if (e79.source !== t61) {
            t61.jsplumb.removeFromGroup(e79.group.id, n91);
          }
          t61._$_layoutMap.get(e79.group.id).vertexRemoved(e79.vertex, false);
          if (e79.targetGroup) {
            o42 = t61._$_layoutMap.get(e79.targetGroup.id);
            o42.vertexAdded({ el: n91, vertex: e79.vertex });
          } else {
            o42 = t61._layout;
            o42.vertexAdded({ el: n91, vertex: e79.vertex });
            var i45 = t61.jsplumb.getOffset(n91);
            t61._layout.setPosition(e79.vertex.id, i45.x, i45.y);
            if (t61._$_storePositionsInModel) {
              t61.storePositionInModel(e79.vertex.id);
            }
          }
          t61.panZoom.restore(n91);
          t61.fire(m16, u2(e79, { el: n91, groupEl: t61.jsplumb.getManagedElement(e79.group.id), pos: o42.getPosition(e79.vertex.id) }));
          if (!t61._$_suspendRendering) {
            t61.relayoutGroup(e79.group, n14);
          }
        }
      });
      this.__bindToToolkit(F8, function(e79) {
        if (e79.source === t61) {
          t61._setGroupElementSize(e79.group, e79.originalGroupSize);
        }
      });
      this.__bindToToolkit(D6, function(e79) {
        if (e79.source === t61) {
          t61._setGroupElementSize(e79.group, e79.newGroupSize);
        }
      });
      this.__bindToToolkit(l12, function(e79) {
        if (!t61._ignoreToolkitEvents && e79.source !== t61) {
          var n91 = e79.edge;
          var o42 = t61.connMap[n91.getId()];
          if (o42) {
            if (t61.dataSource.debugEnabled)
              console.log("Renderer", "removing edge", n91);
            t61._fireEdgeRemoved(n91);
            delete t61.connMap[n91.getId()];
            t61.jsplumb.deleteConnection(o42, { fireEvent: false });
          }
        }
      });
      this.__bindToToolkit(w10, function(e79) {
        if (!t61._ignoreToolkitEvents && e79.source !== t61) {
          var n91 = e79.obj;
          var o42 = t61.connMap[n91.getId()];
          if (o42) {
            var i45 = t61.view.getEdgeDefinition(e79.newType);
            if (i45 && i45.ignore === true)
              return;
            if (i45.endpoint || i45.endpoints) {
              B8.replaceEndpoint(o42, 0, i45.endpoints ? i45.endpoints[0] : i45.endpoint);
              B8.replaceEndpoint(o42, 1, i45.endpoints ? i45.endpoints[1] : i45.endpoint);
            }
            if (i45.connector) {
              B8._setConnector(o42, i45.connector);
            }
            D8.setType(o42, e79.newType, n91.data);
          }
        }
      });
      this.__bindToToolkit(z6, function(e79) {
        if (!t61._ignoreToolkitEvents) {
          var n91 = e79.edge;
          var o42 = t61.connMap[n91.getId()];
          var i45 = n91.target.getFullId();
          var r53 = t61.jsplumb.getManagedElement(i45) || t61.jsplumb.getEndpoint(i45) || t61.getRenderedElement(i45);
          if (o42) {
            t61.jsplumb.silently(function() {
              if (r53 != null) {
                if (t61.dataSource.debugEnabled)
                  console.log("DEBUG: target change", o42);
                t61.jsplumb.setTarget(o42, r53);
              } else {
                delete t61.connMap[n91.getId()];
                t61.jsplumb.deleteConnection(o42, { force: true, fireEvent: false });
              }
            });
          } else {
            if (r53 != null) {
              if (t61.dataSource.debugEnabled) {
                Q("DEBUG: Target for Edge " + n91.getId() + " changed to Node " + r53.id + "; we have no valid connection.");
              }
            }
          }
        }
      });
      this.__bindToToolkit(E6, function(e79) {
        if (!t61._ignoreToolkitEvents) {
          var n91 = e79.edge;
          var o42 = t61.connMap[n91.getId()];
          var i45 = n91.source.getFullId();
          var r53 = t61.jsplumb.getManagedElement(i45) || t61.jsplumb.getEndpoint(i45) || t61.getRenderedElement(i45);
          if (o42) {
            t61.jsplumb.silently(function() {
              if (r53 != null) {
                t61.jsplumb.setSource(o42, r53);
              } else {
                delete t61.connMap[n91.getId()];
                t61.jsplumb.deleteConnection(o42, { force: true, fireEvent: false });
              }
            });
          } else {
            if (r53 != null) {
              if (t61.dataSource.debugEnabled) {
                Q("DEBUG: Source for Edge " + n91.getId() + " changed to Node " + n91.source.getFullId() + "; we have no valid connection.");
              }
            }
          }
        }
      });
      this.__bindToToolkit(R5, function(e79) {
        if (e79.renderer.id === t61.id) {
          var n91 = t61.getRenderedConnection(e79.edge.getId());
          if (e79.geometry != null) {
            i18.importGeometry(n91.connector, e79.geometry);
            t61.jsplumb.revalidate(n91.source);
          } else {
            P7(n91.connector);
          }
        }
      });
      this.__bindToToolkit(c13, function(e79) {
        var n91 = t61.jsplumb.getManagedElement(e79.vertex.id);
        var o42 = t61.view.getPortDefinition(t61.dataSource.getPortType(e79.data));
        if (o42.isEndpoint) {
          var i45 = t61.getRenderedPort(e79.port.getFullId());
          var r53 = u2({ parameters: { vertexId: e79.vertex.id, portId: e79.port.id, portType: e79.port.getType() }, uuid: e79.port.getFullId(), data: e79.port.data }, o42);
          var a48 = Bo(new n48(e79.data, "data-jtk-"));
          u2(r53, a48);
          r53.element = i45 || n91;
          t61.jsplumb._internal_newEndpoint(r53);
        } else {
          var s40 = t61.getRenderedPort(e79.port.getFullId());
          if (!s40) {
            t61.portRenderer(e79.port, e79.data, e79.vertex, o42, null);
          }
        }
        t61.jsplumb.revalidate(n91);
        t61.refresh(true);
      });
      this.__bindToToolkit(T4, function(e79) {
        var n91 = t61.jsplumb.getManagedElement(e79.vertex.id), o42 = e79.port.getFullId(), i45 = t61.getRenderedPort(o42), r53 = t61.jsplumb.getEndpoint(o42);
        if (r53 != null) {
          t61.jsplumb.deleteEndpoint(r53);
          t61.refresh(true);
        } else if (i45 != null) {
          if (n91 !== i45) {
            t61.jsplumb.setSuspendEvents(true);
            t61.jsplumb.unmanage(i45);
            t61.templateRenderer.cleanupPort(o42, i45);
            t61.jsplumb.setSuspendEvents(false);
          }
          t61.fire(T4, { vertex: e79.vertex, port: e79.port, portEl: i45, vertexEl: n91 });
          t61.jsplumb.revalidate(n91);
          t61.refresh(true);
        }
      });
      this.__bindToToolkit(s12, function(e79) {
        var n91 = t61.connMap[e79.edge.getId()];
        if (n91) {
          var o42 = t61._prepareConnectionParams(e79.edge);
          var i45 = h(/* @__PURE__ */ new Set([Pa.default, o42.type]));
          t61.jsplumb.setConnectionType(n91, i45.join(" "), o42.data);
          if (t61._$_simpleEdgeStyles === true) {
            var r53 = {};
            var a48 = false;
            Lo.forEach(function(t62) {
              if (e79.edge.data[t62] != null) {
                a48 = true;
                r53[t62] = e79.edge.data[t62];
              }
            });
            if (a48) {
              t61.jsplumb.setLineStyle(n91, r53);
            }
          }
        }
      });
      this.__bindToToolkit(u15, function(e79) {
        var n91 = t61.getRenderedPort(e79.originalId);
        if (n91) {
          if (t61.templateRenderer.reactive === false) {
            t61.templateRenderer.update(n91, e79.port.data, e79.port, t61);
          }
          t61.repaint(t61.jsplumb.getManagedElement(e79.vertex.id));
        }
      });
      this.__bindToToolkit(S9, function(e79) {
        if (f14(e79.obj) || y10(e79.obj)) {
          var n91 = t61.getRenderedElement(e79.obj.id);
          if (n91) {
            h5(n91, ka);
            if (t61._addToDragSelectionOnSelect) {
              t61.jsplumb.addToDragSelection(n91);
            } else {
              t61.jsplumb.addToDragGroup($o, n91);
            }
          }
        } else if (m13(e79.obj)) {
          var o42 = t61.getConnectionForEdge(e79.obj);
          if (o42) {
            B8.addClass(o42, pa);
          }
        }
      });
      this.__bindToToolkit(L6, function() {
        var e79 = t61.jsplumb.getContainer();
        t61.jsplumb.clearDragSelection();
        t61.jsplumb.clearDragGroup($o);
        j2(A3(e79, "." + pa), function(e80) {
          return y3(e80, pa);
        });
        j2(A3(e79, "." + ka), function(e80) {
          return y3(e80, ka);
        });
      });
      this.__bindToToolkit(A8, function(e79) {
        if (f14(e79.obj) || y10(e79.obj)) {
          var n91 = t61.getRenderedElement(e79.obj.id);
          if (n91) {
            t61.jsplumb.removeFromDragGroup(n91);
            y3(n91, ka);
            t61.jsplumb.removeFromDragSelection(n91);
          }
        } else if (m13(e79.obj)) {
          var o42 = t61.getConnectionForEdge(e79.obj);
          if (o42) {
            B8.removeClass(o42, pa);
          }
        }
      });
      this.__bindToToolkit(e14, this._loadStartFn.bind(this));
      this.__bindToToolkit(a15, this._appendStartFn.bind(this));
      this.__bindToToolkit(r15, this._loadEndFn.bind(this));
      this.__bindToToolkit(d12, this._appendEndFn.bind(this));
    } }, { key: "_vertexUpdated", value: function e78(t61) {
      if (t61.vertex != null) {
        var n91 = this.jsplumb.getManagedElement(t61.vertex.getFullId());
        if (n91) {
          if (this.templateRenderer.reactive === false) {
            this.templateRenderer.update(n91, t61.vertex.data, t61.vertex, this);
          }
          this.fire(b14, { el: n91, vertex: t61.vertex });
          if (this._useModelForSizes && t61.updates != null) {
            if (t61.updates[this._modelWidthAttribute] != null || t61.updates[this._modelHeightAttribute] != null) {
              var o42 = this._resolveInitialVertexSize(t61.vertex, this.view.getTypeDefinition(t61.vertex));
              s7(n91, o42.w, o42.h);
            }
          }
          this.repaint(n91);
        }
      }
    } }, { key: "_autoSizeAGroup", value: function e78(t61, n91, o42, i45, r53) {
      var a48 = this;
      o42 = o42 || {};
      i45 = i45 || {};
      var s40 = this._$_layoutMap.get(t61.id);
      var l48 = { movedElements: o42, resizedGroups: i45, layout: s40 };
      var u52 = n91.elastic && this._useModelForSizes;
      var d32 = r53 || (n91.autoShrink || n91.autoGrow || n91.autoSize || n91.elastic) && !u52;
      if (!d32) {
        return l48;
      }
      var p49 = n91.autoShrink === true || n91.elastic === true || n91.autoSize === true && n91.autoShrink !== false;
      var c47 = n91.autoGrow === true || n91.elastic === true || n91.autoSize === true && n91.autoGrow !== false;
      n91.padding || 0;
      var f45 = function e79(t62, n92, i46) {
        o42[t62] = o42[t62] || { original: n92, current: i46 };
        o42[t62].current = i46;
      };
      var g31 = this.jsplumb.getGroup(t61.id);
      var v41 = g31.contentArea;
      var h35 = 0, m44 = 0;
      var y34, b28;
      var _17 = this.jsplumb.getSize(v41);
      var E17 = this.jsplumb.getSize(g31.el);
      var j26 = Math.max(_17.w, E17.w);
      var k20 = Math.max(_17.h, E17.h);
      var S20 = t61.group ? this._$_layoutMap.get(t61.group.id) : this._layout;
      var x28 = Object.assign({}, S20.getPosition(t61.id));
      var P19;
      var I18 = this._currentElasticGroup && this._currentElasticGroup.getValues(t61.id);
      if (I18 != null) {
        h35 = I18.layoutShiftX;
        m44 = I18.layoutShiftY;
        y34 = I18.width;
        b28 = I18.height;
        P19 = { x: x28.x - h35, y: x28.y - m44 };
      } else {
        var T18 = n91.allowShrinkFromOrigin === true;
        var w23 = i38(s40._getExtents(), n91, T18, x28, j26, k20, p49, c47, this._$_gridProfile);
        y34 = w23.width;
        b28 = w23.height;
        h35 = w23.layoutShiftX;
        m44 = w23.layoutShiftY;
        P19 = { x: x28.x - h35, y: x28.y - m44 };
      }
      s7(v41, y34, b28);
      var G17 = this.jsplumb.getSize(g31.el);
      var M20 = G17.w - j26;
      var z16 = G17.h - k20;
      if (!r53 && p49 === false) {
        var R15 = false;
        if (M20 < 0) {
          v41.style.width = j26 + "px";
          M20 = 0;
          R15 = true;
        }
        if (z16 < 0) {
          v41.style.height = k20 + "px";
          z16 = 0;
          R15 = true;
        }
        if (R15) {
          G17 = this.jsplumb.getSize(g31.el);
        }
      }
      if (!r53 && c47 === false) {
        var A19 = false;
        if (M20 > 0) {
          v41.style.width = j26 + "px";
          M20 = 0;
          A19 = true;
        }
        if (z16 > 0) {
          v41.style.height = k20 + "px";
          z16 = 0;
          A19 = true;
        }
        if (A19) {
          G17 = this.jsplumb.getSize(g31.el);
        }
      }
      if (h35 !== 0 || m44 !== 0) {
        s40.getPositions().forEach(function(e79, t62) {
          var n92 = { x: e79.x + h35, y: e79.y + m44 };
          s40.setPosition(t62, n92.x, n92.y, true);
          a48.jsplumb.viewport.updateElement(t62, n92.x, n92.y, null, null, null);
          f45(t62, e79, n92);
        });
        s40._$_calculateExtents();
        this.jsplumb.viewport.updateElement(t61.id, P19.x, P19.y, G17.w, G17.h, null);
        S20.setPosition(t61.id, P19.x, P19.y, true);
        f45(t61.id, x28, P19);
      }
      S20.setSize(t61.id, G17);
      if (t61.group) {
        var D18 = this.getGroupDefinition(t61.group);
        if (D18) {
          this._autoSizeAGroup(t61.group, D18, o42, i45, false);
        }
      } else {
        if (this._$_magnetizeProfile.afterGroupShrink && (M20 < 0 || z16 < 0)) {
          this.gather(t61);
        } else if (this._$_magnetizeProfile.afterGroupGrow && (M20 > 0 || z16 > 0)) {
          var C19 = this._layout.getPosition(t61.id);
          if (C19 != null) {
            u2(o42, this._setMagnetizedPosition(t61.id, C19.x, C19.y, !this._$_magnetizeProfile.repositionDraggedElement, this._layout));
          }
        }
      }
      if (M20 !== 0 || z16 !== 0) {
        this.fire(o22, { group: t61, el: v41, w: y34, h: b28 });
      }
      i45[t61.id] = { group: t61, originalGroupSize: _17, newGroupSize: G17 };
      return l48;
    } }, { key: "_connect", value: function e78(t61, n91, o42, i45) {
      var r53 = this;
      if (this.dataSource.debugEnabled) {
        console.log("Renderer", "adding connection with params", t61);
      }
      var a48 = function e79(t62, n92) {
        t62.endpoint = t62.endpoint || r53.jsplumb.defaults.endpoints[n92] || r53.jsplumb.defaults.endpoint;
        t62.paintStyle = t62.paintStyle || r53.jsplumb.defaults.endpointStyles[n92] || r53.jsplumb.defaults.endpointStyle;
        t62.hoverPaintStyle = t62.hoverPaintStyle || r53.jsplumb.defaults.endpointHoverStyles[n92] || r53.jsplumb.defaults.endpointHoverStyle;
        t62.anchor = t62.anchor != null ? t62.anchor : r53.jsplumb.defaults.anchors != null ? r53.jsplumb.defaults.anchors[n92] : r53.jsplumb.defaults.anchor;
        t62.deleteOnEmpty = t62.deleteOnEmpty === false ? t62.deleteOnEmpty : true;
      };
      var s40 = function e79(t62, n92) {
        if (i45 != null) {
          t62.endpoint = t62.endpoint || i45.endpoint || (i45.endpoints ? i45.endpoints[n92] : null);
          t62.anchor = t62.anchor || i45.anchor || (i45.anchors ? i45.anchors[n92] : null);
          t62.paintStyle = t62.paintStyle || i45.endpointStyle || (i45.endpointStyles ? i45.endpointStyles[n92] : null);
          t62.hoverPaintStyle = t62.hoverPaintStyle || i45.endpointHoverStyle || (i45.endpointHoverStyles ? i45.endpointHoverStyles[n92] : null);
        }
      };
      var l48 = u2({}, t61);
      if (t61.type != null) {
        i45 = i45 || this.view.getEdgeDefinition(t61.type);
        if (i45 != null) {
          if (this.enhancedView) {
            u2(l48, M(i45, n91.data, null, true));
          } else {
            u2(l48, i45);
          }
        }
      }
      if (Ho(t61.source)) {
        var u52 = { element: t61.source, parameters: { vertexId: b11(n91.source) ? n91.source.getParent().id : n91.source.id, portId: b11(n91.source) ? n91.source.id : null } };
        if (f14(n91.source) || y10(n91.source)) {
          var d32 = this.view.getTypeDefinition(n91.source);
          if (d32.anchorPositions) {
            u52.anchor = d32.anchorPositions;
          }
        }
        var p49 = t61.source.getAttribute(G7) || t61.source.getAttribute(W8);
        if (p49 != null) {
          u52.parameters.portType = p49;
          var c47 = this.view.getPortDefinition(p49);
          if (c47 != null) {
            if (this.enhancedView) {
              u2(u52, M(c47, n91.source.data, null, true));
            } else {
              u2(u52, c47);
            }
          }
        }
        s40(u52, 0);
        a48(u52, 0);
        l48.sourceEndpoint = this.jsplumb._internal_newEndpoint(u52);
      }
      if (Ho(t61.target)) {
        var f45 = { element: t61.target, parameters: { vertexId: b11(n91.target) ? n91.target.getParent().id : n91.target.id, portId: b11(n91.target) ? n91.target.id : null } };
        if (f14(n91.target) || y10(n91.target)) {
          var g31 = this.view.getTypeDefinition(n91.target);
          if (g31.anchorPositions) {
            f45.anchor = g31.anchorPositions;
          }
        }
        var v41 = t61.target.getAttribute(G7) || t61.target.getAttribute(X6);
        if (v41 != null) {
          f45.parameters.portType = v41;
          var h35 = this.view.getPortDefinition(v41);
          if (h35 != null) {
            if (this.enhancedView) {
              u2(f45, M(h35, n91.target.data, null, true));
            } else {
              u2(f45, h35);
            }
          }
        }
        s40(f45, 1);
        a48(f45, 1);
        l48.targetEndpoint = this.jsplumb._internal_newEndpoint(f45);
      }
      if (this._$_simpleEdgeStyles === true) {
        Lo.forEach(function(e79) {
          if (n91.data[e79] != null) {
            l48[e79] = n91.data[e79];
          }
        });
      }
      return this.jsplumb.connect(l48, null, o42);
    } }, { key: "_enqueueEdge", value: function e78(t61, n91, o42) {
      this._unrenderedEdges.push({ edge: t61, addedByMouse: n91 });
      if (o42) {
        this._flushUnrenderedEdges();
      }
    } }, { key: "_maybeRenderEdge", value: function e78(t61, n91) {
      var o42 = this.getRenderedEndpoint(t61.target.getFullId()) || this.getRenderedElement(t61.target), i45 = this.getRenderedEndpoint(t61.source.getFullId()) || this.getRenderedElement(t61.source);
      if (o42 == null || i45 == null) {
        return null;
      } else {
        return this._doRenderEdge(t61, n91);
      }
    } }, { key: "_doRenderEdge", value: function e78(t61, n91) {
      var o42 = this.view.getEdgeDefinition(this.dataSource.getEdgeType(t61.data || {}));
      var i45 = this._prepareConnectionParams(t61);
      var r53 = this._connect(i45, t61, n91, o42);
      if (r53 != null) {
        var a48 = r53.connector;
        if (i45.geometry) {
          i18.importGeometry(a48, i45.geometry);
          this.jsplumb.revalidate(r53.source);
          this.jsplumb.revalidate(r53.target);
        }
        r53.edge = t61;
        this.connMap[t61.getId()] = r53;
        this.fire(m14, { source: t61.source, target: t61.target, connection: r53, edge: t61, geometry: t61.geometry, addedByMouse: n91 });
        if (this.refreshLayoutOnEdgeConnect) {
          this.refresh(true);
        }
        var s40 = b11(t61.source) ? t61.source.getParent() : t61.source, l48 = this.jsplumb.getManagedElement(s40.id), u52 = b11(t61.target) ? t61.target.getParent() : t61.target, d32 = this.jsplumb.getManagedElement(u52.id);
        if (d32._jtkVisible === false || l48._jtkVisible === false) {
          this._toggleEdge(t61, false);
        }
      } else {
        Q("jsPlumb: WARN : An edge could not be rendered " + t61 + " and is being removed from the dataset.");
        this.dataSource.removeEdge(t61);
      }
      return r53;
    } }, { key: "_toggleEdge", value: function e78(t61, n91, o42) {
      var i45 = this.getConnectionForEdge(t61);
      if (i45) {
        var r53 = !n91 || Vo(i45);
        if (r53) {
          B8.setVisible(i45, n91);
          if (!o42) {
            No(i45, i45.endpoints[0], n91);
            No(i45, i45.endpoints[1], n91);
          }
        }
      }
    } }, { key: "relayoutPanZoom", value: function e78() {
      this.panZoom.relayout(this._layout._getExtents());
    } }, { key: "_configureDirectRender", value: function e78() {
      var t61 = this;
      h5(this.containerElement, _9);
      try {
        this._directRenderResizeObserver = new ResizeObserver(function(e79) {
          t61.relayoutPanZoom();
          t61.fire(f22);
        });
        this._directRenderResizeObserver.observe(this.containerElement);
      } catch (e79) {
        Q("WARN: Resize observer for direct rendering mode could not be attached. Not fatal.");
      }
    } }, { key: "_createLayout", value: function e78(t61) {
      var n91 = this;
      var o42 = { container: this.containerElement, options: t61.options || {}, toolkit: this.toolkitInstance, adapter: new s19(this) };
      if (!o42.options.locationFunction) {
        o42.options.locationFunction = function(e79) {
          return { x: r2(e79.data, n91._modelLeftAttribute), y: r2(e79.data, n91._modelTopAttribute) };
        };
      }
      return n66.get(t61.type, o42);
    } }, { key: "_createGroupLayout", value: function e78(t61, n91) {
      var o42 = this;
      var i45 = this._getGroupDragArea(n91);
      if (i45 == null) {
        i45 = this.jsplumb.getManagedElement(n91.id);
      }
      var r53 = { container: i45, options: t61.options || {}, toolkit: this.toolkitInstance, adapter: new l16(n91, this) };
      if (!r53.options.locationFunction) {
        r53.options.locationFunction = function(e79) {
          return { x: r2(e79.data, o42._modelLeftAttribute), y: r2(e79.data, o42._modelTopAttribute) };
        };
      }
      return n66.get(t61.type, r53);
    } }, { key: "_loadExistingData", value: function e78(t61) {
      var n91 = this;
      var o42, i45, r53, a48, s40;
      var l48 = false;
      var u52 = function e79(t62) {
        var o43 = n91.dataSource.getAllEdgesFor(t62);
        for (s40 = 0; s40 < o43.length; s40++) {
          var i46 = p12(o43[s40].source);
          if (i46 === t62) {
            n91._enqueueEdge(o43[s40], false);
          }
        }
      };
      for (o42 = 0, r53 = this.dataSource.getGroupCount(); o42 < r53; o42++) {
        a48 = this.dataSource.getGroupAt(o42);
        if (this.objectFilter(a48)) {
          this._doRenderGroup(a48);
          u52(a48);
          l48 = true;
        }
      }
      for (o42 = 0, r53 = this.dataSource.getNodeCount(); o42 < r53; o42++) {
        i45 = this.dataSource.getNodeAt(o42);
        if (this.objectFilter(i45)) {
          this._doRenderNode(i45);
          u52(i45);
          l48 = true;
        }
      }
      this._flushUnrenderedEdges();
      return l48;
    } }, { key: "fireNodeAdded", value: function e78(t61) {
      this.fire(C7, t61);
    } }, { key: "createRenderer", value: function e78(t61, n91, o42) {
      var i45 = this;
      return function(e79, r53, a48, s40, l48) {
        n91(r53);
        var u52 = o42(r53), d32 = r53, p49;
        if (i45.enhancedView) {
          d32 = u2({}, s40 ? s40.parameters || {} : {});
          u2(d32, r53);
          var c47 = {};
          for (p49 in d32) {
            if (d32.hasOwnProperty(p49)) {
              if (d32[p49] != null) {
                if (d32[p49].constructor == Function)
                  c47[p49] = d32[p49](r53);
                else
                  c47[p49] = d32[p49];
              }
            }
          }
          d32 = c47;
        }
        if (s40) {
          var f45 = s40.templateId || "jtk-template-" + u52;
          if (i45._useModelForSizes) {
            var g31 = i45._resolveInitialVertexSize(e79, s40);
            d32[i45._modelWidthAttribute] = g31.w;
            d32[i45._modelHeightAttribute] = g31.h;
          }
          i45.templateRenderer.render(f45, d32, i45.dataSource, t61, i45, s40, e79, a48, l48);
        }
      };
    } }, { key: "_handleClickOrTap", value: function e78(t61, n91, o42) {
      var i45 = this.getModelObjectFromElement(t61);
      if (i45 != null) {
        var r53 = f14(i45) ? this.getNodeDefinition(i45) : y10(i45) ? this.getGroupDefinition(i45) : b11(i45) ? this.getPortDefinition(i45) : null;
        if (r53 && r53.events && r53.events[o42]) {
          r53.events[o42]({ el: t61, obj: i45, e: n91, toolkit: this.dataSource, renderer: this });
        }
      }
    } }, { key: "_handleEndpointClick", value: function e78(t61, n91, o42) {
      var i45 = this.jsplumb.getModelObjectFromEndpoint(t61);
      if (i45 != null) {
        if (t61.parameters.portType != null) {
          var r53 = this.view.getPortDefinition(t61.parameters.portType);
          if (r53 && r53.events && r53.events[o42]) {
            r53.events[o42]({ el: t61, obj: i45, e: n91, toolkit: this.dataSource, renderer: this });
          }
        } else {
          if (b11(i45)) {
            var a48 = this.getPortDefinition(i45);
            if (a48 && a48.events && a48.events[o42]) {
              a48.events[o42]({ el: t61, obj: i45, e: n91, toolkit: this.dataSource, renderer: this });
            }
          }
        }
      }
    } }, { key: "_bindToJsPlumb", value: function e78() {
      var t61 = this;
      this.jsplumb.bind(f11, function(e79) {
        if (t61.dragOptions.addHelperClasses !== false) {
          h5(t61.containerElement, la);
        }
      });
      this.jsplumb.bind(h9, function(e79) {
        if (t61.dragOptions.addHelperClasses !== false) {
          y3(t61.containerElement, la);
        }
      });
      this.jsplumb.bind(o16, function(e79) {
        var n91 = t61.jsplumb.getModelObjectFromEndpoint(e79.newEndpoint);
        t61._whileIgnoringToolkitEvents(function() {
          t61.dataSource.edgeMoved(e79.connection.edge, n91, e79.index);
        });
      });
      this.jsplumb.bind(a16, function(e79) {
        var n91 = e79.connection.edge;
        t61._whileIgnoringToolkitEvents(function() {
          t61.dataSource.removeEdge(n91);
        });
      });
      this.jsplumb.bind(g11, function(e79) {
        var n91 = t61.getModelObjectFromElement(e79.el);
        if (n91 != null && (f14(n91) || y10(n91))) {
          var o42 = e79.sourceGroup == null ? null : t61.dataSource.getGroup(e79.sourceGroup.id);
          var i45 = t61.dataSource.getGroup(e79.group.id);
          if (i45) {
            t61.dataSource.addToGroup(n91, i45, o42, e79.pos, t61);
          }
        }
      });
      this.jsplumb.bind(m16, function(e79) {
        var n91 = t61.getModelObjectFromElement(e79.el);
        if (n91 != null && (f14(n91) || y10(n91))) {
          var o42 = e79.targetGroup == null ? null : t61.dataSource.getGroup(e79.targetGroup.id);
          t61.dataSource.removeFromGroup(n91, false, o42, t61);
        }
      });
      this.jsplumb.bind(h16, function(e79) {
        var n91 = t61.getModelObjectFromElement(e79.child.el);
        if (n91 != null && (f14(n91) || y10(n91))) {
          t61.dataSource.removeFromGroup(n91, false, null, t61);
        }
      });
      this.jsplumb.bind(p15, function(e79) {
        var n91 = e79.group.uiGroup == null ? t61._layout : t61._$_layoutMap.get(e79.group.uiGroup.id);
        var o42 = t61.jsplumb.getSize(e79.group.el);
        n91.setSize(e79.group.id, o42);
        if (e79.group.group) {
          var i45 = t61.toolkitInstance.getGroup(e79.group.group.id);
          if (i45 != null) {
            var r53 = t61.view.getGroupDefinition(t61.dataSource.getNodeType(i45.data));
            t61._autoSizeAGroup(i45, r53, null, null, false);
          }
        }
        if (t61._$_magnetizeProfile.afterGroupCollapse === true) {
          if (e79.group.uiGroup == null) {
            t61.gather(e79.group.id);
          }
        }
        var a48 = t61.dataSource.getGroup(e79.group.id);
        if (a48) {
          t61.fire(p15, { group: a48, uigroup: e79.group, renderer: t61 });
        }
      });
      this.jsplumb.bind(i12, function(e79) {
        var n91 = e79.group.uiGroup == null ? t61._layout : t61._$_layoutMap.get(e79.group.uiGroup.id);
        var o42 = t61.jsplumb.getSize(e79.group.el);
        n91.setSize(e79.group.id, o42);
        var i45 = t61.toolkitInstance.getGroup(e79.group.id);
        if (i45 != null) {
          var r53 = t61.view.getGroupDefinition(t61.dataSource.getNodeType(i45.data));
          t61._autoSizeAGroup(i45, r53, null, null, false);
        }
        if (t61._$_magnetizeProfile.afterGroupExpand !== false) {
          if (e79.group.uiGroup == null) {
            t61.magnetize(e79.group.id);
          }
        }
        var a48 = t61.dataSource.getGroup(e79.group.id);
        if (a48) {
          t61.fire(i12, { group: a48, uigroup: e79.group, renderer: t61 });
        }
      });
      j2([Q2, R2, Y3, S5, W3, V4, U2, T2, X3], function(e79) {
        t61.jsplumb.bind(e79, function(n91, o42) {
          if (n91.edge) {
            var i45 = n91.edge;
            var r53 = t61.view.getEdgeDefinition(t61.dataSource.getEdgeType(i45.data));
            var a48 = e79.split(":")[1];
            if (r53 && r53.events && r53.events[a48]) {
              r53.events[a48]({ edge: i45, e: o42, toolkit: t61.dataSource, renderer: t61, connection: n91 });
            }
          }
        });
      });
      j2([[y7, e10], [H2, l9], [A5, a9], [z4, n6], [B4, i8], [C3, d8], [D4, m10], [E4, u11], [F4, t4], [G3, o11]], function(e79) {
        var n91 = b(e79, 2), o42 = n91[0], i45 = n91[1];
        t61.jsplumb.bind(o42, function(e80, n92) {
          t61._handleClickOrTap(e80, n92, i45);
        });
      });
      j2([[I3, e10], [J2, n6]], function(e79) {
        var n91 = b(e79, 2), o42 = n91[0], i45 = n91[1];
        t61.jsplumb.bind(o42, function(e80, n92) {
          t61._handleEndpointClick(e80, n92, i45);
        });
      });
    } }, { key: "_whileIgnoringToolkitEvents", value: function e78(t61) {
      this._ignoreToolkitEvents = true;
      try {
        t61();
      } catch (e79) {
        Q("An error occurred while ignoring Toolkit events", e79);
      } finally {
        this._ignoreToolkitEvents = false;
      }
    } }, { key: "_updateMovedElements", value: function e78(t61) {
      for (var n91 in t61) {
        var o42 = this.jsplumb.getManagedElement(n91);
        i7(o42, t61[n91].current);
        this.repaint(o42);
        var i45 = this.toolkitInstance.getVertex(n91);
        var r53 = { el: o42, vertex: i45, e: event, type: i45.objectType, renderer: this, pos: t61[n91].current, originalPosition: t61[n91].original };
        if (this._$_storePositionsInModel !== false) {
          var a48 = u2({}, i45.data);
          this.storePositionInModel({ obj: i45, id: n91, leftAttribute: this._modelLeftAttribute, topAttribute: this._modelTopAttribute });
          var s40 = {};
          s40[this._modelLeftAttribute] = t61[n91].current.x;
          s40[this._modelTopAttribute] = t61[n91].current.y;
          if (f14(i45)) {
            this.toolkitInstance.fire(h14, { vertex: i45, updates: s40, originalData: a48, reason: Pe }, null);
          } else if (y10(i45)) {
            this.toolkitInstance.fire(g10, { vertex: i45, updates: s40, originalData: a48, reason: Pe }, null);
          }
        }
        if (f14(i45)) {
          this.fire(I8, r53);
        } else if (y10(i45)) {
          this.fire(q5, r53);
        }
      }
    } }, { key: "_trackGroupSizeChanges", value: function t61(n91, o42) {
      for (var i45 in n91) {
        var r53 = n91[i45];
        if (r53.originalGroupSize.w !== r53.newGroupSize.w || r53.originalGroupSize.h !== r53.newGroupSize.h) {
          if (this._useModelForSizes) {
            var a48, s40;
            var l48 = (a48 = {}, o(a48, this._modelWidthAttribute, r53.group.data[this._modelWidthAttribute]), o(a48, this._modelHeightAttribute, r53.group.data[this._modelHeightAttribute]), a48);
            var u52 = (s40 = {}, o(s40, this._modelWidthAttribute, r53.newGroupSize.w), o(s40, this._modelHeightAttribute, r53.newGroupSize.h), s40);
            r53.group.data[this._modelWidthAttribute] = r53.newGroupSize.w;
            r53.group.data[this._modelHeightAttribute] = r53.newGroupSize.h;
            this.toolkitInstance.fire(g10, { vertex: r53.group, updates: u52, originalData: l48, reason: xe }, null);
          }
          if (o42) {
            this._setGroupElementSize(r53.group, r53.newGroupSize);
          }
          this.toolkitInstance.fire(B7, { group: r53.group, originalGroupSize: r53.originalGroupSize, newGroupSize: r53.newGroupSize, source: this });
        }
      }
    } }, { key: "_setGroupElementSize", value: function e78(t61, n91) {
      var o42 = this._getGroupDragArea(t61);
      if (o42) {
        s7(o42, n91.w, n91.h);
      }
    } }, { key: "_setMagnetizedPosition", value: function e78(t61, n91, o42, i45, r53) {
      var a48 = u2({}, this._layout.getPosition(t61));
      var s40 = {};
      s40[t61] = { original: a48, current: { x: n91, y: o42 } };
      u2(s40, r53.setMagnetizedPosition(t61, n91, o42, i45, this._$_gridProfile.grid));
      if (s40[t61].current.x === s40[t61].original.x && s40[t61].current.y === s40[t61].original.y) {
        delete s40[t61];
      }
      if (i45 === true) {
        i7(this.jsplumb.getManagedElement(t61), { x: n91, y: o42 });
      } else {
        s40[t61].original = a48;
      }
      this._updateMovedElements(s40);
      return s40;
    } }, { key: "_setMagnetizedPositions", value: function e78(t61, n91, o42) {
      var i45 = this;
      var r53 = {};
      if (t61.length > 0) {
        j2(t61, function(e79) {
          u2(r53, i45._setMagnetizedPosition(e79.id, e79.x, e79.y, !i45._$_magnetizeProfile.repositionDraggedElement, o42));
        });
      }
      return r53;
    } }, { key: "_setDirectPosition", value: function e78(t61, n91, o42, i45, r53) {
      var a48 = r53.setPosition(t61, n91, o42, i45);
      this._updateMovedElements(a48);
    } }, { key: "_ensureTemplate", value: function e78(t61) {
      if (t61 != null && t61.template && t61.templateId == null) {
        if (this.templateRenderer.addTemplate) {
          t61.templateId = $();
          this.templateRenderer.addTemplate(t61.templateId, t61.template);
        }
      }
      return t61;
    } }, { key: "registerTag", value: function e78(t61, n91) {
      if (this.templateRenderer.recado != null) {
        this.templateRenderer.recado.registerTag(t61, n91);
      }
    } }, { key: "_setupShapeDefs", value: function e78() {
      this._shapeDefsSvgElement = this._$_shapeLibrary.getSvgDefsElement();
      this._shapeDefsSvgElement.style.position = "absolute";
      this._shapeDefsSvgElement.style.width = "1px";
      this._shapeDefsSvgElement.style.height = "1px";
      this._shapeDefsSvgElement.style.left = "-10000px";
      this._shapeDefsSvgElement.style.top = "-10000px";
      this.getContainer().appendChild(this._shapeDefsSvgElement);
    } }, { key: "getGroupDefinition", value: function e78(t61) {
      return this._ensureTemplate(this.view.getGroupDefinition(this.dataSource.getNodeType(t61.data)));
    } }, { key: "getPortDefinition", value: function e78(t61) {
      return this._ensureTemplate(this.view.getPortDefinition(this.dataSource.getPortType(t61.data)));
    } }, { key: "getNodeDefinition", value: function e78(t61) {
      return this._ensureTemplate(this.view.getNodeDefinition(this.dataSource.getNodeType(t61.data)));
    } }, { key: "_getModelInfoForDragElement", value: function e78(t61, n91) {
      var o42 = null;
      var i45 = null;
      var r53 = null;
      var a48 = u6(t61, n3(f7), this.jsplumb.getContainer(), true);
      var s40 = this.getModelObjectFromElement(a48, false);
      if (s40 != null) {
        var l48 = b11(s40) ? s40.getParent() : s40;
        var u52 = {};
        if (!b11(s40)) {
          var d32 = n91 ? [U5, K5] : [V9, Q5];
          r53 = t61.getAttribute(d32[0]) || t61.getAttribute(d32[1]) || t61.getAttribute(B9) || t61.getAttribute(F12);
          if (r53 != null) {
            s40 = s40.getPort(r53) || s40;
          }
        }
        if (b11(s40)) {
          r53 = s40.id;
          i45 = this.toolkitInstance.getPortType(s40);
        }
        var p49 = n91 ? W8 : X6;
        o42 = t61.getAttribute(p49) || t61.getAttribute(G7);
        if (o42 != null) {
          u52 = this.view.getPortDefinition(o42);
        } else {
          u52 = this.view.getTypeDefinition(s40);
        }
        return { obj: s40, vertex: l48, typeDef: u52, portType: o42 || i45, portId: r53 };
      } else {
        return null;
      }
    } }, { key: "_setSelectors", value: function e78() {
      var t61 = this;
      var n91 = function e79(n92, o43, i45) {
        var r53 = t61._getModelInfoForDragElement(n92, i45);
        if (r53 == null) {
          return false;
        } else {
          if (r53.obj != null && r53.typeDef.maxConnections != null && r53.typeDef.maxConnections !== -1) {
            return r53.obj.getEdges().length < r53.typeDef.maxConnections;
          } else {
            return true;
          }
        }
      };
      var o42 = function e79(n92, o43, i45, r53) {
        var a48 = Bo(new a31(n92));
        var s40 = a48.edgeType;
        var l48 = { edgeType: s40 };
        var u52 = p2({ edgeType: s40 });
        var d32 = t61._getModelInfoForDragElement(n92, o43);
        if (d32 != null) {
          var p49 = d32.obj || d32.vertex;
          l48.portId = d32.portId;
          l48.portType = d32.portType;
          l48.vertexId = d32.vertex.id;
          u2(u52, d32.typeDef);
          if (d32.typeDef.anchorPositionFinder != null) {
            var c47 = dt(r53, n92, t61.jsplumb.currentZoom);
            var f45 = d32.typeDef.anchorPositionFinder(n92, c47, d32.vertex, d32.typeDef, r53);
            if (f45 != null) {
              u52.anchor = f45;
              if (f45.portId != null) {
                l48.portId = f45.portId;
              }
            }
          }
          if (p49 != null) {
            u52.data = p49.data;
          }
        }
        u52.parameters = p2(l48);
        if (a48.anchor) {
          u52.anchor = a48.anchor;
        }
        return u52;
      };
      this.jsplumb.addSourceSelector(j9(I10, e11), { parameterExtractor: function e79(t62, n92, i45) {
        return o42(n92, true, false, i45);
      }, parentSelector: n3(B9, U5, V9), canAcceptNewConnection: function e79(t62, o43) {
        return n91(t62, o43, true);
      } });
      this.jsplumb.addTargetSelector(j9(J4, e11), { parameterExtractor: function e79(t62, n92, i45) {
        return o42(t62, false, true, i45);
      }, parentSelector: n3(B9, U5, V9), canAcceptNewConnection: function e79(t62, o43) {
        return n91(t62, o43, false);
      } });
    } }, { key: "_selectEdges", value: function e78(t61, n91) {
      var o42 = u2({}, t61);
      o42.source = this.getObjectInfo(t61.source).obj;
      o42.target = this.getObjectInfo(t61.target).obj;
      o42.element = this.getObjectInfo(t61.element).obj;
      var i45 = this.toolkitInstance[n91](o42), r53 = this.getConnectionsForEdges(i45);
      return this.jsplumb.select({ connections: r53 });
    } }, { key: "_classOperation", value: function e78(t61, n91, o42) {
      var i45 = this;
      var r53 = function e79(t62) {
        var r54 = i45.getObjectInfo(t62);
        if (r54.el) {
          o42(r54.el, n91);
        } else if (Ho(t62)) {
          o42(t62, n91);
        }
      };
      if (t61 != null) {
        if (p4(t61)) {
          o42(t61, n91);
        } else if (m5(t61)) {
          j2(t61, function(e79) {
            return r53(e79);
          });
        } else {
          r53(t61);
        }
      }
    } }, { key: "_append", value: function e78(t61, n91) {
      this.canvasElement.appendChild(t61);
      this.panZoom.add(t61, n91);
    } }, { key: "_getGroupDragArea", value: function e78(t61) {
      var n91 = this.jsplumb.getGroup(t61.id);
      return n91 === null || n91 === void 0 ? void 0 : n91.contentArea;
    } }]);
    return I17;
  }(f17);
  o(Wo, "type", "Surface");
  var Uo = {};
  var qo = { get: function e72(t61) {
    var n91 = Uo[t61];
    if (!n91) {
      throw { message: "JsPlumb: unknown surface plugin '" + t61 + "'" };
    } else {
      return new n91();
    }
  }, register: function e73(t61, n91) {
    Uo[t61] = n91;
  } };

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui-edge-types/edge-type-picker.js
  var u40 = "div";
  var d29 = "data-value";
  var h30 = "jtk-edge-type-picker";
  var v36 = "jtk-edge-type-picker-selected";
  var m38 = "jtk-edge-type-picker-source";
  var f37 = "jtk-edge-type-picker-target";
  var g28 = 5;
  var j21 = function() {
    function j26(e78, s40, a48, o42, c47) {
      var l48 = this;
      t(this, j26);
      this.toolkit = e78;
      this.container = s40;
      this.mappings = a48;
      this.currentValue = o42;
      this.onSelect = c47;
      o(this, "eventManager", void 0);
      o(this, "jsplumb", void 0);
      o(this, "entryMap", /* @__PURE__ */ new Map());
      this.eventManager = new oe();
      this.eventManager.on(s40, l9, u40, function(e79) {
        var t61 = e79.target.getAttribute(d29);
        l48.select(t61);
      });
      this.container.classList.add(h30);
      this.eventManager.on(window, "resize", function() {
        l48.jsplumb && l48.jsplumb.repaintEverything();
      });
    }
    n(j26, [{ key: "render", value: function e78(t61) {
      var r53 = this;
      this.container.innerHTML = "";
      var i45 = this.mappings.find(function(e79) {
        return e79.property === t61;
      });
      this.jsplumb = new bt(this.toolkit, { container: this.container }, {});
      this.jsplumb.bind(Q2, function(e79) {
        r53.select(e79.data.id);
      });
      if (i45 != null) {
        for (var n91 in i45.mappings) {
          var c47 = i45.mappings[n91];
          var h35 = document.createElement(u40);
          h35.setAttribute(d29, n91);
          if (n91 === this.currentValue) {
            h35.classList.add(v36);
          }
          var j27 = document.createElement(u40);
          j27.classList.add(m38);
          j27.style.left = "".concat(g28, "px");
          h35.appendChild(j27);
          var y34 = document.createElement(u40);
          j27.classList.add(f37);
          y34.style.right = "".concat(g28, "px");
          h35.appendChild(y34);
          var b28 = this.jsplumb.connect({ source: j27, target: y34, connector: i27, overlays: c47.overlays, cssClass: c47.cssClass, endpoint: o19.type, anchor: a25.Center, data: { id: n91 } }, null, false);
          this.entryMap.set(n91, { c: b28, el: h35 });
          this.container.appendChild(h35);
        }
      }
    } }, { key: "select", value: function e78(t61) {
      var r53 = this.entryMap.get(t61);
      if (r53) {
        this.currentValue = t61;
        r53.el.setAttribute(d29, t61);
        var i45 = this.container.querySelector(a5(v36));
        i45 && i45.classList.remove(v36);
        r53.el.classList.add(v36);
        this.onSelect && this.onSelect(t61);
      }
    } }]);
    return j26;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui-edge-types/index.js
  function r46(r53, t61, n91, p49) {
    return { template: '<div data-value="{{'.concat(t61, '}}"/>'), rendered: function d32(o42, c47) {
      var i45 = c47[t61] || "";
      new j21(r53, o42, n91, i45, p49).render(t61);
    } };
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/templates-2/defs.js
  var a41 = "context";
  var r47 = "lookup";
  var v37 = "default";
  var t55 = "element";
  var e74 = "text";
  var l43 = "tmpl";
  var o35 = "each";
  var u41 = "if";
  var c41 = "root";
  var p40 = "class";
  var s36 = "style";
  var x22 = "$value";
  var f38 = "$key";
  var i39 = "attribute";

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/templates-2/parser.js
  function t56(n91, r53) {
    if (n91 == null) {
      return n91;
    } else {
      var t61 = n91.replace(/\n/g, "").replace(/^[\s]+</, "<").replace("/>", ">").replace(/>[\s]+$/, ">").split(/^<|>$/)[1].split(r53);
      return u3(t61);
    }
  }
  function u42(e78) {
    if (e78 == null || e78.length === 0) {
      return false;
    } else {
      for (var n91 = e78.length - 1; n91 > -1; n91--) {
        if (e78[n91].type === "each")
          return true;
      }
    }
    return false;
  }
  function i40(e78, r53, t61, l48, u52) {
    var i45 = $(), s40 = { w: r53, expressions: [], id: i45 };
    t61.bindings[e78] = s40;
    r53.replace(/\{\{([^\}]*)\}\}/g, function(e79, n91, r54, t62) {
      s40.expressions.push([e79, n91]);
      return "";
    });
    return i45;
  }
  function s37(e78, n91, r53, t61, l48) {
    r53.atts[e78] = n91;
    i40(e78, n91, r53);
  }
  function a42(e78, n91) {
    var l48 = t56(e78, n91.attributesRe), u52 = { el: G(l48[0]), atts: {}, bindings: {} };
    var i45 = function e79(n92, r53) {
      var t61 = n92.match(/([^=]+)=['"](.*)['"]/);
      if (t61 == null && r53 == null) {
        u52.atts[n92] = "";
      } else if (t61 == null) {
        s37(n92, "", u52);
      } else {
        s37(t61[1], t61[2], u52);
      }
      return t61;
    };
    for (var a48 = 1; a48 < l48.length; a48++) {
      var f45 = G(l48[a48]);
      if (f45 != null && f45.length > 0) {
        i45(f45);
      }
    }
    return u52;
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/templates-2/expressions.js
  var t57 = ["*", "-", "+", "/", "%"];
  var n80 = ["==", ">", "<", ">=", "<=", "===", "!=", "!==="];
  var u43 = /([(])|([)])|(===)|(==)|(!==)|(!=)|(!===)|(<=)|(>=)|(<)|(>)|(\+)|(-)|(\*)|(\/)|(\s+)|([0-9\.]+)|(\$data\[[0-9]+\])|(\$value\[[0-9]+\])|(\$key)|(\$value)|('[^']+')|([#a-zA-Z\$]+[0-9a-zA-Z_\$\.]*)/g;
  var a43 = "num";
  var l44 = "group";
  var f39 = "var";
  var i41 = "op";
  var c42 = "comp";
  var s38 = "exp";
  var v38 = "string";
  var o36 = "array";
  var p41 = "key";
  var h31 = "value";
  function m39(r53) {
    return r53[r53.length - 1];
  }
  function g29(r53) {
    return r53.t === l44;
  }
  function $7(r53) {
    return r53.t === f39;
  }
  function d30(r53) {
    return r53.t === s38;
  }
  function x23(r53) {
    return r53.t === a43;
  }
  function y29(r53) {
    return r53.t === v38;
  }
  function z13(r53) {
    return r53.t === o36;
  }
  function A15(r53) {
    return r53.t === p41;
  }
  function O17(r53) {
    return r53.t === h31;
  }
  function Z7(r53) {
    var e78 = r53.match(u43);
    var g31, $10 = [{ t: "root", c: [], e: r53, v: null }];
    for (var d32 = 0; d32 < e78.length; d32++) {
      g31 = e78[d32];
      var x27 = m39($10);
      if (g31 === "(") {
        var y34 = { t: l44, c: [], v: null };
        x27.c.push(y34);
        $10.push(y34);
      } else if (g31 === ")") {
        $10.pop();
      } else if (g31.match(/\$value\[[0-9]+\]/)) {
        var z16 = parseInt(g31.substring(7, g31.length - 1), 10);
        x27.c.push({ t: o36, v: g31, index: z16 });
      } else if (g31.match(/\$key/)) {
        x27.c.push({ t: p41, v: null });
      } else if (g31.match(/\$value/)) {
        x27.c.push({ t: h31, v: null });
      } else if (g31.match(/^#/)) {
        x27.c.push({ t: s38, v: g31.substring(1) });
      } else if (g31.match(/'[a-zA-Z_\$\.]+'/)) {
        x27.c.push({ t: v38, v: g31.replace(/'/g, "") });
      } else if (g31.match(/[a-zA-Z_\$\.]+/)) {
        x27.c.push({ t: f39, v: g31 });
      } else if (g31.match(/[0-9\.]/)) {
        var A19 = g31.indexOf(".") !== -1 ? parseFloat(g31) : parseInt(g31, 10);
        x27.c.push({ t: a43, v: A19 });
      } else if (t57.indexOf(g31) !== -1) {
        x27.c.push({ t: i41, v: g31 });
      } else if (n80.indexOf(g31) !== -1) {
        x27.c.push({ t: c42, v: g31 });
      }
    }
    return $10[0];
  }
  function k18(r53) {
    var e78 = null, t61 = { t: "root", c: [], v: "" }, u52 = { t: "root", c: [], v: "" }, a48 = t61.c;
    for (var l48 = 0; l48 < r53.c.length; l48++) {
      if (n80.indexOf(r53.c[l48].v) !== -1) {
        if (e78 != null) {
          throw new Error("Cannot parse expression; more than one comparator.");
        }
        e78 = r53.c[l48].v;
        a48 = u52.c;
      } else {
        a48.push(r53.c[l48]);
      }
    }
    var f45 = function r54(e79) {
      if (g29(e79)) {
        e79.c = i45(e79);
      }
      return e79;
    };
    var i45 = function r54(e79) {
      var t62 = e79.c;
      if (t62.length === 0) {
        return [];
      }
      var n91 = [], u53 = f45(t62[0]);
      if (t62.length === 1) {
        return [u53];
      } else if (t62.length === 3) {
        return [u53, t62[1], f45(t62[2])];
      } else {
        var a49 = u53, l49 = null, i46;
        for (var c47 = 1; c47 < t62.length; c47 += 2) {
          i46 = t62[c47];
          var s40 = i46.v === "+" || i46.v === "-" ? 1 : 2;
          if (s40 === 2) {
            if (l49 == null) {
              l49 = { t: "group", c: [a49, i46], v: null };
              n91.push(l49);
            } else {
              var v41;
              (v41 = l49.c).push.apply(v41, [a49, i46]);
            }
          } else {
            if (l49 != null) {
              l49.c.push(a49);
            } else {
              n91.push(a49);
            }
            l49 = null;
            n91.push(i46);
          }
          a49 = f45(t62[c47 + 1]);
        }
        if (l49 != null) {
          l49.c.push(a49);
        } else {
          n91.push(a49);
        }
        return n91;
      }
    };
    t61.c = i45(t61);
    u52.c = i45(u52);
    return { left: t61, right: u52, comparator: e78 };
  }
  function _11(r53) {
    var e78 = Z7(r53);
    var t61 = k18(e78);
    return t61;
  }
  function b24(r53, e78, t61) {
    var n91 = w19(r53.left.c, e78, t61);
    if (r53.comparator == null) {
      return n91;
    } else {
      var u52 = w19(r53.right.c, e78, t61);
      if (r53.comparator === "==") {
        return n91 == u52;
      } else if (r53.comparator === "===") {
        return n91 === u52;
      } else if (r53.comparator === ">") {
        return n91 > u52;
      } else if (r53.comparator === ">=") {
        return n91 >= u52;
      } else if (r53.comparator === "<") {
        return n91 < u52;
      } else if (r53.comparator === "<=") {
        return n91 <= u52;
      } else if (r53.comparator === "!=") {
        return n91 != u52;
      } else if (r53.comparator === "!==") {
        return n91 !== u52;
      }
    }
  }
  function w19(t61, n91, u52) {
    var a48 = t61.map(function(t62) {
      if (g29(t62)) {
        return w19(t62.c, n91, u52);
      } else if ($7(t62)) {
        return n91(t62.v);
      } else if (d30(t62)) {
        return u52(t62.v);
      } else if (z13(t62)) {
        var a49 = n91(x22);
        return a49[t62.index];
      } else if (A15(t62)) {
        return n91(f38);
      } else if (O17(t62)) {
        return n91(x22);
      } else if (x23(t62) || y29(t62)) {
        return t62.v;
      } else {
        return t62;
      }
    });
    var l48 = a48[0];
    var f45;
    for (var i45 = 1; i45 < a48.length; i45 += 2) {
      f45 = a48[i45].v;
      var c47 = a48[i45 + 1];
      if (f45 === "+") {
        l48 += c47;
      } else if (f45 === "-") {
        l48 -= c47;
      } else if (f45 === "*") {
        l48 *= c47;
      } else if (f45 === "/") {
        l48 /= c47;
      }
    }
    return typeof l48 === "undefined" ? "" : l48;
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/templates-2/abstract-entry.js
  var r48 = function() {
    function r53(i45) {
      t(this, r53);
      this.instance = i45;
      o(this, "type", void 0);
      o(this, "tag", void 0);
      o(this, "remove", void 0);
      o(this, "uuid", void 0);
      o(this, "children", []);
      o(this, "elements", []);
      o(this, "bindings", void 0);
      o(this, "context", void 0);
      o(this, "compiledBindings", void 0);
      this.uuid = $();
      i45.entries[this.uuid] = this;
      this.compiledBindings = {};
    }
    n(r53, [{ key: "_processBindings", value: function i45(s40) {
      for (var e78 in s40) {
        var r54 = s40[e78];
        if (r54.expressions.length > 0) {
          this.compiledBindings[e78] = { id: $(), name: e78, expressions: r54.expressions.map(function(i46) {
            var s41 = b(i46, 2), e79 = s41[0], o42 = s41[1];
            return { source: e79, expression: _11(o42) };
          }) };
        }
      }
    } }]);
    return r53;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/templates-2/text-entry.js
  var n81 = function(a48) {
    a(u52, a48);
    var n91 = s(u52);
    function u52(e78, r53) {
      var a49;
      t(this, u52);
      a49 = n91.call(this, r53);
      o(l(a49), "type", "text");
      o(l(a49), "value", void 0);
      a49.value = e78.value;
      a49.bindings = {};
      var o42 = { id: $(), w: e78.value, expressions: [] };
      e78.value.replace(/\{\{([^\}]*)\}\}/g, function(e79, r54, s40, i45) {
        o42.expressions.push([e79, r54]);
        return "";
      });
      a49._processBindings(o({}, u52.TEXT_BINDING_NAME, o42));
      return a49;
    }
    return u52;
  }(r48);
  o(n81, "TEXT_BINDING_NAME", "__element");

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/templates-2/comment-entry.js
  var n82 = function(i45) {
    a(o42, i45);
    var n91 = s(o42);
    function o42(r53, t61) {
      var i46;
      t(this, o42);
      i46 = n91.call(this, t61);
      o(l(i46), "type", "comment");
      o(l(i46), "comment", void 0);
      i46.comment = r53;
      return i46;
    }
    return o42;
  }(r48);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/templates-2/element-entry.js
  var n83 = function(i45) {
    a(o42, i45);
    var n91 = s(o42);
    function o42(e78, s40, i46, p49, c47) {
      var m44;
      t(this, o42);
      m44 = n91.call(this, s40);
      m44.templateResolver = i46;
      m44.stack = p49;
      m44.parseIdStack = c47;
      o(l(m44), "type", t55);
      o(l(m44), "namespace", void 0);
      o(l(m44), "atts", void 0);
      o(l(m44), "custom", void 0);
      var v41 = e78.el.split(":");
      m44.tag = e78.el;
      if (v41.length === 2) {
        m44.namespace = v41[0];
      }
      m44.atts = e78.atts;
      m44._processBindings(e78.bindings);
      m44.remove = false;
      return m44;
    }
    return o42;
  }(r48);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/templates-2/elements.js
  var e75 = {};
  var n84 = { construct: function n85(r53, t61, o42, u52, s40, c47) {
    var i45 = e75[r53];
    if (!i45) {
      throw { message: "Recado: unknown element '" + r53 + "'" };
    } else {
      return new i45(t61, o42, u52, s40, c47);
    }
  }, register: function n86(r53, t61) {
    e75[r53] = t61;
  }, exists: function n87(r53) {
    return e75[r53] != null;
  } };

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/templates-2/each-entry.js
  var p42 = function(n91) {
    a(l48, n91);
    var o42 = s(l48);
    function l48(e78, r53, n92, p49, u52) {
      var c47;
      t(this, l48);
      c47 = o42.call(this, e78, r53, n92, p49, u52);
      o(l(c47), "key", void 0);
      o(l(c47), "type", o35);
      c47.context = e78.atts["in"];
      c47.key = e78.atts["key"];
      c47.tag = l48.tag;
      return c47;
    }
    return l48;
  }(n83);
  o(p42, "tag", "r-each");
  n84.register(p42.tag, p42);
  function u44(e78, r53, t61) {
    e78.entryMap[r53] = e78.entryMap[r53] || [];
    e78.entryMap[r53].push(t61);
  }
  function c43(e78, r53, t61, a48) {
    for (var i45 = 0; i45 < r53.children.length; i45++) {
      var n91 = r53.children[i45];
      u44(e78, t61, n91);
    }
    j2(r53.fragment.childNodes, function(e79) {
      return a48.added.push({ el: e79 });
    });
    e78.placeholder.before(r53.fragment);
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/templates-2/custom-tag.js
  var i42 = function() {
    function i45(e78, r53, n91) {
      var l48 = this;
      t(this, i45);
      this.instance = e78;
      this.tagName = r53;
      this.options = n91;
      o(this, "id", void 0);
      o(this, "template", void 0);
      o(this, "rendered", void 0);
      o(this, "updated", void 0);
      o(this, "fragments", {});
      o(this, "defaultableFragmentKeys", void 0);
      o(this, "fragmentKeys", void 0);
      o(this, "parsedTemplates", {});
      this.id = "custom-".concat(r53);
      var h35 = n91.fragments || {};
      this.defaultableFragmentKeys = n91.defaultableFragmentKeys || [];
      this.template = n91.template;
      var u52 = /* @__PURE__ */ new Set();
      for (var f45 in h35) {
        this.fragments[f45] = this.fragments[f45] || {};
        u52.add(f45);
        var o42 = function t61(a48) {
          var s40 = "custom-".concat(r53, "-").concat(f45, "-").concat(a48);
          var i46 = h35[f45][a48];
          e78.addTemplate(s40, i46);
          l48.fragments[f45][a48] = e78.parseAndCache(s40, function(e79) {
            if (e79 === s40) {
              return i46;
            }
          });
        };
        for (var c47 in h35[f45]) {
          o42(c47);
        }
      }
      this.fragmentKeys = Array.from(u52);
      this.fragmentKeys.sort();
      this.parsedTemplates[r7] = this._parseDefault(this.id);
      this.rendered = n91.rendered || function(e79, t61, a48) {
      };
      this.updated = n91.updated || function(e79, t61, a48) {
      };
    }
    n(i45, [{ key: "_parseDefault", value: function e78(t61) {
      var a48 = this;
      return this.instance.parseAndCache(t61, function(e79) {
        if (e79 === t61) {
          return a48.template;
        }
      });
    } }, { key: "extractTemplateData", value: function e78(t61, a48) {
      var r53 = t61.split(":"), i46 = [];
      for (var n91 = 0; n91 < r53.length; n91++) {
        var l48 = a48[r53[n91]];
        if (l48 == null) {
          if (this.defaultableFragmentKeys.indexOf(r53[n91]) !== -1) {
            i46.push(r7);
          } else {
            return null;
          }
        } else {
          i46.push(l48);
        }
      }
      return i46.join(":");
    } }, { key: "getAST", value: function e78(t61) {
      var a48 = this;
      if (t61 == null) {
        return this.parsedTemplates[r7];
      } else {
        var r53 = [];
        var i46 = {};
        this.fragmentKeys.forEach(function(e79) {
          var s40 = a48.extractTemplateData(e79, t61);
          if (s40 != null) {
            i46[e79] = a48.fragments[e79][s40] || [];
            r53.push("".concat(e79, ":").concat(s40));
          }
        });
        if (r53.length > 0) {
          var n91 = r53.join(" ");
          if (this.parsedTemplates[n91] != null) {
            return this.parsedTemplates[n91];
          } else {
            var l48 = this._parseDefault(n91);
            this._replaceAST(l48[0], i46);
            this.parsedTemplates[n91] = l48;
            return l48;
          }
        }
        return this.parsedTemplates[r7];
      }
    } }, { key: "_replaceAST", value: function e78(t61, a48) {
      var s40 = [];
      for (var i46 = 0; i46 < t61.children.length; i46++) {
        if (t61.children[i46].tag === "r-fragment") {
          var n91 = a48[t61.children[i46].atts.key] || [];
          s40.push.apply(s40, h(n91));
        } else {
          s40.push(t61.children[i46]);
          this._replaceAST(t61.children[i46], a48);
        }
      }
      t61.children = s40;
    } }]);
    return i45;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/templates-2/executions.js
  function u45(e78, r53, n91, i45) {
    if (!i45) {
      e78.el.setAttribute(r53, n91);
    } else {
      e78.el.style[r53] = n91;
    }
  }
  function f40(e78, r53) {
    e78.el.nodeValue = r53;
  }
  function a44(r53, n91) {
    var i45 = [];
    for (var s40 = 0; s40 < n91.children.length; s40++) {
      i45.push.apply(i45, h(p43(r53, n91.children[s40])));
    }
    return i45;
  }
  function p43(e78, s40) {
    var t61 = a44(e78, s40);
    if (s40.type === t55) {
      e78.removeElement(s40.el);
      t61.unshift(s40.el);
    } else if (s40.type === e74) {
      e78.removeTextNode(s40.el);
      t61.unshift(s40.el);
    } else if (s40.type === o35) {
      s40.entryMap = {};
    }
    return t61;
  }
  function c44(e78, i45, a48) {
    for (var p49 in e78.bindings) {
      if (p49 !== p40) {
        var c47 = e78.bindings[p49];
        var m44 = c47.binding;
        var v41 = c47.originalValue, d32 = false;
        for (var g31 = 0; g31 < m44.expressions.length; g31++) {
          var y34 = b24(m44.expressions[g31].expression, function(e79) {
            return r2(i45, e79);
          }, function(e79) {
            return a48(e79);
          });
          v41 = v41.replace(m44.expressions[g31].source, y34);
          if (y34 !== c47.results[g31].result) {
            d32 = true;
            c47.results[g31].result = y34;
          }
        }
        if (d32) {
          if (e78.type === t55) {
            if (p49 !== s36) {
              u45(e78, p49, v41, false);
            } else {
              v41.split(";").forEach(function(r53) {
                var n91 = r53.indexOf(":"), i46 = r53.substring(0, n91);
                u45(e78, i46, r53.substring(n91 + 1), true);
              });
            }
          } else if (e78.type === e74) {
            f40(e78, v41);
          }
        }
      }
    }
  }
  function m40() {
    return { added: [], removed: [], elements: [] };
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/templates-2/if-entry.js
  var p44 = function(n91) {
    a(l48, n91);
    var o42 = s(l48);
    function l48(t61, e78, n92, u52, p49) {
      var f45;
      t(this, l48);
      f45 = o42.call(this, t61, e78, n92, u52, p49);
      o(l(f45), "type", "if");
      o(l(f45), "tag", l48.tag);
      o(l(f45), "test", void 0);
      o(l(f45), "expression", void 0);
      f45.test = t61.atts["test"];
      f45.expression = _11(f45.test);
      return f45;
    }
    return l48;
  }(n83);
  o(p44, "tag", "r-if");
  n84.register(p44.tag, p44);
  function f41(t61, e78, r53) {
    t61.resolution = b24(t61.entry.expression, function(t62) {
      return r2(e78, t62);
    }, function(t62) {
      return r53(t62);
    });
    return t61.resolution;
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/templates-2/tmpl-entry.js
  var f42 = function(s40) {
    a(f45, s40);
    var o42 = s(f45);
    function f45(e78, t61, s41, u52, c47) {
      var v41;
      t(this, f45);
      v41 = o42.call(this, e78, t61, s41, u52, c47);
      o(l(v41), "templateId", void 0);
      o(l(v41), "lookup", void 0);
      o(l(v41), "default", void 0);
      v41.context = e78.atts[a41];
      v41.type = l43;
      v41.remove = true;
      if (!e78.atts[r47]) {
        v41.templateId = e78.atts["id"];
        var h35 = u42(u52);
        if (c47.indexOf(v41.templateId) !== -1) {
          if (!h35) {
            throw new TypeError("recursive template call [" + v41.templateId + "]");
          }
        } else {
          var I17 = s41(v41.templateId);
          c47.push(v41.templateId);
          var g31 = v41.instance.parse(I17, s41, null, c47);
          for (var j26 = 0; j26 < g31.length; j26++) {
            g31[j26].context = v41.context;
          }
          v41.children = g31;
          c47.pop();
        }
      } else {
        v41.lookup = e78.atts[r47];
        v41.default = e78.atts[v37] || "";
      }
      return v41;
    }
    return f45;
  }(n83);
  o(f42, "tag", "r-tmpl");
  n84.register(f42.tag, f42);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/templates-2/core.js
  function Z8(e78, r53) {
    if (e78.length != null) {
      for (var t61 = 0; t61 < e78.length; t61++) {
        r53(e78[t61], t61);
      }
    } else {
      for (var n91 in e78) {
        r53(e78[n91], n91);
      }
    }
  }
  var D14 = function() {
    function d32(e78) {
      t(this, d32);
      o(this, "templateResolver", void 0);
      o(this, "defaultTemplate", void 0);
      o(this, "macros", void 0);
      o(this, "entries", void 0);
      o(this, "customTags", {});
      o(this, "cache", /* @__PURE__ */ new Map());
      o(this, "templateCache", /* @__PURE__ */ new Map());
      o(this, "openRe", new RegExp("<([^/>]*?)>$|<([^/].*[^/])>$"));
      o(this, "closeRe", new RegExp("^</([^>]+)>"));
      o(this, "openCloseRe", new RegExp("<(.*)(/>$)"));
      o(this, "tokenizerRe", /(<[^\^>]+\/>)|(<!--[\s\S]*?-->)|(<[\/a-zA-Z0-9\-:]+(?:\s*[\(a-zA-Z\-\):]+=\"[^\"]*\"|\s*[a-zA-Z\-:]+='[^']+'|\s*[\(a-zA-Z\-\):]|\s*\{\{.*\}\}|\s*\{#.*\})*>)/);
      o(this, "commentRe", /<!--[\s\S]*?-->/);
      o(this, "attributesRe", /([\(a-zA-Z0-9\-_:\)]+="[^"]*")|\s+([\(a-zA-Z0-9\-_:\)]+(?=\s.|$))/);
      o(this, "helperExpressionRe", /^[\s]*\{#([^\}]*)\}[\s]*$/);
      o(this, "isBrowser", true);
      o(this, "_templates", void 0);
      o(this, "namespaceHandlers", {});
      o(this, "namespaces", {});
      e78 = e78 || {};
      this._templates = e78.templates || {};
      this.entries = {};
      this.defaultTemplate = e78.defaultTemplate;
      this.templateResolver = e78.templateResolver || this._getDefaultTemplateResolver();
      this.macros = e78.templateMacros || {};
    }
    n(d32, [{ key: "resolveTemplate", value: function e78(r53) {
      if (this._templates[r53] != null) {
        return this._templates[r53];
      } else {
        return this.templateResolver(r53);
      }
    } }, { key: "setAttribute", value: function e78(r53, t61, n91) {
      var a48 = t61.split(":");
      if (a48.length === 1) {
        r53.setAttribute(a48[0], n91);
      } else {
        if (this.namespaces[a48[0]] == null) {
          r53.setAttribute(t61, n91);
        } else {
          r53.setAttributeNS(this.namespaces[a48[0]], a48[1], n91);
        }
      }
    } }, { key: "clearCache", value: function e78() {
      this.cache.clear();
      this.templateCache.clear();
    } }, { key: "parseAttributes", value: function e78(r53) {
      return t56(r53, this.attributesRe);
    } }, { key: "_wrapCache", value: function e78(r53, t61) {
      var n91 = this;
      return function(e79) {
        var a48 = t61 ? null : n91.cache.get(e79);
        if (a48 == null) {
          a48 = r53(e79);
        }
        if (a48 == null) {
          a48 = n91.defaultTemplate;
        }
        if (a48 != null) {
          n91.cache.set(e79, a48);
        }
        return a48;
      };
    } }, { key: "getTemplate", value: function e78(r53) {
      return this.templateCache.get(r53);
    } }, { key: "addTemplate", value: function e78(r53, t61) {
      this._templates[r53] = t61;
    } }, { key: "template", value: function e78(r53, t61, n91, a48) {
      t61 = t61 || {};
      var l48 = !a48 ? this.templateCache.get(r53) : null;
      if (l48 != null) {
        return this.render(l48, t61).fragment;
      } else {
        var i45 = this.parseAndCache(r53, n91, a48);
        if (i45 != null) {
          return this.render(i45, t61).fragment;
        } else {
          return this.cf();
        }
      }
    } }, { key: "parseAndCache", value: function e78(r53, t61, n91) {
      var a48 = this;
      var l48 = this.templateCache.get(r53);
      if (l48 == null || n91 === true) {
        t61 = this._wrapCache(t61 || function(e79) {
          return a48.resolveTemplate(e79);
        }, n91);
        var i45 = t61(r53);
        if (i45 != null) {
          var s40 = S17(this, i45, t61, null, [r53]);
          this.templateCache.set(r53, s40);
          return s40;
        }
      } else {
        return l48;
      }
    } }, { key: "data", value: function e78(r53, t61, n91) {
      return r2(r53, t61, n91);
    } }, { key: "each", value: function e78(r53, t61, n91, a48, l48) {
      var i45;
      if (Array.isArray(r53)) {
        for (i45 = 0; i45 < r53.length; i45++) {
          t61(r53[i45], n91, i45, a48, l48);
        }
      } else {
        for (i45 in r53) {
          if (r53.hasOwnProperty(i45)) {
            t61({ $key: i45, $value: r53[i45] }, n91, i45, a48, l48);
          }
        }
      }
    } }, { key: "update", value: function e78(r53, t61) {
      var n91 = r53._recado, a48 = m40();
      if (n91 != null) {
        this._updateExecution(n91, t61, a48);
      }
      return a48;
    } }, { key: "onUpdate", value: function e78(r53, t61) {
      if (r53._recado == null) {
        return;
      }
      r53._recado.updaters = r53._recado.updaters || [];
      r53._recado.updaters.push(t61);
    } }, { key: "_updateExecution", value: function e78(r53, t61, n91) {
      var c47 = this;
      if (r53.type === c41) {
        for (var h35 = 0; h35 < r53.children.length; h35++) {
          this._updateExecution(r53.children[h35], t61, n91);
        }
      } else if (r53.type === t55 || r53.type === e74) {
        c44(r53, t61, function(e79) {
          return c47._expand(e79, t61);
        });
        if (this.customTags[r53.entry.tag] != null) {
          var p49 = this.customTags[r53.entry.tag];
          if (p49.updated) {
            p49.updated(r53.el, t61, this);
          }
        }
        for (var d33 = 0; d33 < r53.children.length; d33++) {
          this._updateExecution(r53.children[d33], t61, n91);
        }
      } else if (r53.type === u41) {
        var v41 = r53;
        var m44 = v41.resolution;
        var y34 = f41(v41, t61, function(e79) {
          return c47._expand(e79, t61);
        });
        if (!y34) {
          for (var g31 = 0; g31 < r53.children.length; g31++) {
            p43(this, r53.children[g31]).map(function(e79) {
              return n91.removed.push({ el: e79 });
            });
          }
          r53.children.length = 0;
        }
        if (y34) {
          if (!m44) {
            var x27 = this.render(r53.entry.children, t61);
            r53.children = x27.children;
            for (var _17 = 0; _17 < r53.children.length; _17++) {
              var T18 = r53.children[_17];
              v41.placeholder.before(T18.el);
              n91.added.push({ el: T18.el });
            }
          } else {
            for (var C19 = 0; C19 < r53.children.length; C19++) {
              this._updateExecution(r53.children[C19], t61, n91);
            }
          }
        }
      } else if (r53.type === l43) {
        var A19 = r53.entry.context == null || r53.entry.context.length === 0 ? t61 : r2(t61, r53.entry.context);
        for (var w23 = 0; w23 < r53.children.length; w23++) {
          this._updateExecution(r53.children[w23], A19, n91);
        }
      } else if (r53.type === o35) {
        (function() {
          var e79 = r53;
          var a48 = r2(t61, r53.entry.context);
          if (a48 == null) {
            p43(c47, r53).map(function(e80) {
              return n91.removed.push({ el: e80 });
            });
          } else {
            if (e79.entry.key == null || e79.entry.key.length === 0) {
              Q("WARN: Cannot update r-each entry when no `key` parameter was set.");
            } else {
              var l48 = {};
              var i45 = [];
              var s40 = [];
              Z8(a48, function(r54, t62) {
                var n92 = r2(r54, e79.entry.key);
                l48[n92] = r54;
                if (e79.entryMap[n92] != null) {
                  var a49 = e79.entryMap[n92];
                  for (var s41 = 0; s41 < a49.length; s41++) {
                    i45.push({ data: r54, key: n92, execution: a49[s41] });
                  }
                } else {
                  i45.push({ data: r54, key: n92 });
                }
              });
              for (var u52 in e79.entryMap) {
                if (l48[u52] == null) {
                  for (var o42 = 0; o42 < e79.entryMap[u52].length; o42++) {
                    s40.push({ e: e79.entryMap[u52][o42], key: u52 });
                  }
                }
              }
              for (var h36 = 0; h36 < s40.length; h36++) {
                delete e79.entryMap[s40[h36].key];
                p43(c47, s40[h36].e).map(function(e80) {
                  return n91.removed.push({ el: e80 });
                });
              }
              for (var p50 = 0; p50 < i45.length; p50++) {
                var d34 = i45[p50];
                if (d34.execution) {
                  c47._updateExecution(d34.execution, d34.data, n91);
                  if (d34.execution.el != null) {
                    e79.placeholder.before(d34.execution.el);
                  } else {
                    j2(d34.execution.children, function(r54) {
                      if (r54.el != null) {
                        e79.placeholder.before(r54.el);
                      }
                    });
                  }
                } else {
                  var v42 = c47.render(r53.entry.children, d34.data);
                  c43(e79, v42, d34.key, n91);
                }
              }
            }
          }
        })();
      }
      if (r53.updaters) {
        for (var E17 = 0; E17 < r53.updaters.length; E17++) {
          r53.updaters[E17](r53.el);
        }
      }
      return n91;
    } }, { key: "remove", value: function e78(r53, t61) {
      if (t61) {
        r53.parentNode && r53.parentNode.removeChild(r53);
      }
    } }, { key: "registerTag", value: function e78(r53, t61) {
      this.customTags[r53] = new i42(this, r53, t61);
    } }, { key: "parse", value: function e78(r53, t61, n91, a48) {
      return S17(this, r53, t61, n91, a48);
    } }, { key: "_expand", value: function e78(r53, t61) {
      if (this.macros[r53]) {
        return this.macros[r53](t61) || "";
      } else {
        return "";
      }
    } }, { key: "render", value: function e78(r53, t61, a48) {
      var d33 = this;
      var v41 = { id: $(), fragment: this.cf(), children: [], type: "root", bindings: {}, entry: null };
      var m44 = v41.fragment;
      var y34 = null;
      var x27 = v41;
      m44._recado = v41;
      var _17 = function e79(r54, t62, n91) {
        var a49 = { id: t62, entry: r54, placeholder: d33.cc("".concat(o35, ":").concat(t62)), entryMap: {}, type: o35, children: [] };
        R15(a49.placeholder, n91);
        x27.children.push(a49);
        return a49;
      };
      var k20 = function e79(r54, t62, n91) {
        var a49 = { placeholder: d33.cc("".concat(l43, ":").concat(t62)), entry: r54, id: t62, children: [], type: l43 };
        R15(a49.placeholder, n91);
        x27.children.push(a49);
        return a49;
      };
      var C19 = function e79(r54, t62, n91, a49) {
        w23(r54, a49);
        var i45 = { id: $(), entry: t62, bindings: n91, children: [], el: r54, type: t55 };
        x27.children.push(i45);
        r54._recado = i45;
        return i45;
      };
      var A19 = function e79(r54, t62, n91, a49) {
        w23(r54, a49);
        var l48 = { id: $(), el: r54, entry: t62, bindings: n91, children: [], type: e74 };
        x27.children.push(l48);
        r54._recado = l48;
        return l48;
      };
      var b28 = function e79(r54, t62) {
        var n91 = $();
        var a49 = { id: n91, entry: r54, resolution: false, placeholder: d33.cc("".concat(u41, ":").concat(n91)), type: u41, children: [] };
        R15(a49.placeholder, t62);
        x27.children.push(a49);
        return a49;
      };
      var R15 = function e79(r54, t62) {
        if (t62 != null) {
          t62.before(r54);
        } else {
          if (y34 != null) {
            y34.appendChild(r54);
          } else {
            m44.appendChild(r54);
          }
        }
      };
      var w23 = function e79(r54, t62) {
        if (t62 != null) {
          t62.before(r54);
        } else {
          if (y34 != null) {
            y34.appendChild(r54);
          } else {
            m44.appendChild(r54);
          }
        }
      };
      var j26 = function e79(r54, t62, v42, m45) {
        t62 = t62 || {};
        var R16 = false;
        var w24 = null;
        if (r54.type === u41) {
          var j27 = x27;
          var M21 = b28(r54, v42);
          x27 = M21;
          R16 = f41(M21, t62, function(e80) {
            return d33._expand(e80, t62);
          });
          if (R16) {
            for (var B16 = 0; B16 < r54.children.length; B16++) {
              e79(r54.children[B16], t62, M21.placeholder, m45);
            }
          }
          x27 = j27;
          w24 = M21;
        } else if (r54.type === o35) {
          var z16 = r54;
          var D18 = y34;
          var G17 = r54.context === x22 ? t62 : r2(t62, r54.context);
          var P18 = x27;
          var S20 = $();
          var X12 = _17(z16, S20, v42);
          x27 = X12;
          if (G17 != null) {
            Z8(G17, function(t63, n91) {
              var a49 = z16.key && a2(t63) ? r2(t63, z16.key) : n91 || null;
              for (var l48 = 0; l48 < r54.children.length; l48++) {
                var i45 = e79(r54.children[l48], t63, X12.placeholder, n91);
                if (a49 != null) {
                  u44(X12, a49, i45);
                }
              }
            });
          }
          y34 = D18;
          x27 = P18;
          w24 = X12;
        } else if (r54.type === l43) {
          var H12 = r54;
          var O22 = y34;
          var U10 = x27;
          var V13 = $();
          var W12 = k20(H12, V13, v42);
          x27 = W12;
          var q12 = r54.context == null || r54.context.length === 0 ? t62 : r2(t62, r54.context);
          var F17 = H12.lookup != null ? r2(t62, H12.lookup.replace(/[\{\{\}\}]/g, "")) : H12.templateId;
          var J8 = d33.parseAndCache(F17, a48);
          if (J8 == null && H12.default != null) {
            J8 = d33.parseAndCache(H12.default, a48);
          }
          for (var K9 = 0; K9 < J8.length; K9++) {
            e79(J8[K9], q12, W12.placeholder, m45);
          }
          y34 = O22;
          x27 = U10;
          w24 = W12;
        } else if (r54.type === t55) {
          var L18;
          var Q9;
          var Y14 = r54;
          var ee3;
          var re2 = {};
          var te3 = [];
          if (d33.customTags[r54.tag] != null) {
            ee3 = d33.customTags[r54.tag];
            var ne3 = d33.render(ee3.getAST(t62), t62);
            Q9 = ne3.fragment.childNodes[0];
            var ae2 = ne3.children[0].bindings;
            for (var le2 in ae2) {
              re2[le2] = ae2[le2];
            }
            te3.push.apply(te3, h(ne3.children[0].children));
          } else if (Y14.namespace != null) {
            Q9 = d33.namespaceHandlers[Y14.namespace](r54.tag);
          } else {
            Q9 = d33.ce(r54.tag);
          }
          for (var ie2 in Y14.atts) {
            if (Y14.atts.hasOwnProperty(ie2)) {
              var se = Y14.atts[ie2];
              if (r54.compiledBindings[ie2] != null) {
                var ue3 = r54.compiledBindings[ie2];
                re2[ie2] = { id: ue3.id, binding: ue3, results: [], originalValue: se, type: i39 };
                for (var oe2 = 0; oe2 < ue3.expressions.length; oe2++) {
                  var ce = ue3.expressions[oe2];
                  var he = b24(ce.expression, function(e80) {
                    if (e80 === f38) {
                      return m45;
                    } else if (e80 === x22) {
                      return t62;
                    } else {
                      return r2(t62, e80);
                    }
                  }, function(e80) {
                    return d33._expand(e80, t62);
                  });
                  se = se.replace(ce.source, he);
                  re2[ie2].results.push({ source: ce.source, result: he });
                }
              }
              d33.setAttribute(Q9, ie2, se);
            }
          }
          if (ee3 && ee3.rendered) {
            ee3.rendered(Q9, t62, d33, y34);
          }
          var pe = y34;
          var fe = x27;
          var de = C19(Q9, Y14, re2, v42);
          (L18 = de.children).push.apply(L18, te3);
          x27 = de;
          y34 = Q9;
          for (var ve2 = 0; ve2 < r54.children.length; ve2++) {
            e79(r54.children[ve2], t62, null, m45);
          }
          x27 = fe;
          y34 = pe;
          w24 = de;
        } else if (r54.type === e74) {
          var me2 = r54.value || "";
          var ye2 = {};
          var ge2 = r54.compiledBindings[n81.TEXT_BINDING_NAME];
          if (ge2 != null) {
            ye2[n81.TEXT_BINDING_NAME] = { id: ge2.id, binding: ge2, results: [], originalValue: me2, type: e74 };
            for (var xe2 = 0; xe2 < ge2.expressions.length; xe2++) {
              var _e2 = ge2.expressions[xe2];
              var ke3 = b24(_e2.expression, function(e80) {
                if (e80 === f38) {
                  return m45;
                } else if (e80 === x22) {
                  return t62;
                } else {
                  return r2(t62, e80);
                }
              }, function(e80) {
                return d33._expand(e80, t62);
              });
              me2 = me2.replace(_e2.source, ke3);
              ye2[n81.TEXT_BINDING_NAME].results.push({ source: _e2.source, result: ke3 });
            }
          }
          var Te2 = d33.ctn(me2);
          var Ce = A19(Te2, r54, ye2, v42);
          w24 = Ce;
        }
        return w24;
      };
      for (var M20 = 0; M20 < r53.length; M20++) {
        j26(r53[M20], t61 || {}, null, null);
        y34 = null;
        x27 = v41;
      }
      return v41;
    } }]);
    return d32;
  }();
  function G12(e78) {
    return n84.exists(e78);
  }
  function P13(e78, r53, t61, n91, a48, l48) {
    return n84.construct(r53, t61, e78, n91, a48, l48);
  }
  function S17(e78, r53, t61, n91, a48) {
    a48 = a48 || [];
    t61 = e78._wrapCache(t61 || function(r54) {
      return e78.resolveTemplate(r54);
    }, null);
    var l48 = [], i45 = [], s40 = function e79(r54, t62) {
      var n92 = r54.match(t62);
      return n92 == null ? null : n92;
    }, u52 = function e79() {
      return l48.length > 0 ? l48[l48.length - 1] : null;
    }, o42 = function e79(r54) {
      var t62 = u52();
      return t62 != null && t62.tag === r54;
    }, c47 = function e79(r54, t62) {
      if (l48.length > 0) {
        u52().children.push(r54);
      }
      if (!t62) {
        l48.push(r54);
      } else if (l48.length === 0) {
        i45.push(r54);
      }
    }, h35 = function e79(r54) {
      c47(r54, true);
    }, p49 = function e79() {
      var r54 = l48.pop();
      if (l48.length === 0 && !r54.remove) {
        i45.push(r54);
      } else {
        if (r54.remove) {
          var t62 = u52();
          if (t62) {
            t62.children.pop();
          }
        }
      }
      return r54;
    }, f45 = function r54(t62, n92, i46, s41) {
      var u53 = a42(t62, e78);
      if (G12(u53.el)) {
        return P13(e78, u53.el, u53, i46, l48, a48);
      } else {
        return new n83(u53, e78, i46, l48, a48);
      }
    }, v41 = [{ re: e78.commentRe, handler: function e79(r54, t62, n92, a49, l49) {
      c47(new n82(r54, a49), true);
    } }, { re: e78.openRe, handler: function e79(r54, t62, n92, a49, l49) {
      var i46 = f45(r54, t62, n92);
      c47(i46, i46.remove);
    } }, { re: e78.closeRe, handler: function e79(r54, t62, n92, a49, l49) {
      if (t62[1] === f42.tag) {
        return;
      }
      if (!o42(t62[1])) {
        throw new TypeError("Unbalanced closing tag '" + t62[1] + "'; opening tag was '" + p49().tag + "'");
      } else
        p49();
    } }, { re: e78.openCloseRe, handler: function e79(r54, t62, n92, a49, l49) {
      var i46 = f45(r54, t62, n92);
      c47(i46, true);
    } }, { re: /.*/, handler: function e79(r54, t62, n92, a49, l49) {
      var i46 = new n81({ value: r54 }, a49);
      h35(i46);
      var s41 = r54.match(/^[\s]*$/) != null;
      if (!s41) {
        i40(n81.TEXT_BINDING_NAME, r54, i46);
      }
    } }];
    i3(G(r53).split(e78.tokenizerRe), function(r54, n92) {
      var l49 = G(n92);
      for (var i46 = 0; i46 < v41.length; i46++) {
        var u53 = s40(l49, v41[i46].re);
        if (u53) {
          v41[i46].handler(n92, u53, t61, e78, a48);
          break;
        }
      }
    });
    if (i45.length > 0 && n91) {
      for (var k20 in n91) {
        i45[0][k20] = n91[k20];
      }
    }
    return i45;
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui-templates-2/browser-ui-recado.js
  var a45 = "svg";
  var l45 = "xlink";
  function c45(e78) {
    var t61 = document.getElementById(e78);
    return t61 != null ? t61.innerHTML : null;
  }
  var o37 = function(u52) {
    a(m44, u52);
    var o42 = s(m44);
    function m44(e78) {
      var t61;
      t(this, m44);
      t61 = o42.call(this, e78);
      t61.namespaceHandlers[a45] = function(e79) {
        var t62 = document.createElementNS("http://www.w3.org/2000/svg", e79.split(":")[1]);
        return t62;
      };
      t61.namespaces[l45] = "http://www.w3.org/1999/xlink";
      return t61;
    }
    n(m44, [{ key: "ce", value: function e78(t61) {
      return document.createElement(t61);
    } }, { key: "cf", value: function e78() {
      return document.createDocumentFragment();
    } }, { key: "ctn", value: function e78(t61) {
      return document.createTextNode(t61);
    } }, { key: "cc", value: function e78(t61) {
      return document.createComment(t61);
    } }, { key: "_getDefaultTemplateResolver", value: function e78() {
      return c45;
    } }, { key: "removeElement", value: function e78(t61) {
      t61.parentElement.removeChild(t61);
    } }, { key: "removeTextNode", value: function e78(t61) {
      t61.parentNode.removeChild(t61);
    } }]);
    return m44;
  }(D14);
  function m41(e78) {
    return new o37(e78 || {});
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui-templates-2/recado-template-renderer.js
  var n88 = '<div data-jtk-vertex="{{id}}" class="'.concat(Na, '"></div>');
  var u46 = function() {
    function s40(e78) {
      t(this, s40);
      o(this, "recado", void 0);
      o(this, "asynchronous", false);
      o(this, "reactive", false);
      o(this, "surface", null);
      o(this, "currentVertex", null);
      e78 = e78 || {};
      this.recado = m41({ defaultTemplate: n88, templateResolver: e78.templateResolver, templates: e78.templates, templateMacros: e78.templateMacros });
      if (e78.tags) {
        for (var u52 in e78.tags) {
          this.registerTag(u52, e78.tags[u52]);
        }
      }
    }
    n(s40, [{ key: "render", value: function e78(t61, r53, a48, s41, n91, u52, i45, l48) {
      this.surface = n91;
      this.currentVertex = i45;
      var o42 = this.recado.template(t61, r53).childNodes[0];
      n91.vertexRendered(i45, o42, u52, null);
    } }, { key: "_cleanup", value: function e78(t61) {
      this.recado.remove(t61, true);
    } }, { key: "cleanupVertex", value: function e78(t61, r53) {
      this._cleanup(r53);
    } }, { key: "cleanupPort", value: function e78(t61, r53) {
      this._cleanup(r53);
    } }, { key: "addTemplate", value: function e78(t61, r53) {
      this.recado.addTemplate(t61, r53);
    } }, { key: "registerTag", value: function e78(t61, r53) {
      var a48 = this;
      this.recado.registerTag(t61, { template: r53.template, rendered: function e79(t62, s41, n91, u52) {
        r53.rendered && r53.rendered(t62, s41, n91, a48.surface, a48.currentVertex);
      }, updated: function e79(t62, s41, n91) {
        r53.updated && r53.updated(t62, s41, n91, a48.surface, a48.currentVertex);
      }, fragments: r53.fragments });
    } }, { key: "update", value: function e78(t61, r53, a48, s41) {
      if (t61._recado) {
        this.currentVertex = a48;
        this.surface = s41;
        var n91 = this.recado.update(t61, r53);
        for (var u52 = 0; u52 < n91.removed.length; u52++) {
          if (n91.removed[u52].el.nodeType !== 3 && n91.removed[u52].el.nodeType !== 8) {
            s41.jsplumb.unmanage(n91.removed[u52].el, true);
          }
        }
      }
    } }]);
    return s40;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui-templates-2/index.js
  function r49(r53) {
    return new u46(r53);
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui-vanilla-2/index.js
  function i43(e78) {
    if (!l46) {
      o38.push(e78);
    } else {
      e78();
    }
  }
  var o38 = [];
  var l46 = false;
  var a46 = function e76() {
    l46 = true;
    for (var t61 = 0; t61 < o38.length; t61++) {
      o38[t61]();
    }
  };
  var s39 = function() {
    function i45(e78) {
      t(this, i45);
      this.templateHolder = e78;
      o(this, "c", 0);
    }
    n(i45, [{ key: "_dec", value: function e78() {
      this.c--;
      if (this.c <= 0) {
        a46();
      }
    } }, { key: "add", value: function e78(t61) {
      var n91 = this;
      this.c++;
      a14({ url: t61, success: function e79(t62) {
        var r53 = n91.templateHolder.innerHTML;
        r53 += t62;
        n91.templateHolder.innerHTML = r53;
        n91._dec();
      }, error: function e79(t62) {
        n91._dec();
      } });
    } }, { key: "ensureNotEmpty", value: function e78() {
      if (this.c <= 0)
        a46();
    } }]);
    return i45;
  }();
  var u47 = function e77() {
    var t61 = function e78() {
      if (typeof document !== "undefined") {
        if (/complete|loaded|interactive/.test(document.readyState) && typeof document.body !== "undefined" && document.body != null) {
          var t62 = document.getElementById("jsPlumbToolkitTemplates");
          if (!t62) {
            t62 = document.createElement("div");
            t62.style.display = "none";
            t62.id = "jsPlumbToolkitTemplates";
            document.body.appendChild(t62);
            var n91 = new s39(t62);
            var r53 = document.getElementsByTagName("script");
            for (var i45 = 0; i45 < r53.length; i45++) {
              var o42 = r53[i45].getAttribute("type"), l48 = r53[i45].getAttribute("src");
              if (o42 == "text/x-jtk-templates") {
                n91.add(l48);
              }
            }
            n91.ensureNotEmpty();
          } else {
            a46();
          }
        } else {
          setTimeout(e78, 9);
        }
      } else {
        a46();
      }
    };
    t61();
  };
  u47();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/dialogs-core/constants.js
  var t58 = { Classes: { DIALOG: "jtk-dialog", UNDERLAY: "jtk-dialog-underlay", OVERLAY: "jtk-dialog-overlay", TITLE: "jtk-dialog-title", CONTENT: "jtk-dialog-content", BUTTONS: "jtk-dialog-buttons", OVERLAY_VISIBLE: "jtk-dialog-overlay-visible", BUTTON: "jtk-dialog-button", BUTTON_OK: "jtk-dialog-button-ok", BUTTON_CANCEL: "jtk-dialog-button-cancel", OVERLAY_TOP: "jtk-dialog-overlay-top", OVERLAY_BOTTOM: "jtk-dialog-overlay-bottom", OVERLAY_LEFT: "jtk-dialog-overlay-left", OVERLAY_RIGHT: "jtk-dialog-overlay-right", OVERLAY_X: "jtk-dialog-overlay-x", OVERLAY_Y: "jtk-dialog-overlay-y" }, Attributes: { POSITION: "data-position", AXIS: "data-axis", JTK_CANCEL: "jtk-cancel", JTK_COMMIT: "jtk-commit", MULTIPLE: "multiple", JTK: "jtk-att", TITLE: "title", FOCUS: "jtk-focus", TYPE: "type", CANCEL: "cancel", ID: "id" }, Values: { BLOCK: "block", VISIBLE: "visible", HIDDEN: "hidden", FIXED: "fixed", ABSOLUTE: "absolute", TOP: "top", BOTTOM: "bottom", X: "x", Y: "y", TRUE: "true", FALSE: "false", NONE: "none", PX: "px" }, Events: { RESIZE: "resize", CLICK: "click", KEYUP: "keyup", SCROLL: "scroll" }, Elements: { BUTTON: "button", DIV: "div", TEXT: "TEXT", RADIO: "RADIO", CHECKBOX: "CHECKBOX", SELECT: "SELECT", TEXTAREA: "TEXTAREA", COLOR: "COLOR", HIDDEN: "HIDDEN", INPUT: "INPUT", NUMBER: "NUMBER" } };
  function o39(t61) {
    return ["[", t61, "]"].join("");
  }

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/dialogs-core/binder.js
  var u48;
  var i44;
  var l47;
  var o40 = t58.Attributes;
  var a47 = t58.Events;
  var f43 = t58.Elements;
  var c46 = (u48 = {}, o(u48, f43.TEXT, function(e78) {
    return e78.value;
  }), o(u48, f43.NUMBER, function(e78) {
    return e78.value;
  }), o(u48, f43.RADIO, function(e78) {
    if (e78.checked)
      return e78.value;
  }), o(u48, f43.CHECKBOX, function(e78) {
    if (e78.checked)
      return true;
  }), o(u48, f43.SELECT, function(e78) {
    var t61 = e78.selectedOptions, n91 = e78.getAttribute(o40.MULTIPLE);
    if (n91) {
      var r53 = [];
      for (var u52 = 0; u52 < t61.length; u52++) {
        r53.push(t61[u52].value);
      }
      return r53;
    } else {
      return e78.selectedIndex !== -1 ? e78.options[e78.selectedIndex].value : null;
    }
  }), o(u48, f43.TEXTAREA, function(e78) {
    return e78.value;
  }), o(u48, f43.COLOR, function(e78) {
    return e78.value;
  }), o(u48, f43.HIDDEN, function(e78) {
    return e78.value;
  }), u48);
  function T11(e78, t61, u52, i45) {
    var l48 = t61.querySelectorAll(o39(o40.JTK));
    var c47 = function t62(n91) {
      var c48 = l48[n91].tagName.toUpperCase(), v42 = c48 === f43.INPUT ? (l48[n91].getAttribute(o40.TYPE) || f43.TEXT).toUpperCase() : c48, s41 = l48[n91].getAttribute(o40.JTK), E17 = r2(e78, s41);
      if (E17 != null) {
        var T18 = p45[v42];
        if (T18 != null) {
          T18(l48[n91], E17);
        } else {
          if (i45 != null) {
            i45(l48[n91], E17);
          }
          return "continue";
        }
      }
      if (u52 != null) {
        if (l48[n91].getAttribute(o40.JTK_COMMIT)) {
          if (c48 === f43.INPUT) {
            l48[n91].addEventListener(a47.KEYUP, function(e79) {
              if (e79.keyCode === 10 || e79.keyCode === 13) {
                u52(l48[n91]);
              }
            });
          } else if (c48 === f43.TEXTAREA) {
            l48[n91].addEventListener(a47.KEYUP, function(e79) {
              if (e79.ctrlKey && (e79.keyCode === 10 || e79.keyCode === 13)) {
                u52(l48[n91]);
              }
            });
          }
        }
      }
    };
    for (var v41 = 0; v41 < l48.length; v41++) {
      var s40 = c47(v41);
      if (s40 === "continue")
        continue;
    }
  }
  var p45 = (i44 = {}, o(i44, f43.TEXT, function(e78, t61) {
    e78.value = t61;
  }), o(i44, f43.NUMBER, function(e78, t61) {
    e78.value = t61;
  }), o(i44, f43.RADIO, function(e78, t61) {
    e78.checked = e78.value == t61;
  }), o(i44, f43.CHECKBOX, function(e78, t61) {
    e78.checked = t61 == true;
  }), o(i44, f43.SELECT, function(e78, t61) {
    var n91 = e78.getAttribute(o40.MULTIPLE);
    for (var r53 = 0; r53 < e78.options.length; r53++) {
      if (n91) {
        if (t61.indexOf(e78.options[r53].value) > -1) {
          e78.options[r53].selected = true;
        }
      } else {
        if (e78.options[r53].value === t61) {
          e78.selectedIndex = r53;
          return;
        }
      }
    }
  }), o(i44, f43.TEXTAREA, function(e78, t61) {
    e78.value = t61;
  }), o(i44, f43.COLOR, function(e78, t61) {
    e78.value = t61;
  }), o(i44, f43.HIDDEN, function(e78, t61) {
    e78.value = t61;
  }), i44);
  var A16 = (l47 = {}, o(l47, f43.TEXT, function(e78) {
    e78.value = "";
  }), o(l47, f43.RADIO, function(e78) {
    e78.checked = false;
  }), o(l47, f43.CHECKBOX, function(e78) {
    e78.checked = false;
  }), o(l47, f43.SELECT, function(e78) {
    e78.selectedIndex = -1;
  }), o(l47, f43.TEXTAREA, function(e78) {
    e78.value = "";
  }), o(l47, f43.COLOR, function(e78) {
    e78.value = "";
  }), o(l47, f43.HIDDEN, function(e78) {
    e78.value = "";
  }), l47);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui-plugin-lasso/lasso.js
  function _12() {
  }
  function w20(t61) {
    var i45 = document.createElement("div");
    h5(i45, t61.join(" "));
    document.body.appendChild(i45);
    return i45;
  }
  var L13 = function() {
    function h35(t61) {
      t(this, h35);
      o(this, "visibleOrigin", { x: 0, y: 0 });
      o(this, "size", { w: 0, h: 0 });
      o(this, "_generateLassoContent", void 0);
      o(this, "el", void 0);
      o(this, "masks", {});
      o(this, "origin", { x: 0, y: 0 });
      o(this, "onStart", void 0);
      o(this, "onEnd", void 0);
      o(this, "onSelect", void 0);
      o(this, "onClick", void 0);
      o(this, "down", false);
      o(this, "moving", false);
      o(this, "invert", void 0);
      o(this, "surface", void 0);
      o(this, "_filter", void 0);
      o(this, "eventManager", void 0);
      o(this, "mapToGrid", void 0);
      o(this, "downListener", void 0);
      o(this, "upListener", void 0);
      o(this, "moveListener", void 0);
      o(this, "downEvent", t4);
      o(this, "upEvent", u11);
      o(this, "moveEvent", m10);
      o(this, "enabled", false);
      o(this, "_generatedLassoContent", void 0);
      this.surface = t61.surface;
      this.onStart = t61.onStart || _12;
      this.onEnd = t61.onEnd || _12;
      this.onSelect = t61.onSelect || _12;
      this.onClick = t61.onClick || null;
      this._generateLassoContent = t61.generateLassoContent;
      this.mapToGrid = t61.mapToGrid;
      this.invert = t61.invert === true;
      this.downListener = this._downListener.bind(this);
      this.upListener = this._upListener.bind(this);
      this.moveListener = this._moveListener.bind(this);
      this.eventManager = new oe();
      this._prepareFilter(t61.filter);
      if (!this.invert) {
        this.el = w20([ma, t61.cssClass || ""]);
      } else {
        this._createMasks();
      }
      this.eventManager.on(this.surface.jsplumb.getContainer().parentNode, this.downEvent, this.downListener);
    }
    n(h35, [{ key: "_prepareFilter", value: function t61(i45) {
      if (i45 == null) {
        this._filter = function() {
          return false;
        };
      } else {
        if (l2(i45)) {
          this._filter = function(t62) {
            var e78 = t62.srcElement || t62.target;
            return s4(e78, i45);
          };
        } else {
          this._filter = i45;
        }
      }
    } }, { key: "_position", value: function t61(i45, e78) {
      this.visibleOrigin = i45;
      this.size = e78;
      if (!this.invert) {
        u9(this.el, i45, e78);
      } else {
        var s40 = window.innerWidth, n91 = window.innerHeight, o42 = window.pageXOffset, r53 = window.pageYOffset, h36 = n91 - i45.y + r53, a48 = n91 - h36 + e78.h, l48 = s40 - i45.x + o42, u52 = s40 - l48 + e78.w;
        this.masks.top.style.bottom = h36 + "px";
        this.masks.bottom.style.top = a48 + "px";
        this.masks.left.style.right = l48 + "px";
        this.masks.right.style.left = u52 + "px";
        this.masks.top.style.left = s40 - l48 + "px";
        this.masks.top.style.right = s40 - u52 + "px";
        this.masks.bottom.style.left = s40 - l48 + "px";
        this.masks.bottom.style.right = s40 - u52 + "px";
      }
    } }, { key: "_setVisible", value: function t61(i45) {
      var e78 = i45 ? Pa.block : Pa.none;
      if (!this.invert) {
        this.el.style.display = e78;
      } else {
        this.masks.top.style.display = e78;
        this.masks.left.style.display = e78;
        this.masks.right.style.display = e78;
        this.masks.bottom.style.display = e78;
      }
      if (i45) {
        this.surface.addClass(document.body, Oa);
      } else {
        this.surface.removeClass(document.body, Oa);
      }
    } }, { key: "_mapPoint", value: function t61(i45) {
      return this.mapToGrid == null ? i45 : this.mapToGrid(i45);
    } }, { key: "_downListener", value: function t61(i45) {
      if (this.enabled && !this._filter(i45)) {
        i5(i45);
        this.down = true;
        this.eventManager.on(document, this.upEvent, this.upListener);
        this.eventManager.on(document, this.moveEvent, this.moveListener);
        this.origin = this._mapPoint(q4(i45));
        if (!this.invert) {
          if (this._generateLassoContent) {
            var e78 = this._generateLassoContent(this.origin, i45);
            if (e78 != null) {
              this._generatedLassoContent = e78;
              this.el.replaceChildren(e78);
            } else {
              this.el.innerHTML = "";
            }
          }
        }
        this._position(this.origin, { w: 1, h: 1 });
        this.onStart(this.origin, i45.shiftKey, i45);
      }
    } }, { key: "_moveListener", value: function t61(i45) {
      if (this.down) {
        if (!this.moving) {
          this._setVisible(true);
          this.moving = true;
        }
        i5(i45);
        var e78 = this._mapPoint(q4(i45)), s40 = { w: Math.abs(e78.x - this.origin.x), h: Math.abs(e78.y - this.origin.y) }, o42 = { x: Math.min(this.origin.x, e78.x), y: Math.min(this.origin.y, e78.y) };
        this._position(o42, s40);
        this.onSelect(o42, s40, [this.origin.x < e78.x, this.origin.y < e78.y], i45.shiftKey, this._generatedLassoContent);
      }
    } }, { key: "_upListener", value: function t61(i45) {
      if (this.down) {
        var e78 = this.moving === true;
        this.down = false;
        this.moving = false;
        i5(i45);
        this.eventManager.off(document, this.upEvent, this.upListener);
        this.eventManager.off(document, this.moveEvent, this.moveListener);
        this._setVisible(false);
        if (e78) {
          this.onEnd(this.visibleOrigin, this.size);
        } else {
          this.onClick && this.onClick(this.visibleOrigin, i45);
        }
      }
    } }, { key: "_createMasks", value: function t61() {
      this.masks.top = w20([ua, ga]);
      this.masks.bottom = w20([ua, ya]);
      this.masks.left = w20([ua, fa]);
      this.masks.right = w20([ua, xa]);
    } }, { key: "isActive", value: function t61() {
      return this.down;
    } }, { key: "setEnabled", value: function t61(i45) {
      this.enabled = i45;
    } }]);
    return h35;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui-plugin-lasso/lasso-plugin.js
  var u49 = function() {
    function i45() {
      t(this, i45);
      o(this, "surface", void 0);
      o(this, "lasso", void 0);
      o(this, "onStart", void 0);
      o(this, "onEnd", void 0);
      o(this, "onSelect", void 0);
      o(this, "selectionFilter", void 0);
      o(this, "lassoSelections", []);
    }
    n(i45, [{ key: "destroy", value: function e78() {
    } }, { key: "initialise", value: function e78(t61, o42) {
      var i46 = this;
      t61.bind(m23, function(e79) {
        i46.lasso.enabled = e79 === Pa.select;
      });
      this.selectionFilter = o42.selectionFilter;
      this.onStart = o42.onStart;
      this.onSelect = o42.onSelect;
      this.onEnd = o42.onEnd;
      this.lasso = new L13({ surface: t61, invert: o42.invert, canvas: t61.containerElement, cssClass: o42.cssClass, generateLassoContent: o42.generateLassoContent, onStart: function e79() {
        t61.setHoverSuspended(true);
        i46.lassoSelections.length = 0;
        i46.onStart && i46.onStart();
      }, onSelect: function e79(s40, r53, l48, a48) {
        t61.toolkitInstance.clearSelection();
        if (a48 && i46.lassoSelections.length > 0) {
          t61.toolkitInstance.removeFromSelection(i46.lassoSelections);
        }
        var c47 = [], d32, u52 = t61.findIntersectingVertices(s40, r53, !l48[0]), f45 = u52.length, v41 = {};
        for (d32 = 0; d32 < f45; d32++) {
          if (i46.selectionFilter == null || i46.selectionFilter(u52[d32].v) !== false) {
            c47.push(u52[d32].v);
            v41[u52[d32].id] = true;
            t61.toolkitInstance.addToSelection(u52[d32].v);
          }
        }
        i46.lassoSelections = c47;
        f45 = c47.length;
        if (o42.includeEdges) {
          var h35 = {};
          for (d32 = 0; d32 < f45; d32++) {
            var p49 = [], S20 = void 0;
            Array.prototype.push.apply(p49, c47[d32].getAllEdges());
            for (var g31 = 0; g31 < p49.length; g31++) {
              S20 = p49[g31].getId();
              if (!h35[S20]) {
                var y34 = p49[g31].source.objectType === x8.objectType ? p49[g31].source.getParent().id : p49[g31].source.id, m44 = p49[g31].target.objectType === x8.objectType ? p49[g31].target.getParent().id : p49[g31].target.id;
                if (v41[y34] && v41[m44]) {
                  c47.push(p49[g31]);
                }
                h35[S20] = true;
              }
            }
          }
        }
        t61.toolkitInstance.addToSelection(c47);
        i46.onSelect && i46.onSelect(c47);
      }, onEnd: function e79(o43, s40) {
        t61.setHoverSuspended(false);
        if (t61.autoExitSelectMode && t61.mode !== Co) {
          t61.setMode(Ao);
        }
        t61.fire(i21);
        i46.onEnd && i46.onEnd();
      }, filter: o42.filter });
      return false;
    } }, { key: "reset", value: function e78() {
    } }, { key: "activated", value: function e78() {
      this.lasso.enabled = true;
    } }, { key: "deactivated", value: function e78() {
      this.lasso.enabled = false;
    } }]);
    return i45;
  }();
  o(u49, "type", "lasso");
  qo.register(u49.type, u49);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui-plugin-background/available-backgrounds.js
  var n89 = {};
  var r50 = { get: function r51(e78) {
    var o42 = n89[e78];
    if (!o42) {
      throw { message: "jsPlumbToolkit: unknown background [".concat(e78, "]") };
    } else {
      return o42;
    }
  }, register: function r52(e78, o42) {
    n89[e78] = o42;
  } };

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui-plugin-background/background-plugin.js
  var n90 = function() {
    function o42() {
      t(this, o42);
      o(this, "panZoom", void 0);
      o(this, "background", void 0);
      o(this, "_visible", true);
    }
    n(o42, [{ key: "initialise", value: function e78(i45, t61) {
      this.panZoom = i45.panZoom;
      var o43 = t61.type;
      var r53 = r50.get(o43);
      this._visible = t61.options != null ? t61.visible !== false : true;
      this.background = new r53({ type: o43, surface: i45, canvas: this.panZoom.canvasElement, viewport: this.panZoom.viewportElement, zoomWidget: this.panZoom, options: t61, visible: this._visible });
      this.panZoom.addBackground(this.background);
      return true;
    } }, { key: "destroy", value: function e78() {
      this.panZoom.removeBackground(this.background);
      this.background.destroy();
    } }, { key: "reset", value: function e78() {
    } }, { key: "setUrl", value: function e78(i45) {
      if (this.background.setUrl != null) {
        this.background.setUrl(i45);
      } else {
        Q("The current background does not support the `setUrl` method");
      }
    } }, { key: "show", value: function e78() {
      this.setVisible(true);
    } }, { key: "hide", value: function e78() {
      this.setVisible(false);
    } }, { key: "toggle", value: function e78() {
      this.setVisible(!this._visible);
    } }, { key: "setVisible", value: function e78(i45) {
      this._visible = i45;
      this.background._setVisible(i45);
    } }]);
    return o42;
  }();
  o(n90, "type", "background");
  qo.register(n90.type, n90);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui-plugin-background/generated-grid-background.js
  var p46;
  (function(t61) {
    t61["dotted"] = "dotted";
    t61["lines"] = "lines";
  })(p46 || (p46 = {}));
  var _13 = { w: 50, h: 50 };
  var x24 = 2;
  var b25 = "#ddd";
  var y30 = "#ddd";
  var w21 = 2;
  var C16 = 1;
  var j22 = "jtk-background-border";
  var G13 = "jtk-background-grid";
  var R11 = "jtk-background-grid-minor";
  var B13 = "jtk-background-grid-major";
  var $8 = "jtk-background-grid-dotted-major";
  var I14 = "jtk-background-grid-dotted-minor";
  var H9 = function() {
    function r53(t61) {
      var a48 = this;
      t(this, r53);
      o(this, "_suspended", false);
      o(this, "type", r53.type);
      o(this, "grid", void 0);
      o(this, "surface", void 0);
      o(this, "showBorder", true);
      o(this, "minWidth", void 0);
      o(this, "minHeight", void 0);
      o(this, "maxWidth", void 0);
      o(this, "maxHeight", void 0);
      o(this, "showTickMarks", void 0);
      o(this, "tickMarksPerCell", void 0);
      o(this, "autoShrink", true);
      o(this, "dotRadius", void 0);
      o(this, "tickDotRadius", void 0);
      o(this, "gridType", void 0);
      o(this, "currentBounds", void 0);
      o(this, "_maximumExtentsReached", { minX: Infinity, minY: Infinity, maxX: -Infinity, maxY: -Infinity });
      o(this, "backgroundContainer", void 0);
      o(this, "_$_majorGridId", void 0);
      o(this, "_$_minorGridId", void 0);
      this.surface = t61.surface;
      this.showBorder = t61.options.showBorder === true;
      this._$_majorGridId = "p".concat($().substring(0, 8));
      this._$_minorGridId = "p".concat($().substring(0, 8));
      this.gridType = t61.options.gridType || p46.lines;
      this.backgroundContainer = I2.node("svg");
      this.backgroundContainer.style.position = s5;
      this._setVisible(t61.visible);
      t61.canvas.appendChild(this.backgroundContainer);
      this.surface.bind(I8, function(t62) {
        a48._recompute();
      });
      this.surface.bind(H4, function(t62) {
        a48._recompute();
      });
      this.surface.bind(g17, function() {
        a48._suspended = true;
      });
      this.surface.bind(x14, function() {
        a48._suspended = false;
        a48._recompute();
      });
      this.surface.bind(C7, function(t62) {
        a48._recompute();
      });
      this.surface.bind(t7, function(t62) {
        a48._recompute();
      });
      this.surface.bind(y11, function(t62) {
        a48._recompute();
      });
      this.surface.bind(u16, function(t62) {
        a48._recompute();
      });
      this.grid = t61.options.grid || this.surface.getGrid() || _13;
      this.showTickMarks = t61.options.showTickMarks !== false;
      this.tickMarksPerCell = t61.options.tickMarksPerCell || x24;
      this.dotRadius = t61.options.dotRadius || w21;
      this.tickDotRadius = t61.options.tickDotRadius || C16;
      this.minWidth = t61.options.minWidth;
      this.minHeight = t61.options.minHeight;
      this.maxWidth = t61.options.maxWidth;
      this.maxHeight = t61.options.maxHeight;
      this.autoShrink = t61.options.autoShrink != false;
      this._recompute();
    }
    n(r53, [{ key: "owns", value: function t61(i45) {
      return i45 === this.backgroundContainer || i45.parentNode === this.backgroundContainer;
    } }, { key: "getWidth", value: function t61() {
      return this.currentBounds != null ? this.currentBounds.w + (this.currentBounds.x < 0 ? this.currentBounds.x : 0) : 0;
    } }, { key: "getHeight", value: function t61() {
      return this.currentBounds != null ? this.currentBounds.h + (this.currentBounds.y < 0 ? this.currentBounds.y : 0) : 0;
    } }, { key: "setZoom", value: function t61(i45, n91) {
    } }, { key: "pan", value: function t61() {
    } }, { key: "destroy", value: function t61() {
      this.backgroundContainer.parentNode && this.backgroundContainer.parentNode.removeChild(this.backgroundContainer);
      this.backgroundContainer = null;
    } }, { key: "_recompute", value: function t61() {
      var i45 = this;
      if (!this._suspended) {
        requestAnimationFrame(function() {
          i45.currentBounds = u2({}, i45.surface.getBoundsInfo());
          var t62 = i45.grid.w * (Math.floor(i45.currentBounds.x / i45.grid.w) - 1);
          var n91 = i45.grid.h * (Math.floor(i45.currentBounds.y / i45.grid.h) - 1);
          var r54 = i45.grid.w * (Math.floor(i45.currentBounds.w / i45.grid.w) + 3);
          var e78 = i45.grid.h * (Math.floor(i45.currentBounds.h / i45.grid.h) + 3);
          if (i45.minWidth != null) {
            var o42 = -i45.minWidth / 2;
            if (o42 < t62) {
              r54 += t62 - o42;
              t62 = o42;
            }
            var s40 = i45.minWidth / 2;
            if (s40 > t62 + r54) {
              r54 += s40 - (t62 + r54);
            }
          }
          if (i45.minHeight != null) {
            var c47 = -i45.minHeight / 2;
            if (c47 < n91) {
              e78 += n91 - c47;
              n91 = c47;
            }
            var d32 = i45.minHeight / 2;
            if (d32 > n91 + e78) {
              e78 += d32 - (n91 + e78);
            }
          }
          if (i45.maxWidth != null) {
            var h35 = -i45.maxWidth / 2;
            if (h35 > t62) {
              r54 -= h35 - t62;
              t62 = h35;
            }
            var u52 = i45.maxWidth / 2;
            if (u52 < t62 + r54) {
              r54 -= t62 + r54 - u52;
            }
          }
          if (i45.maxHeight != null) {
            var m44 = -i45.maxHeight / 2;
            if (m44 > n91) {
              e78 -= m44 - n91;
              n91 = m44;
            }
            var l48 = i45.maxHeight / 2;
            if (l48 < n91 + e78) {
              e78 -= n91 + e78 - l48;
            }
          }
          if (i45.autoShrink !== true) {
            t62 = Math.min(t62, i45._maximumExtentsReached.minX);
            n91 = Math.min(n91, i45._maximumExtentsReached.minY);
            r54 = Math.max(t62 + r54, i45._maximumExtentsReached.maxX) - t62;
            e78 = Math.max(n91 + e78, i45._maximumExtentsReached.maxY) - n91;
          }
          i45.backgroundContainer.style.left = "".concat(t62, "px");
          i45.backgroundContainer.style.top = "".concat(n91, "px");
          i45.backgroundContainer.style.width = "".concat(r54, "px");
          i45.backgroundContainer.style.height = "".concat(e78, "px");
          i45.backgroundContainer.setAttribute("width", "".concat(r54));
          i45.backgroundContainer.setAttribute("height", "".concat(e78));
          i45.backgroundContainer.setAttribute("viewBox", "0 0 ".concat(r54, " ").concat(e78));
          i45.backgroundContainer.innerHTML = i45.generateGrid();
          i45._maximumExtentsReached.minX = Math.min(i45._maximumExtentsReached.minX, t62);
          i45._maximumExtentsReached.minY = Math.min(i45._maximumExtentsReached.minY, n91);
          i45._maximumExtentsReached.maxX = Math.max(i45._maximumExtentsReached.maxX, t62 + r54);
          i45._maximumExtentsReached.maxY = Math.max(i45._maximumExtentsReached.maxY, n91 + e78);
        });
      }
    } }, { key: "_$_minorLinesGrid", value: function t61(i45, n91) {
      return '<pattern id="'.concat(this._$_minorGridId, '" width="').concat(i45, '" height="').concat(n91, '" patternUnits="userSpaceOnUse">\n              <path d="M ').concat(i45, " 0 L 0 0 0 ").concat(n91, '" class="').concat(G13, " ").concat(R11, '" fill="none" stroke="').concat(b25, '" stroke-width="1"/>\n            </pattern>');
    } }, { key: "_$_majorLinesGrid", value: function t61() {
      return '<pattern id="'.concat(this._$_majorGridId, '" width="').concat(this.grid.w, '" height="').concat(this.grid.h, '" patternUnits="userSpaceOnUse">') + (this.showTickMarks ? '<rect width="'.concat(this.grid.w, '" height="').concat(this.grid.h, '" fill="url(#').concat(this._$_minorGridId, ')"/>') : "") + '<path d="M '.concat(this.grid.w, " 0 L 0 0 0 ").concat(this.grid.h, '" class="').concat(G13, " ").concat(B13, '" fill="none" stroke="').concat(y30, '" stroke-width="1.5"/></pattern>');
    } }, { key: "_$_minorDotsGrid", value: function t61(i45, n91) {
      var r54 = '<pattern id="'.concat(this._$_minorGridId, '" width="').concat(this.grid.w, '" height="').concat(this.grid.h, '" patternUnits="userSpaceOnUse">');
      for (var e78 = 0; e78 < this.tickMarksPerCell + 2; e78++) {
        var a48 = e78 * i45;
        for (var o42 = 0; o42 < this.tickMarksPerCell + 2; o42++) {
          var s40 = o42 * n91;
          r54 += '<circle cx="'.concat(a48, '" cy="').concat(s40, '" r="').concat(this.tickDotRadius, '" class="').concat(G13, " ").concat(I14, '" fill="').concat(b25, '" stroke="none"/>');
        }
      }
      return r54 + "</pattern>`";
    } }, { key: "_$_majorDotsGrid", value: function t61() {
      return '<pattern id="'.concat(this._$_majorGridId, '" width="').concat(this.grid.w, '" height="').concat(this.grid.h, '" patternUnits="userSpaceOnUse">') + (this.showTickMarks ? '<rect width="'.concat(this.grid.w, '" height="').concat(this.grid.h, '" fill="url(#').concat(this._$_minorGridId, ')"/>') : "") + '<circle cx="0" cy="0" r="'.concat(this.dotRadius, '" class="').concat(G13, " ").concat($8, '" fill="').concat(y30, '" stroke="none"/>\n            <circle cx="').concat(this.grid.w, '" cy="0" r="').concat(this.dotRadius, '" class="').concat(G13, " ").concat($8, '" fill="').concat(y30, '" stroke="none"/>\n            <circle cx="').concat(this.grid.w, '" cy="').concat(this.grid.h, '" r="').concat(this.dotRadius, '" class="').concat(G13, " ").concat($8, '" fill="').concat(y30, '" stroke="none"/>\n            <circle cx="0" cy="').concat(this.grid.h, '" r="').concat(this.dotRadius, '" class="').concat(G13, " ").concat($8, '" fill="').concat(y30, '" stroke="none"/></pattern>');
    } }, { key: "_$_generateGridPattern", value: function t61() {
      var i45 = this;
      var n91 = this.grid.w / (this.tickMarksPerCell + 1);
      var r54 = this.grid.h / (this.tickMarksPerCell + 1);
      var e78 = function t62() {
        return i45.gridType === p46.lines ? i45._$_minorLinesGrid(n91, r54) : i45._$_minorDotsGrid(n91, r54);
      };
      var a48 = function t62() {
        return i45.gridType === p46.lines ? i45._$_majorLinesGrid() : i45._$_majorDotsGrid();
      };
      return "<defs>" + (this.showTickMarks ? e78() : "") + a48() + "</defs>";
    } }, { key: "generateGrid", value: function t61() {
      var i45 = this._$_generateGridPattern();
      var n91 = this.showBorder ? '<rect class="'.concat(j22, '" x="0" y="0" width="100%" height="100%" fill="').concat(v5, '"/>') : "";
      var r54 = '<rect x="0" y="0" width="100%" height="100%" fill="url(#'.concat(this._$_majorGridId, ')" stroke="').concat(v5, '"/>');
      return i45 + n91 + r54;
    } }, { key: "_setVisible", value: function t61(i45) {
      this.backgroundContainer.style.display = i45 ? o7 : v5;
    } }]);
    return r53;
  }();
  o(H9, "type", "grid");
  r50.register(H9.type, H9);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui-shape-library/svg-exporter.js
  var X10 = "jtk-export-underlay";
  var Y12 = "jtk-export-overlay";
  var B14 = "jtk-export-cancel";
  var T12 = "jtk-export-dimensions";
  var O18 = "jtk-export-download-tools";
  var R12 = "jsplumbtoolkit-export";
  var P14 = "Download";
  var G14 = "middle";
  var H10 = { png: "image/png", svg: "image/svg+xml", jpeg: "image/jpeg" };
  var D15 = [[x3, "dashstyle"], [g6, null], [m7, null], [b6, null], [y5, null], [A4, null]];
  function q10(t61) {
    var e78 = 32768;
    var i45 = 0, r53 = "", n91;
    var a48 = t61.length;
    while (i45 < a48) {
      n91 = t61.subarray(i45, Math.min(i45 + e78, a48));
      r53 += String.fromCodePoint.apply(null, n91);
      i45 += e78;
    }
    return btoa(r53);
  }
  function z14(t61) {
    var e78 = new TextEncoder().encode(t61);
    return q10(e78);
  }
  function F16(t61) {
    return z14(t61.outerHTML);
  }
  function U8(t61) {
    var e78 = F16(t61);
    return Z9(e78);
  }
  function Z9(t61) {
    return "data:image/svg+xml;base64,".concat(t61);
  }
  function $9(t61) {
    var e78 = { x: 0, y: 0 };
    var i45 = t61.group;
    while (i45 != null) {
      e78.x += i45.data.left;
      e78.y += i45.data.top;
      i45 = i45.group;
    }
    return e78;
  }
  var J7 = function() {
    function g31(t61, r53) {
      t(this, g31);
      o(this, "surface", void 0);
      o(this, "shapeLibrary", void 0);
      o(this, "minx", Infinity);
      o(this, "miny", Infinity);
      o(this, "maxx", -Infinity);
      o(this, "maxy", -Infinity);
      o(this, "minVertexX", Infinity);
      o(this, "minVertexY", Infinity);
      o(this, "maxVertexX", -Infinity);
      o(this, "maxVertexY", -Infinity);
      o(this, "minEdgeX", Infinity);
      o(this, "minEdgeY", Infinity);
      o(this, "maxEdgeX", -Infinity);
      o(this, "maxEdgeY", -Infinity);
      o(this, "style", void 0);
      o(this, "options", { fill: "white", outline: "black", showLabels: true, labelAttribute: "text", labelStrokeWidth: "0.25px", margins: { x: 10, y: 10 }, labelColor: "black", strokeWidth: 2, gridPaddingCells: 1 });
      this.surface = t61;
      this.shapeLibrary = r53 || t61._$_shapeLibrary;
      if (this.shapeLibrary == null) {
        Q("WARN: No shapeLibrary passed in to SvgExporter or registered on the Surface to export. A default node renderer will be used instead.");
      }
    }
    n(g31, [{ key: "_setOptions", value: function t61(e78) {
      e78 = e78 || {};
      if (e78.showLabels != null) {
        this.options.showLabels = e78.showLabels;
      }
      this.options.showGrid = e78.showGrid !== false;
      this.options.labelAttribute = e78.labelAttribute || this.options.labelAttribute;
      this.options.labelStrokeWidth = e78.labelStrokeWidth || this.options.labelStrokeWidth;
      this.options.margins = e78.margins || this.options.margins;
      this.options.labelColor = e78.labelColor || this.options.labelColor;
      this.options.outline = e78.outline || this.options.outline;
      this.options.fill = e78.fill || this.options.fill;
      this.options.strokeWidth = e78.strokeWidth || this.options.strokeWidth;
      if (e78.strokeWidth != null) {
        this.options.strokeWidth = e78.strokeWidth;
      }
      this.options.defaultSize = this.options.defaultSize || { w: 50, h: 50 };
      this.options.selection = e78.selection;
      this.options.path = e78.path;
      this.style = this._processStyle(e78.style);
    } }, { key: "_processStyle", value: function t61(e78) {
      if (e78 != null) {
        if (l2(e78)) {
          return e78;
        } else {
          var i45 = e78;
          var r53 = "";
          for (var n91 in i45) {
            r53 += "".concat(n91, " {\n");
            for (var a48 in i45[n91]) {
              r53 += "".concat(a48, ":").concat(i45[n91][a48], ";\n");
            }
            r53 += "}\n";
          }
          return r53;
        }
      } else {
        return null;
      }
    } }, { key: "_defaultRenderNode", value: function t61(e78) {
      return I2.node(p6, o({}, W2, this.options.strokeWidth));
    } }, { key: "_renderNode", value: function t61(e78) {
      if (this.shapeLibrary != null) {
        try {
          return this.shapeLibrary.renderCompiledShape(e78, e78.outlineWidth || this.options.strokeWidth);
        } catch (t62) {
          return this._defaultRenderNode(e78);
        }
      } else {
        return this._defaultRenderNode(e78);
      }
    } }, { key: "_processGroups", value: function t61(e78, i45) {
      var r53 = i45 ? i45.getGroups() : this.surface.toolkitInstance.getGroups();
      return this._processVertices(r53, e78, i45);
    } }, { key: "_processNodes", value: function t61(e78, i45) {
      var r53 = i45 ? i45.getNodes() : this.surface.toolkitInstance.getNodes();
      return this._processVertices(r53, e78, i45);
    } }, { key: "_processVertices", value: function t61(e78, i45, r53) {
      var n91 = this;
      var p49 = this.surface.getZoom();
      var f45 = this.surface.getContainer().getBoundingClientRect();
      return e78.map(function(t62) {
        var e79 = t62.data.width == null ? i45.w : t62.data.width;
        var r54 = t62.data.height == null ? i45.h : t62.data.height;
        if (t62.group != null) {
          n91.minVertexX = Math.min(n91.minVertexX, t62.data.left);
          n91.maxVertexX = Math.max(n91.maxVertexX, t62.data.left + e79);
          n91.minVertexY = Math.min(n91.minVertexY, t62.data.top);
          n91.maxVertexY = Math.max(n91.maxVertexY, t62.data.top + r54);
        }
        Array.from(n91.surface.getRenderedElement(t62).querySelectorAll(".jtk-shape *")).forEach(function(t63) {
          var e80 = t63.getBoundingClientRect();
          n91.minVertexX = Math.min(n91.minVertexX, (e80.left - f45.left) / p49);
          n91.maxVertexX = Math.max(n91.maxVertexX, (e80.right - f45.left) / p49);
          n91.minVertexY = Math.min(n91.minVertexY, (e80.top - f45.top) / p49);
          n91.maxVertexY = Math.max(n91.maxVertexY, (e80.bottom - f45.top) / p49);
        });
        n91.minx = Math.min(n91.minx, n91.minVertexX);
        n91.maxx = Math.max(n91.maxx, n91.maxVertexX);
        n91.miny = Math.min(n91.miny, n91.minVertexY);
        n91.maxy = Math.max(n91.maxy, n91.maxVertexY);
        var v41 = document.createElementNS(M3, d6);
        var y34 = n91._renderNode(t62.data);
        y34.removeAttribute(u8);
        y34.removeAttribute(c6);
        y34.setAttribute(w5, t62.data.fill || n91.options.fill);
        y34.setAttribute(j4, t62.data.outline || n91.options.outline);
        y34.setAttribute(W2, t62.data.outlineWidth || n91.options.strokeWidth);
        v41.appendChild(y34);
        var g32;
        if (n91.options.showLabels) {
          var x27 = t62.data[n91.options.labelAttribute];
          if (x27 != null && x27.length > 0) {
            g32 = document.createElementNS(M3, k3);
            g32.setAttribute(w5, t62.data.textColor || n91.options.labelColor);
            g32.setAttribute(j4, t62.data.textColor || n91.options.labelColor);
            g32.setAttribute(W2, n91.options.labelStrokeWidth);
            g32.setAttribute(C2, G14);
            g32.innerHTML = x27;
            v41.appendChild(g32);
          }
        }
        return { data: t62.data, g: v41, shape: y34, lbl: g32, groupOffset: $9(t62) };
      });
    } }, { key: "_resolveStrokeAttributes", value: function t61(e78, i45) {
      var r53 = {};
      D15.forEach(function(t62) {
        var n91 = e78.getAttribute(t62[0]);
        if (n91 == null) {
          var a48 = t62[1];
          if (a48 != null) {
            n91 = i45.paintStyleInUse[a48];
          }
          if (n91 == null) {
            n91 = window.getComputedStyle(e78)[t62[0]];
          }
        }
        if (n91 != null) {
          r53[t62[0]] = n91;
        }
      });
      return r53;
    } }, { key: "_processEdges", value: function t61(e78) {
      var r53 = this;
      var s40 = e78 ? e78.getAll().filter(function(t62) {
        return t62.objectType === S8.objectType;
      }) : this.surface.toolkitInstance.getAllEdges();
      return s40.map(function(t62) {
        var e79 = r53.surface.getRenderedConnection(t62.id);
        var s41 = e79.connector;
        var l48 = s41.canvas;
        var h35 = parseInt(l48.style.left, 10);
        var f45 = parseInt(l48.style.top, 10);
        var v41 = document.createElementNS(M3, "g");
        var y34 = Array.from(l48.querySelectorAll(h7));
        var g32 = y34.map(function(t63) {
          var e80 = r53._resolveStrokeAttributes(t63, s41.connection);
          var i45 = t63.getAttribute(j4) || "black";
          var n91 = parseFloat(t63.getAttribute("stroke-width") || "".concat(r53.options.strokeWidth));
          var a48 = (t63.getAttribute("transform") || "translate(0,0)").match(/translate\(([0-9\.]+),([0-9\.]+)\)/).slice(1).map(parseFloat);
          r53.minEdgeX = Math.min(r53.minEdgeX, s41.x + s41.bounds.xmin - n91);
          r53.maxEdgeX = Math.max(r53.maxEdgeX, s41.x + s41.bounds.xmax + n91);
          r53.minEdgeY = Math.min(r53.minEdgeY, s41.y + s41.bounds.ymin - n91);
          r53.maxEdgeY = Math.max(r53.maxEdgeY, s41.y + s41.bounds.ymax + n91);
          var o42 = { d: t63.getAttribute("d"), transform: a48, stroke: i45, fill: t63.getAttribute("fill") || v5, strokeWidth: n91 };
          Object.assign(o42, e80);
          return o42;
        });
        r53.minx = Math.min(r53.minx, r53.minEdgeX);
        r53.maxx = Math.max(r53.maxx, r53.maxEdgeX);
        r53.miny = Math.min(r53.miny, r53.minEdgeY);
        r53.maxy = Math.max(r53.maxy, r53.maxEdgeY);
        var x27 = Array.from(l48.querySelectorAll("g.".concat(c28)));
        var b28 = x27.map(function(t63) {
          var e80 = t63.querySelector(p6);
          var o42 = t63.querySelector(k3);
          if (e80 && o42) {
            var s42;
            var l49 = (o42.getAttribute("transform") || "translate(0,0)").match(/translate\(([0-9\.]+),([0-9\.]+)\)/).slice(1).map(parseFloat);
            var h36 = o42.getAttribute("fill") || r53.options.labelColor;
            var p49 = o42.getAttribute(W2) || r53.options.labelStrokeWidth;
            var f46 = { transform: l49, label: o42.textContent, bg: { fill: e80.getAttribute(w5) || "white", stroke: e80.getAttribute(j4) || v5, x: e80.getAttribute("x"), y: e80.getAttribute("y"), width: e80.getAttribute("width"), height: e80.getAttribute("height") }, text: (s42 = { fill: h36, stroke: h36 }, o(s42, W2, p49), o(s42, "x", o42.getAttribute("x")), o(s42, "y", o42.getAttribute("y")), o(s42, "dominant-baseline", G14), o(s42, C2, G14), s42) };
            return f46;
          } else {
            return null;
          }
        }).filter(function(t63) {
          return t63 != null;
        });
        return { edge: t62, connector: s41, connection: e79, g: v41, outputPaths: g32, outputTextGroups: b28, x: h35, y: f45 };
      });
    } }, { key: "exportCurrentSelection", value: function t61(e78) {
      return this.export(Object.assign(e78 || {}, { selection: this.surface.toolkitInstance.getSelection() }));
    } }, { key: "export", value: function t61(e78) {
      var a48, s40 = this;
      this.minx = Infinity;
      this.miny = Infinity;
      this.maxx = -Infinity;
      this.maxy = -Infinity;
      this._setOptions(e78);
      var l48 = null;
      if (this.options.path) {
        l48 = new N8(this.surface.toolkitInstance);
        l48.append(this.options.path);
      } else {
        l48 = this.options.selection;
      }
      var u52 = this._processGroups(this.options.defaultSize, l48);
      var d32 = this._processNodes(this.options.defaultSize, l48);
      var m44 = this._processEdges(l48);
      var g32;
      var x27 = null;
      if (this.options.showGrid !== false) {
        var b28 = this.surface.getPlugin(n90.type);
        if (b28 != null) {
          if (b28.background instanceof H9) {
            var w23 = b28.background;
            x27 = Object.assign({}, w23.grid);
            g32 = w23.generateGrid();
            var k20 = this.minx - this.options.gridPaddingCells * x27.w;
            k20 = x27.w * Math.floor(k20 / x27.w);
            var E17 = this.maxx + this.options.gridPaddingCells * x27.w;
            E17 = x27.w * Math.ceil(E17 / x27.w);
            this.minx = k20;
            this.maxx = E17;
            var C19 = this.miny - this.options.gridPaddingCells * x27.h;
            C19 = x27.h * Math.floor(C19 / x27.h);
            var A19 = this.maxy + this.options.gridPaddingCells * x27.h;
            A19 = x27.h * Math.ceil(A19 / x27.h);
            this.miny = C19;
            this.maxy = A19;
          }
        }
      }
      this.minx -= this.options.margins.x;
      this.miny -= this.options.margins.y;
      this.maxx += this.options.margins.x;
      this.maxy += this.options.margins.y;
      var S20 = this.maxx - this.minx;
      var L18 = this.maxy - this.miny;
      var _17 = I2.node(v6, (a48 = { viewBox: "0 0 ".concat(S20, " ").concat(L18) }, o(a48, c6, M3), o(a48, "xmlns:xlink", O5), o(a48, "version", "1.1"), a48));
      if (this.style != null) {
        var W12 = I2.node("style");
        _17.appendChild(W12);
        W12.innerHTML = this.style;
      }
      var X12 = this.shapeLibrary.getDefsElements();
      if (X12.length > 0) {
        var Y14 = I2.node(f8);
        _17.appendChild(Y14);
        X12.forEach(function(t62) {
          return Y14.appendChild(t62);
        });
      }
      var B16 = function t62(e79) {
        e79.forEach(function(t63) {
          var e80 = t63.data.left + t63.groupOffset.x - s40.minx, i45 = t63.data.top + t63.groupOffset.y - s40.miny;
          t63.shape.setAttribute("transform", "translate(".concat(e80, ",").concat(i45, ")"));
          if (t63.lbl) {
            var r53 = parseFloat(t63.data.width == null ? s40.options.defaultSize.w : t63.data.width);
            var n91 = parseFloat(t63.data.height == null ? s40.options.defaultSize.h : t63.data.height);
            t63.lbl.setAttribute("x", "" + r53 / 2);
            t63.lbl.setAttribute("y", "" + n91 / 2);
            t63.lbl.setAttribute("transform", "translate(".concat(e80, ",").concat(i45, ")"));
          }
          _17.append(t63.g);
        });
      };
      B16(u52);
      m44.forEach(function(t62) {
        var e79 = t62.x - s40.minx, i45 = t62.y - s40.miny;
        t62.outputPaths.forEach(function(r53) {
          var n91 = { transform: "translate(".concat(e79 + r53.transform[0], ",").concat(i45 + r53.transform[1], ")"), stroke: r53.stroke, fill: r53.fill, d: r53.d };
          D15.forEach(function(t63) {
            if (r53[t63[0]] != null) {
              n91[t63[0]] = r53[t63[0]];
            }
          });
          var a49 = document.createElementNS(M3, h7);
          for (var s41 in n91) {
            a49.setAttribute(s41, n91[s41]);
          }
          t62.g.appendChild(a49);
        });
        t62.outputTextGroups.forEach(function(r53) {
          var a49 = "translate(".concat(e79 + r53.transform[0], ",").concat(i45 + r53.transform[1], ")");
          var s41 = document.createElementNS(M3, p6);
          for (var l49 in r53.bg) {
            s41.setAttribute(l49, r53.bg[l49]);
          }
          s41.setAttribute("transform", a49);
          t62.g.appendChild(s41);
          var h35 = document.createElementNS(M3, k3);
          for (var u53 in r53.text) {
            h35.setAttribute(u53, r53.text[u53]);
          }
          h35.setAttribute("transform", a49);
          h35.textContent = r53.label;
          t62.g.appendChild(h35);
        });
        _17.appendChild(t62.g);
      });
      B16(d32);
      if (g32 != null) {
        var T18 = I2.node(v6, { x: this.options.margins.x, y: this.options.margins.y, width: S20 - 2 * this.options.margins.x + 1, height: L18 - 2 * this.options.margins.y + 1 });
        T18.innerHTML = g32;
        _17.insertBefore(T18, _17.firstChild);
      }
      var O22 = _17.outerHTML;
      _17.setAttribute(N7, "" + S20);
      _17.setAttribute(O9, "" + L18);
      return { width: S20, height: L18, element: _17, svg: _17.outerHTML, viewBoxOnlySvg: O22 };
    } }]);
    return g31;
  }();
  var K7 = function() {
    function r53(t61, n91) {
      t(this, r53);
      o(this, "surface", void 0);
      o(this, "shapeLibrary", void 0);
      o(this, "svgExporter", void 0);
      this.surface = t61;
      this.shapeLibrary = n91;
      this.svgExporter = new J7(this.surface, this.shapeLibrary);
    }
    n(r53, [{ key: "_doExport", value: function t61(e78, i45, r54) {
      i45 = i45 || {};
      var n91 = i45.type || "image/png";
      var a48 = i45.quality;
      var o42 = document.createElement("canvas");
      o42.style.left = "-50000px";
      o42.style.top = "-50000px";
      o42.style.opacity = "0";
      document.body.appendChild(o42);
      var s40 = o42.getContext("2d");
      var l48 = e78.width / e78.height;
      var h35 = e78.width, u52 = e78.height;
      if (i45.width) {
        h35 = i45.width;
        u52 = h35 / l48;
      } else if (i45.height) {
        u52 = i45.height;
        h35 = u52 * l48;
      }
      o42.width = h35;
      o42.height = u52;
      s40.fillStyle = "white";
      s40.fillRect(0, 0, h35, u52);
      var d32 = new Image();
      d32.onload = function() {
        s40.drawImage(d32, 0, 0, h35, u52);
        var t62 = o42.toDataURL(n91, a48);
        o42.parentElement.removeChild(o42);
        r54({ url: t62, width: h35, height: u52, contentType: n91, element: e78.element });
      };
      e78.element.setAttribute(N7, "".concat(h35));
      e78.element.setAttribute(O9, "".concat(u52));
      d32.src = U8(e78.element);
    } }, { key: "export", value: function t61(e78, i45) {
      var r54 = this.svgExporter.export(e78);
      this._doExport(r54, e78, i45);
    } }, { key: "exportCurrentSelection", value: function t61(e78, i45) {
      var r54 = this.svgExporter.exportCurrentSelection(e78);
      this._doExport(r54, e78, i45);
    } }]);
    return r53;
  }();
  var Q8 = function() {
    function r53(t61, n91) {
      var a48 = this;
      t(this, r53);
      o(this, "underlay", void 0);
      o(this, "overlay", void 0);
      o(this, "surface", void 0);
      o(this, "closeButton", void 0);
      o(this, "shapeLibrary", void 0);
      this.surface = t61;
      this.shapeLibrary = n91;
      this.underlay = document.createElement("div");
      this.underlay.className = X10;
      this.underlay.addEventListener(e10, function(t62) {
        if (t62.target === a48.underlay) {
          a48._cancel();
        }
      });
      this.overlay = document.createElement("div");
      this.overlay.className = Y12;
      this.closeButton = document.createElement("div");
      this.closeButton.className = B14;
      this.overlay.appendChild(this.closeButton);
      this.closeButton.addEventListener(e10, function() {
        a48._cancel();
      });
    }
    n(r53, [{ key: "_cancel", value: function t61() {
      this.underlay.parentNode.removeChild(this.underlay);
      this.overlay.parentNode.removeChild(this.overlay);
    } }, { key: "export", value: function t61(e78) {
      e78 = e78 || {};
      var i45 = new J7(this.surface, this.shapeLibrary);
      var r54 = i45.export(e78);
      this.overlay.appendChild(r54.element);
      var n91 = new Blob([r54.svg], { type: H10.svg });
      var a48 = URL.createObjectURL(n91);
      var o42 = document.createElement("a");
      o42.href = a48;
      o42.download = e78.filename || R12;
      o42.innerHTML = e78.downloadButtonLabel || P14;
      this.overlay.appendChild(o42);
      document.body.appendChild(this.underlay);
      document.body.appendChild(this.overlay);
    } }]);
    return r53;
  }();
  var tt2 = function() {
    function r53(t61, n91) {
      var a48 = this;
      t(this, r53);
      o(this, "underlay", void 0);
      o(this, "overlay", void 0);
      o(this, "closeButton", void 0);
      o(this, "surface", void 0);
      o(this, "shapeLibrary", void 0);
      this.surface = t61;
      this.shapeLibrary = n91;
      this.underlay = document.createElement("div");
      this.underlay.className = X10;
      this.underlay.addEventListener(e10, function(t62) {
        if (t62.target === a48.underlay) {
          a48._cancel();
        }
      });
      this.overlay = document.createElement("div");
      this.overlay.className = Y12;
      this.closeButton = document.createElement("div");
      this.closeButton.className = B14;
      this.overlay.appendChild(this.closeButton);
      this.closeButton.addEventListener(e10, function() {
        a48._cancel();
      });
    }
    n(r53, [{ key: "_cancel", value: function t61() {
      this.underlay.parentNode.removeChild(this.underlay);
      this.overlay.parentNode.removeChild(this.overlay);
    } }, { key: "_export", value: function t61(e78, i45) {
      var r54 = this;
      i45 = Object.assign({}, i45 || {});
      if (i45.dimensions) {
        Object.assign(i45, i45.dimensions[0]);
      }
      var n91 = new K7(this.surface, this.shapeLibrary);
      this._actuallyDoExport(n91, e78, i45, function(t62) {
        r54.overlay.appendChild(t62.element);
        var a48 = t62.width / t62.height;
        var o42 = document.createElement("div");
        o42.className = O18;
        r54.overlay.appendChild(o42);
        var s40 = document.createElement("a");
        s40.href = t62.url;
        s40.download = i45.filename || R12;
        s40.innerHTML = i45.downloadButtonLabel || P14;
        o42.appendChild(s40);
        if (i45.dimensions) {
          var l48 = document.createElement("select");
          l48.className = T12;
          i45.dimensions.forEach(function(t63) {
            var e79 = document.createElement("option");
            var i46 = t63.width ? Math.floor(t63.width / a48) : t63.height;
            var r55 = t63.width ? t63.width : Math.floor(t63.height * a48);
            e79.innerHTML = "".concat(r55, "x").concat(i46);
            e79.setAttribute(N7, "".concat(r55));
            e79.value = "".concat(r55);
            l48.appendChild(e79);
          });
          l48.addEventListener("change", function() {
            var t63 = l48.options[l48.selectedIndex], a49 = parseInt(t63.getAttribute(N7), 10);
            r54._actuallyDoExport(n91, e78, i45, function(t64) {
              i45.onDimensionsChanged && i45.onDimensionsChanged(t64.width, t64.height, t64.url);
              s40.href = t64.url;
            }, a49);
          });
          o42.appendChild(l48);
        }
        document.body.appendChild(r54.underlay);
        document.body.appendChild(r54.overlay);
        i45.onShow && i45.onShow(r54.overlay, t62.width, t62.height, t62.url);
      });
    } }, { key: "export", value: function t61(e78) {
      this._export(false, e78);
    } }, { key: "_actuallyDoExport", value: function t61(e78, i45, r54, n91, a48) {
      if (a48) {
        r54.width = a48;
        delete r54.height;
      }
      i45 ? e78.exportCurrentSelection(r54, n91) : e78.export(r54, n91);
    } }]);
    return r53;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui-inspector/inspector.js
  var A17 = "input";
  var T13 = "change";
  var U9 = "blur";
  var V12 = "keypress";
  var j23 = "jtk-inspector-active";
  var L14 = "jtk-inspector-inactive";
  var O19 = function(E17) {
    a(M20, E17);
    var N15 = s(M20);
    function M20(e78) {
      var t61;
      t(this, M20);
      t61 = N15.call(this);
      o(l(t61), "container", void 0);
      o(l(t61), "surface", void 0);
      o(l(t61), "toolkit", void 0);
      o(l(t61), "eventManager", void 0);
      o(l(t61), "_multipleSelections", void 0);
      o(l(t61), "_eventsSuspended", false);
      o(l(t61), "_pendingUpdates", {});
      o(l(t61), "autoCommit", true);
      o(l(t61), "doNotWriteBlankNewValues", true);
      o(l(t61), "renderEmptyContainer", void 0);
      o(l(t61), "refresh", void 0);
      o(l(t61), "afterUpdate", void 0);
      o(l(t61), "_resetting", false);
      o(l(t61), "_fieldMap", /* @__PURE__ */ new Map());
      o(l(t61), "current", []);
      o(l(t61), "_currentCommonData", {});
      o(l(t61), "_filter", void 0);
      o(l(t61), "_recomputeAndApply", function() {
        t61._recomputeCommonData();
        T11(t61._currentCommonData, t61.container);
        var e79 = t61.container.querySelectorAll(n3(t58.Attributes.FOCUS))[0];
        if (e79 != null) {
          e79.focus();
        }
        t61.fire(T13, t61._currentCommonData);
      });
      t61.container = e78.container;
      t61.surface = e78.surface;
      t61.toolkit = t61.surface.toolkitInstance;
      t61.eventManager = new oe();
      t61._multipleSelections = e78.multipleSelections !== false;
      t61.afterUpdate = e78.afterUpdate;
      t61.renderEmptyContainer = e78.renderEmptyContainer;
      t61.refresh = e78.refresh;
      t61.autoCommit = e78.autoCommit !== false;
      t61.doNotWriteBlankNewValues = e78.doNotWriteBlankNewValues !== false;
      t61._filter = e78.filter || function(e79) {
        return true;
      };
      t61.container.classList.add(L14);
      t61._bindEvents();
      return t61;
    }
    n(M20, [{ key: "_bindEvents", value: function e78() {
      var t61 = this;
      this.toolkit.bind(S9, function(e79) {
        if (!t61._eventsSuspended) {
          t61._edit(e79.obj);
        }
      });
      this.toolkit.bind(A8, function(e79) {
        t61._remove(e79.obj);
      });
      this.toolkit.bind(y11, function(e79) {
        t61._remove(e79.node);
      });
      this.toolkit.bind(T4, function(e79) {
        t61._remove(e79.port);
      });
      this.toolkit.bind(u16, function(e79) {
        t61._remove(e79.group);
      });
      this.toolkit.bind(l12, function(e79) {
        t61._remove(e79.edge);
      });
      this.toolkit.bind(L6, function() {
        if (t61.autoCommit) {
          var e79 = Array.from(t61._fieldMap.entries()).filter(function(e80) {
            return e80[1].edited && e80[1].editedValue != null;
          });
          e79.forEach(function(e80) {
            t61.setValue(e80[0], e80[1].editedValue);
            delete e80[1].editedValue;
          });
        }
        t61.reset(false);
      });
      this.toolkit.bind(K4, function(e79) {
        if (!t61._eventsSuspended) {
          t61._resetting = true;
          t61._edit();
          t61._resetting = false;
        }
      });
      var i45 = function e79(i46) {
        if (!t61._resetting) {
          setTimeout(function() {
            var e80 = i46.target, r54 = e80.getAttribute(t58.Attributes.JTK);
            if (r54 != null && (e80.type.toUpperCase() === t58.Elements.TEXT || e80.tagName.toUpperCase() === t58.Elements.TEXTAREA)) {
              if (e80.checkValidity == null || e80.checkValidity()) {
                var n92 = t61._fieldMap.get(r54);
                if (n92 != null) {
                  if (!n92.common || n92.edited) {
                    var a49 = e80.value;
                    t61.setValue(r54, a49);
                    n92.edited = false;
                    delete n92.editedValue;
                  }
                }
              }
            }
          }, 0);
        }
      };
      this.container.addEventListener(U9, i45, true);
      var r53 = function e79(i46) {
        if (!t61._resetting) {
          var r54 = i46.target, n92 = r54.type.toUpperCase(), a49 = r54.getAttribute(t58.Attributes.JTK);
          if (a49 != null) {
            if (n92 === t58.Elements.CHECKBOX) {
              t61.setValue(a49, r54.checked === true);
            } else if (n92 === t58.Elements.RADIO) {
              if (r54.checked) {
                t61.setValue(a49, r54.value);
              }
            } else if (n92 === t58.Elements.COLOR || n92 === t58.Elements.NUMBER) {
              t61.setValue(a49, r54.value);
            } else if (n92 === t58.Elements.TEXT || r54.tagName.toUpperCase() === t58.Elements.TEXTAREA) {
              var s40 = t61._fieldMap.get(a49);
              s40.edited = true;
              s40.editedValue = r54.value;
            } else if (r54.tagName.toUpperCase() === t58.Elements.SELECT) {
              t61.setValue(a49, r54.value);
            }
          }
        }
      };
      this.container.addEventListener(T13, r53, true);
      var n91 = function e79(i46) {
        if (!t61._resetting) {
          var r54 = i46.target;
          r54.type.toUpperCase();
          var n92 = r54.getAttribute(t58.Attributes.JTK);
          if (n92 != null) {
            if (r54.type.toUpperCase() === t58.Elements.TEXT || r54.tagName.toUpperCase() === t58.Elements.TEXTAREA) {
              var a49 = t61._fieldMap.get(n92);
              a49.edited = true;
              a49.editedValue = r54.value;
            }
          }
        }
      };
      this.container.addEventListener(A17, n91, true);
      var a48 = function e79(i46) {
        if (!t61._resetting) {
          var r54 = i46.target;
          r54.type.toUpperCase();
          var n92 = r54.getAttribute(t58.Attributes.JTK);
          if (n92 != null && (i46.keyCode === 13 || i46.key === "13")) {
            if (r54.type.toUpperCase() === t58.Elements.TEXT || r54.tagName.toUpperCase() === t58.Elements.TEXTAREA) {
              var a49 = t61._fieldMap.get(n92);
              a49.edited = true;
              t61.setValue(n92, r54.value);
            }
          }
        }
      };
      this.container.addEventListener(V12, a48, true);
      this.surface.bind(t6, function() {
        t61.container.removeEventListener(V12, a48);
        t61.container.removeEventListener(T13, r53);
        t61.container.removeEventListener(U9, i45);
        t61.container.removeEventListener(A17, n91);
        t61._destroy();
      });
    } }, { key: "_recomputeCommonData", value: function e78() {
      this._currentCommonData = {};
      var t61 = {};
      for (var i45 = 0; i45 < this.current.length; i45++) {
        for (var r53 in this.current[i45].data) {
          if (!t61[r53]) {
            var n91 = this.current[i45].data[r53];
            if (this._currentCommonData[r53] == null) {
              this._currentCommonData[r53] = n91;
            } else {
              if (this._currentCommonData[r53] !== n91) {
                t61[r53] = true;
                this._currentCommonData[r53] = "";
              }
            }
          }
        }
      }
      for (var a48 in t61) {
        var s40 = this._fieldMap.get(a48);
        if (s40 != null) {
          s40.common = true;
          s40.commonValue = this._currentCommonData[a48];
        }
      }
    } }, { key: "__filterEmptyStrings", value: function e78(t61, i45, r53) {
      var n91 = {};
      for (var a48 in t61) {
        if (r53.has(a48)) {
          if (i45[a48] != null) {
            n91[a48] = "";
          }
        } else {
          n91[a48] = t61[a48];
        }
      }
      return n91;
    } }, { key: "_persistChanges", value: function e78(t61) {
      var i45 = this;
      this._eventsSuspended = true;
      var r53 = this.doNotWriteBlankNewValues ? new Map(Object.entries(t61).filter(function(e79) {
        return typeof e79[1] === "string" && e79[1].length === 0;
      })) : null;
      var n91 = 0;
      try {
        this.toolkit.openTransaction();
        try {
          this.current.forEach(function(e79, a48) {
            if (i45.doNotWriteBlankNewValues) {
              var s40 = i45.__filterEmptyStrings(t61, e79.data, r53);
              if (Object.keys(s40).length > 0) {
                i45.toolkit.update(e79, s40);
                n91++;
              }
            } else {
              i45.toolkit.update(e79, t61);
              n91++;
            }
          });
        } catch (e79) {
          Q("WARN: error occurred updating item from inspector");
        }
        if (n91 > 0) {
          this.toolkit.commitTransaction();
        } else {
          this.toolkit.rollbackTransaction();
        }
        this.afterUpdate && this.afterUpdate();
      } finally {
        this._eventsSuspended = false;
      }
    } }, { key: "_updateCurrent", value: function e78(t61) {
      if (this.autoCommit) {
        this._persistChanges(t61);
      } else {
        Object.assign(this._pendingUpdates, t61);
      }
    } }, { key: "reset", value: function e78(t61) {
      try {
        this._resetting = true;
        this._pendingUpdates = {};
        this.container.classList.remove(j23);
        this.container.classList.add(L14);
        if (!t61) {
          this.renderEmptyContainer();
          this.current.length = 0;
        }
      } finally {
        this._resetting = false;
      }
    } }, { key: "_destroy", value: function e78() {
      this.current.length = 0;
      this._pendingUpdates = {};
      this._fieldMap.clear();
      this.container.innerHTML = "";
    } }, { key: "_remove", value: function e78(t61) {
      var i45 = this.current.indexOf(t61);
      if (i45 !== -1) {
        this.current.splice(i45, 1);
      } else {
        if (f14(t61) || y10(t61)) {
          i45 = this.current.findIndex(function(e79) {
            return b11(e79) && e79.getParent().id === t61.id;
          });
          if (i45 !== -1) {
            this.current.splice(i45, 1);
          }
        }
      }
      if (this.current.length === 0) {
        this.reset(false);
      } else {
        this._recomputeCommonData();
      }
    } }, { key: "_edit", value: function e78(t61) {
      var i45 = this;
      if (t61 != null && !this._filter(t61)) {
        return;
      }
      var r53 = !this._multipleSelections || this.current.length === 0;
      if (r53) {
        this.reset(true);
      }
      if (t61 != null) {
        this.container.classList.remove(L14);
        this.container.classList.add(j23);
        this._pendingUpdates = {};
        if (t61 != null) {
          this.current.push(t61);
        }
        var n91 = function e79() {
          i45._fieldMap.clear();
          var t62 = i45.container.querySelectorAll(n3(t58.Attributes.JTK));
          t62.forEach(function(e80) {
            var t63 = e80.getAttribute(t58.Attributes.JTK);
            i45._fieldMap.set(t63, { field: e80, edited: false, common: false, commonValue: null, attribute: t63 });
          });
          i45._recomputeAndApply();
        };
        if (r53) {
          if (t61 != null) {
            this.refresh(t61, n91);
          } else {
            n91();
          }
        } else {
          this._recomputeAndApply();
        }
      } else {
        this.container.classList.add(L14);
      }
    } }, { key: "setValue", value: function e78(t61, i45) {
      this._updateCurrent(o({}, t61, i45));
    } }, { key: "getValue", value: function e78(t61) {
      return this._currentCommonData[t61];
    } }, { key: "onChange", value: function e78(t61) {
      this.bind(T13, t61);
    } }, { key: "persist", value: function e78() {
      var t61 = Object.keys(this._pendingUpdates).length;
      if (t61 > 0) {
        this._persistChanges(this._pendingUpdates);
        this._pendingUpdates = {};
      }
      return t61;
    } }, { key: "hasPendingChanges", value: function e78() {
      return Object.keys(this._pendingUpdates).length > 0;
    } }]);
    return M20;
  }(f17);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui-inspector/vanilla-inspector.js
  var p47 = "<div/>";
  var h32 = function() {
    function h35(e78) {
      var i45 = this;
      t(this, h35);
      o(this, "toolkit", void 0);
      o(this, "templateRenderer", m41());
      o(this, "emptyTemplateFn", void 0);
      o(this, "templateResolver", void 0);
      o(this, "vertexTemplateCache", /* @__PURE__ */ new Map());
      o(this, "edgeTemplateCache", /* @__PURE__ */ new Map());
      o(this, "portTemplateCache", /* @__PURE__ */ new Map());
      o(this, "_doCacheTemplates", void 0);
      o(this, "inspector", void 0);
      this.toolkit = e78.surface.toolkitInstance;
      this._doCacheTemplates = e78.cacheTemplates !== false;
      var s40 = Object.assign(e78, { refresh: function e79(t61, r53) {
        i45.inspector.container.replaceChildren(i45._renderTemplate(t61));
        r53();
      }, renderEmptyContainer: function e79() {
        var t61 = i45.templateRenderer.render(i45.emptyTemplateFn).fragment;
        i45.inspector.container.replaceChildren(t61);
      } });
      this.inspector = new O19(s40);
      this.templateResolver = e78.templateResolver;
      this.emptyTemplateFn = this.templateRenderer.parse(e78.emptyTemplate || p47);
    }
    n(h35, [{ key: "registerTag", value: function e78(t61, r53) {
      this.templateRenderer.registerTag(t61, r53);
    } }, { key: "getPortTemplate", value: function e78(t61) {
      var r53 = this.toolkit.getPortType(t61.data);
      var a48 = this.portTemplateCache.get(r53);
      if (a48 == null) {
        var i45 = this.templateResolver(t61);
        if (i45 == null) {
          throw new Error("Could not retrieve template for port of type ".concat(r53));
        }
        a48 = this.templateRenderer.parse(i45);
        if (this._doCacheTemplates) {
          this.portTemplateCache.set(r53, a48);
        }
      }
      return a48;
    } }, { key: "getNodeTemplate", value: function e78(t61) {
      var r53 = this.toolkit.getNodeType(t61.data);
      var a48 = this.vertexTemplateCache.get(r53);
      if (a48 == null) {
        var i45 = this.templateResolver(t61);
        if (i45 == null) {
          throw new Error("Could not retrieve template for vertex of type ".concat(r53));
        }
        a48 = this.templateRenderer.parse(i45);
        if (this._doCacheTemplates) {
          this.vertexTemplateCache.set(r53, a48);
        }
      }
      return a48;
    } }, { key: "getGroupTemplate", value: function e78(t61) {
      return this.getNodeTemplate(t61);
    } }, { key: "getEdgeTemplate", value: function e78(t61) {
      var r53 = this.toolkit.getEdgeType(t61.data);
      var a48 = this.edgeTemplateCache.get(r53);
      if (a48 == null) {
        var i45 = this.templateResolver(t61);
        if (i45 == null) {
          throw new Error("Could not retrieve template for edge of type ".concat(r53));
        }
        a48 = this.templateRenderer.parse(i45);
        if (this._doCacheTemplates) {
          this.edgeTemplateCache.set(r53, a48);
        }
      }
      return a48;
    } }, { key: "_renderTemplate", value: function e78(t61) {
      var r53;
      if (f14(t61)) {
        r53 = this.getNodeTemplate(t61);
      } else if (y10(t61)) {
        r53 = this.getGroupTemplate(t61);
      } else if (b11(t61)) {
        r53 = this.getPortTemplate(t61);
      } else if (m13(t61)) {
        r53 = this.getEdgeTemplate(t61);
      }
      return this.templateRenderer.render(r53, t61.data).fragment;
    } }, { key: "setValue", value: function e78(t61, r53) {
      this.inspector.setValue(t61, r53);
    } }, { key: "persist", value: function e78() {
      return this.inspector.persist();
    } }, { key: "hasPendingChanges", value: function e78() {
      return this.inspector.hasPendingChanges();
    } }]);
    return h35;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui-plugin-snaplines/snaplines-plugin.js
  var h33 = "left";
  var v39 = "right";
  var u50 = "top";
  var f44 = "bottom";
  var d31 = "center";
  var g30 = "h";
  var p48 = "v";
  var b26 = "jtk-snapline";
  var m42 = "jtk-snapline-vertical";
  var R13 = "jtk-snapline-horizontal";
  var y31 = "jtk-snapline-exact";
  var j24 = "jtk-snapline-active";
  var x25 = "jtk-snapline-active-exact";
  var _14 = function() {
    function n91() {
      t(this, n91);
      o(this, "surface", void 0);
      o(this, "panZoom", void 0);
      o(this, "tolerance", 5);
      o(this, "showCenters", void 0);
      o(this, "showEdges", void 0);
      o(this, "verticalRanges", []);
      o(this, "horizontalRanges", []);
      o(this, "selectedRanges", []);
      o(this, "focus", null);
      o(this, "enabled", true);
    }
    n(n91, [{ key: "setEnabled", value: function e78(t61) {
      var a48 = this.enabled;
      this.enabled = t61;
      if (a48) {
        this.reset();
      }
    } }, { key: "initialise", value: function e78(t61, a48) {
      var n92 = this;
      this.surface = t61;
      this.panZoom = t61.panZoom;
      this.tolerance = a48.tolerance || 5;
      this.showCenters = a48.showCenters !== false;
      this.showEdges = a48.showEdges !== false;
      this.enabled = a48.enabled !== false;
      this.surface.bind(G6, function(e79) {
        if (n92.enabled) {
          var t62 = n92.surface.jsplumb.getManagedElements();
          n92.focus = t62[e79.vertex.id];
          n92.verticalRanges.length = 0;
          n92.horizontalRanges.length = 0;
          n92.selectedRanges.length = 0;
          for (var a49 in t62) {
            if (a49 !== e79.vertex.id) {
              var r53 = t62[a49].viewportElement, i45 = r53.w, s40 = r53.h;
              if (n92.showEdges) {
                n92.horizontalRanges.push({ position: h33, start: r53.x - n92.tolerance, end: r53.x + n92.tolerance, objId: a49, line: n92._createVertical(r53.x), el: t62[a49].el, orientation: "v" });
                n92.horizontalRanges.push({ position: v39, start: r53.x + i45 - n92.tolerance, end: r53.x + i45 + n92.tolerance, objId: a49, line: n92._createVertical(r53.x + i45), el: t62[a49].el, orientation: "v" });
                n92.verticalRanges.push({ position: u50, start: r53.y - n92.tolerance, end: r53.y + n92.tolerance, objId: a49, line: n92._createHorizontal(r53.y), el: t62[a49].el, orientation: "h" });
                n92.verticalRanges.push({ position: f44, start: r53.y + r53.h - n92.tolerance, end: r53.y + r53.h + n92.tolerance, objId: a49, line: n92._createHorizontal(r53.y + s40), el: t62[a49].el, orientation: "h" });
              }
              if (n92.showCenters) {
                n92.horizontalRanges.push({ position: d31, start: r53.x + i45 / 2 - n92.tolerance, end: r53.x + i45 / 2 + n92.tolerance, objId: a49, line: n92._createVertical(r53.x + i45 / 2), el: t62[a49].el, orientation: "v" });
                n92.verticalRanges.push({ position: d31, start: r53.y + s40 / 2 - n92.tolerance, end: r53.y + s40 / 2 + n92.tolerance, objId: a49, line: n92._createHorizontal(r53.y + s40 / 2), el: t62[a49].el, orientation: "h" });
              }
            }
          }
        }
      });
      this.surface.bind(H4, function(e79) {
        if (n92.enabled) {
          n92._clearSelectedRanges();
          var t62 = e79.pos.x, a49 = t62 + n92.focus.viewportElement.w / 2, r53 = t62 + n92.focus.viewportElement.w;
          var i45 = e79.pos.y, s40 = i45 + n92.focus.viewportElement.h / 2, o42 = i45 + n92.focus.viewportElement.h;
          var l48 = {};
          for (var c47 = 0; c47 < n92.horizontalRanges.length; c47++) {
            var h35 = n92.horizontalRanges[c47];
            if (!l48[h35.objId]) {
              if (h35.start <= a49 && h35.end >= a49) {
                l48[h35.objId] = true;
                n92._activateRange(h35, a49);
              } else if (h35.start <= t62 && h35.end >= t62) {
                l48[h35.objId] = true;
                n92._activateRange(h35, t62);
              } else if (h35.start <= r53 && h35.end >= r53) {
                l48[h35.objId] = true;
                n92._activateRange(h35, r53);
              }
            }
          }
          for (var v41 = 0; v41 < n92.verticalRanges.length; v41++) {
            var u52 = n92.verticalRanges[v41];
            if (!l48[u52.objId]) {
              if (u52.start <= s40 && u52.end >= s40) {
                l48[u52.objId] = true;
                n92._activateRange(u52, s40);
              } else if (u52.start <= i45 && u52.end >= i45) {
                l48[u52.objId] = true;
                n92._activateRange(u52, i45);
              } else if (u52.start <= o42 && u52.end >= o42) {
                l48[u52.objId] = true;
                n92._activateRange(u52, o42);
              }
            }
          }
        }
      });
      this.surface.bind(I8, function(e79) {
        if (n92.enabled) {
          n92._clearSelectedRanges();
          n92.verticalRanges.forEach(function(e80) {
            n92.surface.unfixElement(e80.line);
          });
          n92.horizontalRanges.forEach(function(e80) {
            n92.surface.unfixElement(e80.line);
          });
          n92.verticalRanges.length = 0;
          n92.horizontalRanges.length = 0;
        }
      });
      return true;
    } }, { key: "_activateRange", value: function e78(t61, a48) {
      this.selectedRanges.push(t61);
      var n92 = (t61.start + t61.end) / 2;
      var r53 = Math.abs(a48 - n92) < 0.01;
      if (r53) {
        t61.line.classList.add("".concat(y31));
      } else {
        t61.line.classList.remove("".concat(y31));
      }
      var i45 = { x: t61.orientation === g30 ? -5e4 : n92, y: t61.orientation === p48 ? -5e4 : n92 };
      this.surface.fixElement(t61.line, i45);
      h5(t61.el, "".concat(j24));
      if (r53) {
        h5(t61.el, "".concat(x25));
      }
    } }, { key: "_clearSelectedRanges", value: function e78() {
      var t61 = this;
      this.selectedRanges.forEach(function(e79) {
        e79.line.classList.remove("".concat(y31));
        t61.surface.unfixElement(e79.line);
        y3(e79.el, "".concat(j24));
        y3(e79.el, "".concat(x25));
      });
    } }, { key: "_createHorizontal", value: function e78(t61) {
      var a48 = document.createElement(m24);
      a48.className = "".concat(b26, " ").concat(R13);
      a48.style.left = "-50000px";
      a48.style.right = "-50000px";
      a48.style.top = "".concat(t61, "px");
      return a48;
    } }, { key: "_createVertical", value: function e78(t61) {
      var a48 = document.createElement(m24);
      a48.className = "".concat(b26, " ").concat(m42);
      a48.style.top = "-50000px";
      a48.style.bottom = "-50000px";
      a48.style.left = "".concat(t61, "px");
      return a48;
    } }, { key: "destroy", value: function e78() {
      this._clearSelectedRanges();
    } }, { key: "reset", value: function e78() {
      this._clearSelectedRanges();
    } }]);
    return n91;
  }();
  o(_14, "type", "snaplines");
  qo.register(_14.type, _14);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui-plugin-drawing-tools/drawing-tools-plugin.js
  var M17 = 30;
  var G15 = 30;
  var H11 = "jtk-draw-skeleton";
  var D16 = "jtk-draw-handle";
  var E13 = "jtk-draw-drag";
  var W11 = "jtk-draw-handle-tl";
  var O20 = "jtk-draw-handle-bl";
  var z15 = "jtk-draw-handle-tr";
  var C17 = "jtk-draw-handle-br";
  var S18 = "jtk-x-resize";
  var I15 = "jtk-y-resize";
  var N12 = "jtk-resizable";
  var X11 = "data-dir";
  var Y13 = "data-node-id";
  var P15 = function() {
    function o42() {
      var t61 = this;
      t(this, o42);
      o(this, "surface", void 0);
      o(this, "toolkit", void 0);
      o(this, "jsp", void 0);
      o(this, "widthAtt", void 0);
      o(this, "heightAtt", void 0);
      o(this, "leftAtt", void 0);
      o(this, "topAtt", void 0);
      o(this, "xAxis", void 0);
      o(this, "yAxis", void 0);
      o(this, "resizeX", void 0);
      o(this, "resizeY", void 0);
      o(this, "onEdit", void 0);
      o(this, "onDemand", void 0);
      o(this, "skeletons", void 0);
      o(this, "_viewportElement", void 0);
      o(this, "downAt", void 0);
      o(this, "handler", void 0);
      o(this, "toolkitDragObject", void 0);
      o(this, "x1", void 0);
      o(this, "x2", void 0);
      o(this, "y1", void 0);
      o(this, "y2", void 0);
      o(this, "minimumHeight", void 0);
      o(this, "minimumWidth", void 0);
      o(this, "currentMinimumWidth", void 0);
      o(this, "currentMinimumHeight", void 0);
      o(this, "elasticGroupManager", void 0);
      o(this, "ignoreGrid", void 0);
      o(this, "grid", void 0);
      o(this, "_constrainGroups", void 0);
      o(this, "_moving", false);
      o(this, "_payloadGenerator", void 0);
      o(this, "_dragHandlers", { tl: function i45(e78, r53) {
        var o43 = t61.x1 + e78, a48 = t61.y1 + r53, n91 = t61.x2 - o43, s40 = t61.y2 - a48, d32 = t61._minWidth(), h35 = t61._minHeight();
        if (t61.grid && !t61.ignoreGrid) {
          var u52 = p10({ x: o43, y: a48 }, t61.grid);
          o43 = u52.x;
          a48 = u52.y;
          var l48 = p10({ x: t61.x2, y: t61.y2 }, t61.grid);
          n91 = l48.x - o43;
          s40 = l48.y - a48;
        }
        if (o43 > t61.x2 - d32) {
          o43 = t61.x2 - d32;
          n91 = d32;
        }
        if (a48 > t61.y2 - h35) {
          a48 = t61.y2 - h35;
          s40 = h35;
        }
        return t61._dim(o43, a48, n91, s40);
      }, tr: function i45(e78, r53) {
        var o43 = t61.x2 - t61.x1 + e78, a48 = t61.y1 + r53, n91 = t61.y2 - a48, s40 = t61.x1, d32 = t61._minWidth(), h35 = t61._minHeight();
        if (t61.grid && !t61.ignoreGrid) {
          var u52 = p10({ x: s40 + o43, y: a48 }, t61.grid);
          o43 = u52.x - s40;
          a48 = u52.y;
          var l48 = p10({ x: t61.x2, y: t61.y2 }, t61.grid);
          n91 = l48.y - a48;
        }
        if (o43 < d32) {
          o43 = d32;
        }
        if (a48 > t61.y2 - h35) {
          a48 = t61.y2 - h35;
          n91 = h35;
        }
        return t61._dim(s40, a48, o43, n91);
      }, bl: function i45(e78, r53) {
        var o43 = t61.x1 + e78, a48 = t61.y2 - t61.y1 + r53, n91 = t61.x2 - o43, s40 = t61.y1, d32 = t61._minWidth(), h35 = t61._minHeight();
        if (t61.grid && !t61.ignoreGrid) {
          var u52 = p10({ x: o43, y: s40 + a48 }, t61.grid);
          o43 = u52.x;
          a48 = u52.y - s40;
          var l48 = p10({ x: t61.x2, y: u52.y }, t61.grid);
          n91 = l48.x - o43;
        }
        if (o43 > t61.x2 - d32) {
          o43 = t61.x2 - d32;
          n91 = d32;
        }
        if (a48 < h35) {
          a48 = h35;
        }
        return t61._dim(o43, s40, n91, a48);
      }, br: function i45(e78, r53) {
        var o43 = t61.x2 - t61.x1 + e78, a48 = t61.y2 - t61.y1 + r53, n91 = t61.x1, s40 = t61.y1, d32 = t61._minWidth(), h35 = t61._minHeight();
        if (t61.grid && !t61.ignoreGrid) {
          var u52 = p10({ x: n91 + o43, y: s40 + a48 }, t61.grid);
          o43 = u52.x - n91;
          a48 = u52.y - s40;
        }
        if (o43 < d32) {
          o43 = d32;
        }
        if (a48 < h35) {
          a48 = h35;
        }
        return t61._dim(n91, s40, o43, a48);
      } });
    }
    n(o42, [{ key: "destroy", value: function t61() {
    } }, { key: "initialise", value: function t61(i45, e78) {
      var o43 = this;
      this.surface = i45;
      this.toolkit = i45.toolkitInstance;
      this.jsp = i45.jsplumb;
      this.skeletons = {};
      this.widthAtt = e78.widthAttribute || N7;
      this.heightAtt = e78.heightAttribute || O9;
      this.leftAtt = e78.leftAttribute || n16;
      this.topAtt = e78.topAttribute || o20;
      this.onEdit = e78.onEdit || function() {
      };
      this.onDemand = e78.onDemand === true;
      this.minimumWidth = e78.minimumWidth != null && e78.minimumWidth > 0 ? e78.minimumWidth : M17;
      this.minimumHeight = e78.minimumHeight != null && e78.minimumHeight > 0 ? e78.minimumHeight : G15;
      this.grid = this.surface.getGrid();
      this.ignoreGrid = e78.ignoreGrid === true;
      this._constrainGroups = e78.constrainGroups !== false;
      this._payloadGenerator = e78.payloadGenerator || function(t62, i46) {
        return i46;
      };
      this.resizeX = e78.resizeX !== false;
      this.resizeY = e78.resizeY !== false;
      this.toolkit.bind(L6, function() {
        o43.reset();
      });
      this.toolkit.bind(S9, function(t62) {
        if (o43.onDemand !== true) {
          o43._select(t62.obj);
        }
      });
      this.toolkit.bind(A8, function(t62) {
        if (o43.onDemand !== true) {
          o43._deselect(t62.obj);
        }
      });
      var u52 = function t62(i46) {
        if (!o43._moving) {
          o43.toolkit.openTransaction();
        }
        o43._moving = true;
        i5(i46);
        var e79 = o43.surface.mapEventLocation(i46), a48 = e79.x - o43.downAt.x, n91 = e79.y - o43.downAt.y;
        if (o43.grid && !o43.ignoreGrid) {
          a48 = (a48 < 0 ? Math.ceil(a48 / o43.grid.w) : Math.floor(a48 / o43.grid.w)) * o43.grid.w;
          n91 = (n91 < 0 ? Math.ceil(n91 / o43.grid.h) : Math.floor(n91 / o43.grid.h)) * o43.grid.h;
        }
        var s40 = o43.handler(a48, n91);
        var d32 = o43._payloadGenerator(o43.toolkitDragObject, s40) || {};
        var u53 = Object.assign(d32, s40);
        o43.toolkit.update(o43.toolkitDragObject, u53, Ee);
        o43.surface.setPosition(o43.toolkitDragObject, u53[o43.leftAtt], s40[o43.topAtt]);
        if (o43.elasticGroupManager != null) {
          o43.elasticGroupManager.setFocusPosition({ x: d32[o43.surface._modelLeftAttribute], y: d32[o43.surface._modelTopAttribute] }, i46, { w: o43._viewportElement.w, h: o43._viewportElement.h });
        }
      };
      var x27 = function t62(i46) {
        o43._moving = false;
        o43.surface.storePositionInModel(o43.toolkitDragObject.id);
        o43.jsp.removeClass(document.body, qa);
        o43.jsp.off(document, m10, u52);
        o43.jsp.off(document, u11, t62);
        i5(i46);
        o43.onEdit(o43.toolkitDragObject);
        if (o43.elasticGroupManager) {
          o43.surface._persistElasticGroup(o43.elasticGroupManager);
          o43.elasticGroupManager && o43.elasticGroupManager.cleanup();
          o43.elasticGroupManager = null;
        }
        o43.toolkit.commitTransaction();
      };
      this.jsp.on(this.jsp.getContainer(), t4, a5(D16), function(t62) {
        i5(t62);
        var i46 = t62.target.getAttribute(X11), e79 = t62.target.getAttribute(Y13);
        o43.toolkitDragObject = o43.toolkit.getNode(e79) || o43.toolkit.getGroup(e79);
        o43.xAxis = o43.skeletons[e79].resizeX;
        o43.yAxis = o43.skeletons[e79].resizeY;
        o43.downAt = o43.surface.mapEventLocation(t62);
        o43._viewportElement = o43.surface.jsplumb.viewport._elementMap.get(o43.toolkitDragObject.id);
        var r53 = o43._getCoordinates(o43.toolkitDragObject);
        o43.x1 = r53.x;
        o43.y1 = r53.y;
        o43.x2 = o43._viewportElement.w + o43.x1;
        o43.y2 = o43._viewportElement.h + o43.y1;
        if (y10(o43.toolkitDragObject)) {
          var a48 = o43.surface.jsplumb.getGroup(o43.toolkitDragObject.id);
          if (!a48.collapsed) {
            if (o43._constrainGroups) {
              var l48 = o43.surface.jsplumb.viewport._elementMap.get(a48.id);
              var c47 = Infinity, v41 = -Infinity, g31 = Infinity, f45 = -Infinity;
              o43.toolkitDragObject.members.forEach(function(t63) {
                var i47 = o43.surface.jsplumb.viewport._elementMap.get(t63.id);
                var e80 = W(i47, l48, -1);
                c47 = Math.min(c47, e80.x);
                g31 = Math.min(g31, e80.y);
                v41 = Math.max(v41, e80.x + e80.w);
                f45 = Math.max(f45, e80.y + e80.h);
              });
              o43.currentMinimumWidth = v41;
              o43.currentMinimumHeight = f45;
            } else {
              o43.currentMinimumWidth = o43.minimumWidth;
              o43.currentMinimumHeight = o43.minimumHeight;
            }
          } else {
            return;
          }
        } else {
          o43.currentMinimumWidth = o43.minimumWidth;
          o43.currentMinimumHeight = o43.minimumHeight;
        }
        o43.handler = o43._dragHandlers[i46];
        o43.jsp.addClass(document.body, qa);
        o43.jsp.on(document, m10, u52);
        o43.jsp.on(document, u11, x27);
        if (o43.toolkitDragObject.group != null) {
          var p49 = o43.surface.view.getGroupDefinition(o43.toolkitDragObject.group.type);
          if (p49.elastic) {
            o43.elasticGroupManager = new y28(o43.surface, o43.toolkitDragObject, o43.toolkitDragObject.group, p49, t62.metaKey);
          }
        }
      });
      return false;
    } }, { key: "_getCoordinates", value: function t61(i45) {
      var e78 = this.surface.jsplumb.viewport._elementMap.get(i45.id);
      var r53 = { x: e78.x, y: e78.y, w: e78.w, h: e78.h };
      if (i45.group) {
        var o43 = this.surface.jsplumb.viewport._elementMap.get(i45.group.id);
        r53.x -= o43.x;
        r53.y -= o43.y;
      }
      return r53;
    } }, { key: "reset", value: function t61() {
      this.elasticGroupManager = null;
      for (var i45 in this.skeletons) {
        var e78 = this.skeletons[i45];
        if (e78.el && e78.el.parentNode) {
          e78.el.parentNode.removeChild(e78.el);
        }
        delete this.skeletons[i45];
      }
    } }, { key: "_minWidth", value: function t61() {
      return this.grid != null && !this.ignoreGrid ? this.grid.w : this.currentMinimumWidth;
    } }, { key: "_minHeight", value: function t61() {
      return this.grid != null && !this.ignoreGrid ? this.grid.h : this.currentMinimumHeight;
    } }, { key: "_create", value: function t61(i45, e78, r53, o43) {
      var a48 = document.createElement(i45);
      var n91 = e78.join(" ");
      a48.className = n91;
      if (r53) {
        r53.appendChild(a48);
      }
      if (o43) {
        for (var s40 in o43) {
          a48.setAttribute(s40, o43[s40]);
        }
      }
      return a48;
    } }, { key: "_createSvg", value: function t61(i45, e78, r53, o43) {
      var a48 = I2.node(i45, o43 || {});
      e78.forEach(function(t62) {
        return a48.classList.add(t62);
      });
      if (r53) {
        r53.appendChild(a48);
      }
      return a48;
    } }, { key: "_remove", value: function t61(i45) {
      var e78 = this.skeletons[i45];
      if (e78 && e78.el && e78.el.parentNode) {
        e78.el.parentNode.removeChild(e78.el);
      }
      delete this.skeletons[i45];
    } }, { key: "_deselect", value: function t61(i45) {
      var e78 = this.surface.getRenderedVertex(i45.id);
      this._remove(i45.id);
      return e78;
    } }, { key: "_select", value: function t61(i45) {
      var e78 = this._deselect(i45);
      if (e78 != null) {
        var r53;
        var o43 = e78.getAttribute(S18), a48 = e78.getAttribute(I15), n91 = e78.getAttribute(N12) === v9;
        if (n91 || o43 === v9 && a48 === v9) {
          return;
        }
        if (w4(e78)) {
          r53 = this._attachSvg(e78, i45.id);
        } else {
          r53 = this._attachHtml(e78, i45.id);
        }
        this.skeletons[i45.id] = { el: r53, resizeX: o43 !== v9, resizeY: a48 !== v9 };
      }
    } }, { key: "_attachHtml", value: function t61(i45, e78) {
      var r53 = this._create(m24, [H11], i45);
      this._create(m24, [E13], r53);
      this._create(m24, [D16, W11], r53, { "data-dir": "tl", "data-node-id": e78 });
      this._create(m24, [D16, z15], r53, { "data-dir": "tr", "data-node-id": e78 });
      this._create(m24, [D16, O20], r53, { "data-dir": "bl", "data-node-id": e78 });
      this._create(m24, [D16, C17], r53, { "data-dir": "br", "data-node-id": e78 });
      return r53;
    } }, { key: "_attachSvg", value: function t61(i45, e78) {
      var r53 = i45.getBBox();
      var o43 = this._createSvg("rect", [H11], null, { x: r53.x - 10, width: r53.width + 20, y: r53.y - 10, height: r53.height + 20 });
      this.surface.appendElement(o43, { x: r53.x - 10, y: r53.y - 10 });
      var a48 = this._createSvg("rect", [D16, W11], null, { "data-dir": "tl", "data-node-id": e78, x: r53.x - 10, width: 5, y: r53.y - 10, height: 5 });
      this.surface.appendElement(a48, { x: r53.x - 10, y: r53.y - 10 });
      var n91 = this._createSvg("rect", [D16, z15], null, { "data-dir": "tr", "data-node-id": e78, x: r53.x + r53.width + 5, width: 5, y: r53.y - 10, height: 5 });
      this.surface.appendElement(n91, { x: r53.x + r53.width + 5, y: r53.y - 10 });
      var s40 = this._createSvg("rect", [D16, O20], null, { "data-dir": "bl", "data-node-id": e78, x: r53.x - 10, width: 5, y: r53.y + r53.height + 5, height: 5 });
      this.surface.appendElement(s40, { x: r53.x - 10, y: r53.y + r53.height + 5 });
      var d32 = this._createSvg("rect", [D16, C17], null, { "data-dir": "br", "data-node-id": e78, x: r53.x + r53.width + 5, width: 5, y: r53.y + r53.height + 5, height: 5 });
      this.surface.appendElement(d32, { x: r53.x + r53.width + 5, y: r53.y + r53.height + 5 });
      return o43;
    } }, { key: "_dim", value: function t61(i45, e78, r53, o43) {
      var a48 = {};
      var n91 = this.xAxis && this.resizeX;
      var s40 = this.yAxis && this.resizeY;
      a48[this.widthAtt] = n91 ? r53 : this.x2 - this.x1;
      a48[this.heightAtt] = s40 ? o43 : this.y2 - this.y1;
      a48[this.leftAtt] = n91 ? i45 : this.x1;
      a48[this.topAtt] = s40 ? e78 : this.y1;
      if (a48[this.widthAtt] < 0) {
        a48[this.widthAtt] = this._minWidth();
      }
      if (a48[this.heightAtt] < 0) {
        a48[this.heightAtt] = this._minHeight();
      }
      return a48;
    } }, { key: "edit", value: function t61(i45) {
      this._select(i45);
    } }]);
    return o42;
  }();
  o(P15, "type", "drawingTools");
  qo.register(P15.type, P15);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui-plugin-miniview/miniview-plugin.js
  var le = "jtk-miniview-type";
  var ue2 = function(a48) {
    a(ue3, a48);
    var P18 = s(ue3);
    function ue3() {
      var e78;
      t(this, ue3);
      for (var t61 = arguments.length, o42 = new Array(t61), r53 = 0; r53 < t61; r53++) {
        o42[r53] = arguments[r53];
      }
      e78 = P18.call.apply(P18, [this].concat(o42));
      o(l(e78), "surface", void 0);
      o(l(e78), "panzoom", void 0);
      o(l(e78), "containerElement", void 0);
      o(l(e78), "canvasElement", void 0);
      o(l(e78), "pannerElement", void 0);
      o(l(e78), "surfaceBounds", void 0);
      o(l(e78), "suspended", void 0);
      o(l(e78), "_collapsible", void 0);
      o(l(e78), "typeFunction", void 0);
      o(l(e78), "_collapser", void 0);
      o(l(e78), "_collapsed", void 0);
      o(l(e78), "wheelSensitivity", void 0);
      o(l(e78), "wheelReverse", void 0);
      o(l(e78), "panning", false);
      o(l(e78), "downAt", null);
      o(l(e78), "pannerAtMouseDown", null);
      o(l(e78), "zoomingWithWheel", false);
      o(l(e78), "elementFilter", void 0);
      o(l(e78), "visible", true);
      o(l(e78), "pannerPos", void 0);
      o(l(e78), "vertexMap", {});
      o(l(e78), "activeTracking", void 0);
      o(l(e78), "clickToCenter", void 0);
      o(l(e78), "enableWheelZoom", void 0);
      o(l(e78), "eventManager", void 0);
      o(l(e78), "_resizeHandler", void 0);
      o(l(e78), "_zoomToFit", void 0);
      o(l(e78), "surfaceBindings", []);
      o(l(e78), "_doToggleCollapse", void 0);
      o(l(e78), "viewport", void 0);
      o(l(e78), "_doWheelZoom", void 0);
      o(l(e78), "_downListener", void 0);
      o(l(e78), "_moveListener", void 0);
      o(l(e78), "_upListener", void 0);
      return e78;
    }
    n(ue3, [{ key: "destroy", value: function e78() {
      var t61 = this;
      this.eventManager.off(window, c27, this._resizeHandler);
      this.panzoom.destroy();
      this.eventManager.off(this.pannerElement, t4, this._downListener);
      this.canvasElement.parentNode.removeChild(this.canvasElement);
      this.pannerElement.parentNode.removeChild(this.pannerElement);
      this.surface.removeClass(this.containerElement, ha);
      this.surface.removeClass(this.containerElement, Da);
      if (this._collapsible) {
        this.eventManager.off(this._collapser, e10, this._doToggleCollapse);
        this._collapser.parentNode.removeChild(this._collapser);
      }
      this.surfaceBindings.forEach(function(e79) {
        return t61.surface.unbind(e79[0], e79[1]);
      });
      this.surface.toolkitInstance.unbind(r15, this._zoomToFit);
      if (this._doWheelZoom) {
        P2(this.containerElement, this._doWheelZoom);
      }
    } }, { key: "bindToSurface", value: function e78(t61, i45) {
      var n91 = i45.bind(this);
      this.surfaceBindings.push([t61, n91]);
      this.surface.bind(t61, n91);
    } }, { key: "initialise", value: function e78(t61, i45) {
      var n91 = this;
      this.surface = t61;
      this.activeTracking = i45.activeTracking !== false;
      this.clickToCenter = i45.clickToCenter !== false;
      this.wheelReverse = this.wheelReverse || this.surface.wheelReverse === true;
      this._downListener = this.downListener.bind(this);
      this._moveListener = this.moveListener.bind(this);
      this._upListener = this.upListener.bind(this);
      this.containerElement = i45.container;
      this.pannerElement = this.surface._createElement({ position: Pa.absolute, width: Pa.nominalSize, height: Pa.nominalSize, left: 0, top: 0, clazz: wa }, this.containerElement);
      this.canvasElement = this.surface._createElement({ position: Pa.relative, width: Pa.nominalSize, height: Pa.nominalSize, left: 0, top: 0, clazz: ba }, this.containerElement);
      this.surfaceBounds = i45.bounds;
      this.suspended = i45.suspended === true;
      this._collapsible = i45.collapsible !== false;
      this.typeFunction = i45.typeFunction;
      this._collapser = null;
      this._collapsed = false;
      this.enableWheelZoom = i45.enableWheelZoom !== false;
      this.wheelSensitivity = i45.wheelSensitivity || 10;
      this.elementFilter = i45.elementFilter || function(e79) {
        return true;
      };
      this.visible = i45.visible !== false;
      this.eventManager = new oe();
      h5(this.containerElement, ha);
      this._doToggleCollapse = this.toggleCollapsed.bind(this);
      if (this._collapsible) {
        this._collapser = this.surface._createElement({ type: "div" });
        this._collapser.className = za;
        this.containerElement.appendChild(this._collapser);
        this.surface.on(this._collapser, Pa.click, this._doToggleCollapse);
      }
      this.viewport = this.surface.jsplumb.viewport;
      this.panzoom = new L5({ viewport: this.viewport, viewportElement: this.containerElement, canvasElement: this.canvasElement, getOffset: function e79(t62) {
        return n91.surface.jsplumb.getOffset(t62);
      }, getOffsetRelativeToRoot: function e79(t62) {
        return n91.surface.jsplumb.getOffsetRelativeToRoot(t62);
      }, getSize: function e79(t62) {
        return n91.surface.jsplumb.getSize(t62);
      }, wheel: { zoom: false }, enablePan: false, enableAnimation: false, idFunction: function e79(t62) {
        return t62.getAttribute("id");
      }, events: { pan: function e79() {
        n91._updateSurface();
      }, mousedown: function e79() {
        h5(n91.pannerElement, Ra);
      }, mouseup: function e79() {
        y3(n91.pannerElement, Ra);
      } }, zoomRange: [-Infinity, Infinity] });
      this._resizeHandler = o14(function() {
        n91._updatePanner();
      }, 100);
      this.eventManager.on(window, c27, this._resizeHandler);
      if (this.enableWheelZoom !== false) {
        this._doWheelZoom = this.wheelZoom.bind(this);
        O3(this.containerElement, this._doWheelZoom);
      }
      this.pannerElement.style.transformOrigin = "0 0";
      this.surface.addClass(this.containerElement, ha);
      this.eventManager.on(this.pannerElement, t4, this._downListener);
      this._zoomToFit = function() {
        return n91.zoomToFit();
      };
      this.surface.toolkitInstance.bind(r15, this._zoomToFit);
      this.setVisible(this.visible);
      this.bindToSurface(p23, this._updatePanner);
      this.bindToSurface(x10, this._updatePanner);
      this.bindToSurface(I8, this._vertexMoved);
      if (this.activeTracking) {
        this.bindToSurface(H4, this._vertexMoved);
      }
      this.bindToSurface(y11, this._nodeRemoved);
      this.bindToSurface(C7, this._nodeAdded);
      this.bindToSurface(d20, this._nodeAdded);
      this.bindToSurface(n47, this._groupRelayout);
      this.bindToSurface(j13, this._afterRelayout);
      this.bindToSurface(t7, this._onGroupAdded);
      this.bindToSurface(q5, this._vertexMoved);
      if (this.activeTracking) {
        this.bindToSurface(k8, this._vertexMoved);
      }
      this.bindToSurface(u16, this._groupRemoved);
      this.bindToSurface(g11, this._onGroupMemberAdded);
      this.bindToSurface(m16, this._onGroupMemberRemoved);
      this.bindToSurface(p15, this._onGroupCollapse);
      this.bindToSurface(i12, this._onGroupExpand);
      this.bindToSurface(o22, this._onGroupResize);
      this.bindToSurface(l19, this._objectRotated);
      var s40 = function e79(t62) {
        n91.surfaceBounds = t62.bounds;
        t62.positions.forEach(function(e80, t63) {
          var i46 = n91.vertexMap[t63];
          if (i46) {
            i7(i46, e80);
          }
        });
        n91.zoomToFit(true);
      };
      this.bindToSurface(j13, s40);
      this.bindToSurface(a30, s40);
      this.bindToSurface(k13, this._objectRepainted);
      this.bindToSurface(u29, this._updatePanner);
      this.bindToSurface(s24, this._nodeVisibility);
      this._loadInitialData();
      if (this.clickToCenter) {
        h5(this.containerElement, Ea);
        this.eventManager.on(this.canvasElement, l9, o39(P10), function(e79) {
          var t62 = e79.target.getAttribute(P10);
          if (t62 && n91.vertexMap[t62]) {
            n91.surface.centerOn(t62);
          }
        });
      }
      return true;
    } }, { key: "reset", value: function e78() {
      this._removeAllNodes();
      this.panzoom.setZoom(1);
      this.panzoom.reset();
      this._updatePanner();
    } }, { key: "_loadInitialData", value: function e78() {
      var t61 = this.surface.toolkitInstance, i45 = t61.getNodes(), n91 = t61.getGroups();
      for (var s40 = 0; s40 < n91.length; s40++) {
        var o42 = this.surface.getRenderedElement(n91[s40]);
        if (o42 != null) {
          this._onGroupAdded({ el: o42, id: n91[s40].id, vertex: n91[s40], pos: this.surface._getViewportPosition(n91[s40]) });
        }
      }
      for (var r53 = 0; r53 < i45.length; r53++) {
        var a49 = this.surface.getRenderedElement(i45[r53]);
        if (a49 != null) {
          this._nodeAdded({ el: a49, id: i45[r53].id, vertex: i45[r53], pos: this.surface._getViewportPosition(i45[r53]) });
        }
      }
      if (n91.length > 0 || i45.length > 0) {
        this.zoomToFit(true);
      }
    } }, { key: "_onGroupAdded", value: function e78(t61) {
      this._nodeAdded(t61, Sa);
    } }, { key: "_onGroupCollapse", value: function e78(t61) {
      this._showGroupMembers(t61.group, false);
      this._objectRepainted({ id: t61.group.id });
    } }, { key: "_onGroupExpand", value: function e78(t61) {
      this._showGroupMembers(t61.group, true);
      this._objectRepainted({ id: t61.group.id });
    } }, { key: "_onGroupMemberRemoved", value: function e78(t61) {
      var i45 = this.vertexMap[t61.vertex.id];
      if (i45) {
        this.canvasElement.appendChild(i45);
        if (t61.pos) {
          i7(i45, t61.pos);
        }
      }
    } }, { key: "_onGroupResize", value: function e78(t61) {
      this._objectRepainted({ id: t61.group.id });
    } }, { key: "_onGroupMemberAdded", value: function e78(t61) {
      var i45 = this.vertexMap[t61.group.id], n91 = this.vertexMap[t61.vertex.id];
      if (i45 && n91) {
        i45.appendChild(n91);
        if (t61.pos) {
          i7(n91, t61.pos);
        }
      }
    } }, { key: "_objectRotated", value: function e78(t61) {
      var i45 = this.vertexMap[t61.obj.id];
      if (i45 != null) {
        i45.style.transform = "rotate(" + t61.rotation + "deg)";
        i45.style.transformOrigin = "50% 50%";
      }
    } }, { key: "downListener", value: function e78(t61) {
      this.panning = true;
      this.downAt = q4(t61);
      this.pannerAtMouseDown = a7(this.pannerElement);
      this.eventManager.on(document, u11, this._upListener);
      this.eventManager.on(document, m10, this._moveListener);
      i5(t61);
    } }, { key: "moveListener", value: function e78(t61) {
      this.zoomingWithWheel = false;
      if (this.panning) {
        var i45 = q4(t61), n91 = i45.x - this.downAt.x, s40 = i45.y - this.downAt.y, o42 = { x: this.pannerAtMouseDown.x + n91, y: this.pannerAtMouseDown.y + s40 };
        this._updateSurface(o42);
        i7(this.pannerElement, o42);
      }
    } }, { key: "upListener", value: function e78(t61) {
      this.panning = false;
      this.downAt = null;
      this.eventManager.off(document, u11, this._upListener);
      this.eventManager.off(document, m10, this._moveListener);
    } }, { key: "wheelZoom", value: function e78(t61) {
      i5(t61);
      var i45 = this.panzoom.mapEventLocation(t61);
      this.surface.panZoom._setTransformOriginToCanvasPoint(i45.x, i45.y);
      this.surface.nudgeWheelZoom(t61.normalizedWheelDelta * this.wheelSensitivity * (this.wheelReverse ? -1 : 1), t61);
    } }, { key: "toggleCollapsed", value: function e78() {
      this._collapsed = !this._collapsed;
      this.surface[this._collapsed ? "addClass" : "removeClass"](this.containerElement, Da);
      this.zoomToFit(true);
    } }, { key: "zoomToFit", value: function e78(t61) {
      this.panzoom.zoomToFit({ onComplete: this._updatePanner, doNotFirePanEvent: t61 });
    } }, { key: "_vertexMoved", value: function e78(t61) {
      var i45 = t61.vertex;
      if (i45 && this.elementFilter(i45) === false)
        return;
      var n91 = this.vertexMap[i45.id];
      i7(n91, t61.pos);
      this.zoomToFit(true);
    } }, { key: "_groupRelayout", value: function e78(t61) {
      var i45 = this;
      var n91 = t61.group.getMembers(), s40, o42 = this.vertexMap[t61.group.id];
      n91.forEach(function(e79, n92) {
        s40 = t61.layout.getPosition(e79.id);
        var o43 = i45.vertexMap[e79.id];
        if (s40 != null && o43 != null) {
          i7(o43, s40);
        }
      });
      var r53 = this.surface.jsplumb.getSize(t61.el);
      o42.style.width = r53.w + Pa.px;
      o42.style.height = r53.h + Pa.px;
      this._updatePanner();
    } }, { key: "_afterRelayout", value: function e78(t61) {
      var i45 = this;
      this.surfaceBounds = t61.bounds;
      t61.positions.forEach(function(e79, t62) {
        var n91 = i45.vertexMap[t62];
        if (n91) {
          i7(n91, e79);
        }
      });
      this.zoomToFit(true);
    } }, { key: "_migrateGroupMembers", value: function e78(t61, i45) {
      var n91 = t61.getMembers();
      for (var s40 = 0; s40 < n91.length; s40++) {
        var o42 = this.vertexMap[n91[s40].id];
        if (o42) {
          i45.appendChild(o42);
        }
      }
    } }, { key: "_nodeAdded", value: function e78(t61, i45) {
      if (this.elementFilter(t61.vertex) === false) {
        return;
      }
      var n91 = t61.vertex;
      var s40 = n91.id;
      if (this.vertexMap[s40] != null) {
        return;
      }
      var o42 = t61.pos || { x: 0, y: 0 };
      var a49 = this.surface.jsplumb.getSize(t61.el), h35 = this.surface._createElement({ position: Pa.absolute, width: a49.w + Pa.px, height: a49.h + Pa.px, left: o42.x, top: o42.y, clazz: Ca + (i45 ? " " + i45 : "") });
      if (this.typeFunction) {
        h35.setAttribute(A11, this.typeFunction(t61.vertex));
      }
      h35.relatedElement = t61.el;
      this.surfaceBounds = this.surface.getBoundsInfo();
      h35.setAttribute(P10, s40);
      this.canvasElement.appendChild(h35);
      this.panzoom.add(h35);
      this.vertexMap[s40] = h35;
      if (n91.data.rotation != null) {
        h35.style.transform = "rotate(" + n91.data.rotation + "deg)";
        h35.style.transformOrigin = "50% 50%";
      }
      if (t61.vertex.type === V6.objectType) {
        this._migrateGroupMembers(t61.vertex, h35);
      } else if (t61.vertex.group) {
        var l48 = this.vertexMap[t61.vertex.group.id];
        if (l48) {
          l48.appendChild(h35);
          this.panzoom.suspend(t61.el);
        }
      }
      this._updatePanner();
    } }, { key: "registerNode", value: function e78(t61) {
      this._nodeAdded(t61, t61.group ? Sa : "");
      this._vertexMoved(t61);
    } }, { key: "setVisible", value: function e78(t61) {
      this.visible = t61;
      this.containerElement.style.display = t61 ? Pa.block : Pa.none;
    } }, { key: "getPan", value: function e78() {
      return this.panzoom.getPan();
    } }, { key: "_showGroupMembers", value: function e78(t61, i45) {
      var n91 = t61.getMembers();
      for (var s40 = 0; s40 < n91.length; s40++) {
        this.vertexMap[n91[s40].id].style.display = i45 ? "block" : "none";
      }
    } }, { key: "_objectRepainted", value: function e78(t61) {
      var i45 = this.vertexMap[t61.id];
      if (i45) {
        var n91 = this.surface.jsplumb.getSize(i45.relatedElement);
        i45.style.width = n91.w + Pa.px;
        i45.style.height = n91.h + Pa.px;
        this._updatePanner();
        if (this.typeFunction) {
          var s40 = t61.obj || this.surface.toolkitInstance.getVertex(t61.id);
          if (s40) {
            i45.setAttribute(le, this.typeFunction(s40));
          }
        }
      }
    } }, { key: "invalidate", value: function e78(t61) {
      if (t61) {
        this._objectRepainted({ id: t61 });
      } else {
        for (var i45 in this.vertexMap) {
          this._objectRepainted({ id: i45 });
        }
      }
    } }, { key: "setSuspended", value: function e78(t61, i45) {
      this.suspended = t61;
      i45 && this._updatePanner();
    } }, { key: "_vertexRemoved", value: function e78(t61) {
      var i45 = t61.vertex.id, n91 = this.vertexMap[i45];
      if (n91) {
        this.panzoom.remove(n91);
        delete this.vertexMap[i45];
        n91.parentNode.removeChild(n91);
        this.zoomToFit(true);
      }
    } }, { key: "_groupRemoved", value: function e78(t61) {
      var i45 = t61.vertex.id, n91 = this.vertexMap[i45];
      if (n91) {
        var s40, o42, r53;
        if (t61.childrenRemoved !== true) {
          for (var a49 = 0; a49 < t61.children.length; a49++) {
            s40 = t61.children[a49];
            o42 = this.vertexMap[s40.id];
            if (o42) {
              r53 = t61.childPositions[s40.id];
              if (r53) {
                i7(o42, r53);
              }
              this.canvasElement.appendChild(o42);
            }
          }
        }
      }
      this._vertexRemoved(t61);
    } }, { key: "_nodeRemoved", value: function e78(t61) {
      this._vertexRemoved(t61);
    } }, { key: "_removeAllNodes", value: function e78() {
      var t61;
      for (var i45 in this.vertexMap) {
        t61 = this.vertexMap[i45];
        this.panzoom.remove(t61);
        delete this.vertexMap[i45];
        t61.parentNode.removeChild(t61);
      }
      this._updatePanner();
    } }, { key: "_nodeVisibility", value: function e78(t61) {
      var i45 = (t61.node || t61.group).id, n91 = this.vertexMap[i45];
      if (n91) {
        n91.style.display = t61.state ? "block" : "none";
      }
    } }, { key: "_updatePanner", value: function e78() {
      if (this.surface && this.panzoom && !this.suspended) {
        this.surfaceBounds = this.surface.getBoundsInfo();
        var t61 = this.surface.getApparentCanvasLocation(), i45 = this.panzoom.getApparentCanvasLocation(), n91 = this.panzoom.getZoom(), s40 = n91 / this.surfaceBounds.zoom;
        this.pannerElement.style.width = this.surfaceBounds.vw + Pa.px;
        this.pannerElement.style.height = this.surfaceBounds.vh + Pa.px;
        this.pannerElement.style.transform = "scale(" + s40 + ")";
        var o42 = { x: t61.x * s40, y: t61.y * s40 };
        this.pannerPos = { x: i45.x - o42.x, y: i45.y - o42.y };
        i7(this.pannerElement, this.pannerPos);
      }
    } }, { key: "_updateSurface", value: function e78(t61) {
      if (this.panzoom != null) {
        this.surfaceBounds = this.surface.getBoundsInfo();
        t61 = t61 || a7(this.pannerElement);
        var i45 = this.panzoom.getApparentCanvasLocation(), n91 = this.panzoom.getZoom(), s40 = n91 / this.surfaceBounds.zoom, o42 = (i45.x - t61.x) / s40, r53 = (i45.y - t61.y) / s40;
        var a49 = this.surface.setApparentCanvasLocation(o42, r53);
        return { x: i45.x - a49.x * s40, y: i45.y - a49.y * s40 };
      }
    } }, { key: "getRenderedVertex", value: function e78(t61) {
      return this.vertexMap[t61];
    } }]);
    return ue3;
  }(f17);
  o(ue2, "type", "miniview");
  qo.register(ue2.type, ue2);

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui-shape-library/shape-library.js
  var y32 = "label";
  var w22 = "transform";
  var b27 = "x";
  var k19 = "y";
  var S19 = "origin";
  var C18 = "size";
  var x26 = "key";
  var A18 = "iconId";
  var I16 = "currentColor";
  var R14 = "middle";
  var _15 = "type";
  var E14 = "category";
  var j25 = "jtk-shape-icon";
  var P16 = "jtk-icon";
  var D17 = "category";
  var L15 = "type";
  var T14 = function() {
    function T18(e78, a48) {
      var i45 = this;
      t(this, T18);
      o(this, "compiledShapes", /* @__PURE__ */ new Map());
      o(this, "templateRenderer", m41());
      o(this, "shapeSetList", void 0);
      o(this, "shapeSets", /* @__PURE__ */ new Map());
      o(this, "defaultCategoryId", void 0);
      o(this, "iconContainerTemplate", '<svg:svg class="'.concat(j25, '" x="{{x}}" y="{{y}}" viewBox="{{viewBox}}" width="{{width}}" height="{{height}}" style="overflow:visible"/>'));
      o(this, "iconContainerAst", void 0);
      o(this, "compiledIcons", /* @__PURE__ */ new Map());
      o(this, "compiledIconList", []);
      o(this, "typeParameter", void 0);
      o(this, "categoryParameter", void 0);
      a48 = a48 || {};
      if (e78 == null) {
        Q("WARN: no shapes were provided to shape library.");
        e78 = [];
      } else {
        if (!Array.isArray(e78)) {
          e78 = [e78];
        }
      }
      this.typeParameter = a48.typeParameter || L15;
      this.categoryParameter = a48.categoryParameter || D17;
      this.shapeSetList = e78.slice();
      e78.forEach(function(e79) {
        i45.shapeSets.set(e79.id, e79);
        if (e79.icons) {
          var t61 = f3(i45.compiledIcons, e79.id, function() {
            return /* @__PURE__ */ new Map();
          });
          for (var r53 in e79.icons) {
            var a49 = { setId: e79.id, id: r53, def: e79.icons[r53], ast: i45.templateRenderer.parse(e79.icons[r53].template) };
            t61.set(r53, a49);
            i45.compiledIconList.push(a49);
          }
        }
      });
      this.defaultCategoryId = this.shapeSetList.length > 0 ? this.shapeSetList[0].id : r7;
      this.iconContainerAst = this.templateRenderer.parse(this.iconContainerTemplate);
    }
    n(T18, [{ key: "getShapeDefinition", value: function e78(t61, r53) {
      r53 = r53 || this.defaultCategoryId;
      return this.shapeSets.get(r53).shapes[t61];
    } }, { key: "getShapeTemplate", value: function e78(t61, r53) {
      var a48 = this.getShapeDefinition(t61, r53);
      if (a48 == null) {
        Q("Cannot find shape [".concat(t61, "] in set [").concat(r53, "]. Returning default shape."));
        return this._defaultTemplate();
      } else {
        return a48.template;
      }
    } }, { key: "getCompiledShape", value: function e78(t61, r53) {
      var a48 = this;
      var i45 = this._shapeKey(t61, r53);
      if (!this.compiledShapes.has(i45)) {
        var n91 = this.templateRenderer.parse(this.getShapeTemplate(t61, r53));
        var s40 = function e79(t62) {
          return a48.templateRenderer.render(n91, t62).fragment;
        };
        this.compiledShapes.set(i45, s40);
      }
      return this.compiledShapes.get(i45);
    } }, { key: "_applyVectorEffect", value: function e78(t61) {
      var r53 = this;
      if (t61.setAttribute) {
        t61.setAttribute(N2, B2);
      }
      if (t61.hasChildNodes) {
        t61.childNodes.forEach(function(e79) {
          return r53._applyVectorEffect(e79);
        });
      }
    } }, { key: "renderCompiledShape", value: function e78(t61, r53, a48, i45) {
      r53 = t61.outlineWidth || r53 || 1;
      var n91 = a48 || this.typeParameter;
      var s40 = i45 || this.categoryParameter;
      var o42 = this.getShapeDefinition(t61[n91], t61[s40]);
      var h35 = o42.square ? Math.min(t61.width, t61.height) : t61.width;
      var c47 = o42.square ? Math.min(t61.width, t61.height) : t61.height;
      var l48 = this.getCompiledShape(t61[n91], t61[s40]);
      var d32 = l48(Object.assign({ sw: r53 }, t61, { width: h35, height: c47 })).childNodes[0];
      return d32;
    } }, { key: "renderShapeLabel", value: function e78(t61, r53, i45) {
      r53 = r53 || y32;
      var n91 = I2.node(k3, { x: "50%", y: "50%", fill: I16, stroke: I16, "text-anchor": R14, "dominant-baseline": R14, class: p30, "stroke-width": i45 || "0.25px" });
      n91.textContent = t61[r53] || "";
      return n91;
    } }, { key: "_shapeKey", value: function e78(t61, r53) {
      r53 = r53 || this.defaultCategoryId;
      return [t61, r53].join(":");
    } }, { key: "_shapesToFragments", value: function e78(t61, r53) {
      var i45 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : y32;
      var n91 = {};
      this.shapeSets.forEach(function(e79) {
        for (var t62 in e79.shapes) {
          var s40 = e79.shapes[t62].template + (r53 ? '<svg:text x="50%" y="50%" fill="'.concat(I16, '" stroke="').concat(I16, '" stroke-width="0.25px" text-anchor="').concat(R14, '" dominant-baseline="').concat(R14, '" class="').concat(p30, '">{{').concat(i45, "}}</svg:text>") : "");
          n91["".concat(e79.id, ":").concat(t62)] = s40;
          n91["".concat(r7, ":").concat(t62)] = s40;
        }
      });
      return n91;
    } }, { key: "getShapeTagDefinition", value: function e78(t61, a48) {
      var n91 = this;
      var s40 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : y32;
      t61 = t61 || 1;
      return { template: '<svg:svg class="'.concat(s33, '" fill="{{fill}}" stroke="{{outline}}" viewBox="0 0 {{width}} {{height}}" preserveAspectRatio="none" stroke-width="').concat(t61, '">                       \n                            <r-fragment key="').concat(E14, ":").concat(_15, '"/>                        \n                        </svg:svg>'), fragments: o({}, "".concat(E14, ":").concat(_15), this._shapesToFragments(t61, a48, s40)), defaultableFragmentKeys: [E14], rendered: function e79(t62, r53, a49, i45) {
        n91._maybeRenderIcons(t62, r53, a49, i45);
      }, updated: function e79(t62, r53, a49) {
        n91._maybeRenderIcons(t62, r53, a49);
      } };
    } }, { key: "_defaultTemplate", value: function e78() {
      return '<svg:rect x="0" y="0" width="{{width}}" height="{{height}}"/>';
    } }, { key: "_resolveIcon", value: function e78(t61, r53) {
      return r53 != null ? this.compiledIcons.get(r53).get(t61) : this.compiledIconList.find(function(e79) {
        return e79.id === t61;
      });
    } }, { key: "_maybeRenderIcons", value: function e78(t61, r53, a48, i45) {
      var h35 = this;
      Array.from(t61.querySelectorAll("svg.".concat(j25))).forEach(function(e79) {
        return e79.parentNode.removeChild(e79);
      });
      Array.from(t61.querySelectorAll(P16)).forEach(function(e79) {
        var a49 = e79.getAttribute(x26), i46 = a49 != null ? r53[a49] : e79.getAttribute(A18);
        if (i46 != null) {
          var c47 = h35._resolveIcon(i46, r53.category);
          if (c47 != null) {
            var l48 = parseFloat(e79.getAttribute(b27)) * r53.width, u52 = parseFloat(e79.getAttribute(k19)) * r53.height, f45 = Math.min(r53.width, r53.height), v41 = parseFloat(e79.getAttribute(C18)) * f45, m44 = e79.getAttribute(S19) || r37;
            var g31 = h35.templateRenderer.render(c47.ast).fragment.childNodes[0];
            g31.setAttribute(N2, B2);
            var y34 = "0 0 ".concat(c47.def.viewBox.width, " ").concat(c47.def.viewBox.height);
            var I17 = h35.templateRenderer.render(h35.iconContainerAst, { x: l48, y: u52, width: v41, height: v41, viewBox: y34 }).fragment.childNodes[0];
            if (m44 === e67) {
              I17.setAttribute(w22, "translate(-".concat(v41 / 2, ",-").concat(v41 / 2, ")"));
            } else if (m44 === v29) {
              I17.setAttribute(w22, "translate(-".concat(v41, ",0)"));
            }
            t61.appendChild(I17);
            I17.appendChild(g31);
          }
        }
      });
    } }, { key: "parseDefs", value: function e78() {
      var t61 = this;
      var r53 = [];
      this.shapeSetList.forEach(function(e79) {
        if (e79.defs) {
          for (var a48 in e79.defs) {
            var i45 = t61.templateRenderer.parse(e79.defs[a48]);
            i45[0].atts.id = a48;
            r53.push(i45);
          }
        }
      });
      return r53;
    } }, { key: "getDefsElements", value: function e78() {
      var t61 = this;
      return this.parseDefs().map(function(e79) {
        return t61.templateRenderer.render(e79, {}).fragment.childNodes[0];
      });
    } }, { key: "getSvgDefsElement", value: function e78() {
      var t61 = I2.node(v6);
      var r53 = I2.node(f8);
      t61.appendChild(r53);
      this.getDefsElements().forEach(function(e79) {
        r53.appendChild(e79);
      });
      return t61;
    } }]);
    return T18;
  }();

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui-shape-library/shapes-flowchart.js
  var t59 = { id: "flowchart", name: "Flowchart", shapes: { process: { type: "process", label: "Process", description: "A process (also known as 'Action') can represent a single step or a sub-process", template: '<svg:rect x="0" y="0" width="{{width}}" height="{{height}}"/>' }, decision: { type: "decision", label: "Decision", template: '<svg:path d="M {{width/2}} 0 L {{width}} {{height/2}} L {{width/2}} {{height}} L 0 {{height/2}} Z"/>' }, terminus: { type: "terminus", label: "Terminus", description: "Used to mark the start/end of the system", template: '<svg:rect x="0" y="0" width="{{width}}" height="{{height}}" rx="{{width/6}}"/>' }, input: { type: "input", label: "Input/Output", description: "Represents something entering or leaving the system", template: '<svg:path d="M {{width / 7}} 0 L {{width}} 1 L {{width - (width/7)}} {{height}} L 1 {{height}} Z"/>' }, document: { type: "document", label: "Document", description: "A printed document or report", template: '<svg:path d="M 0 {{height-(height/8)}} C {{width - (width/4)}},{{height + (height/8)}} {{width- (width/3)}},{{height/2}} {{width}},{{height-(height/8)}} L {{width}} 0 L 0 0 L 0 {{height-(height/8)}}"/>' }, manualInput: { type: "manualInput", label: "Manual Input", template: '<svg:path d="M 0 {{height}} L 0 {{height/3}} L {{width}} {{height/9}} L {{width}} {{height}} Z"/>' }, manualOperation: { type: "manualOperation", label: "Manual Operation", template: '<svg:path d="M 0 0 L {{width}} 0 L {{width- (width/8)}} {{height}} L {{width/8}} {{height}} Z"/>' }, preparation: { type: "preparation", label: "Preparation", template: '<svg:path d="M 0 {{height/2}} L {{width/8}} 0 L {{width- (width/8}} 0 L {{width}} {{height/2}} L {{width-(width/8)}} {{height}} L {{width/ 8}} {{height}} Z"/>' }, connector: { type: "connector", label: "Connector", template: '<svg:ellipse cx="{{width/2}}" cy="{{height/2}}" rx="{{width/2}}" ry="{{height/2}}"/>' }, merge: { type: "merge", label: "Merge", template: '<svg:path d="M 0 0  L {{width}} 1 L {{width/2}} {{height}} Z"/>' }, collate: { type: "collate", label: "Collate", template: '<svg:g><svg:path d="M 0 0 L {{width}} 0 L {{width/2}} {{height/2}} Z"/>\n                        <svg:path d="M 0 {{height}} L {{width}} {{height}} L {{width/2}} {{height/2}} Z"/>\n                        </svg:g>' }, subroutine: { type: "subroutine", label: "Subroutine", template: '<svg:g>\n                <svg:rect x="0" y="0" width="{{width}}" height="{{height}}"/>\n                <svg:path d="M {{width/8}} 0 L {{width/ 8}} {{height}}"/>\n                <svg:path d="M {{width- (width/8)}} 0 L {{width- (width/ 8)}} {{height}}"/>\n                </svg:g>' }, or: { type: "or", label: "Or", template: '<svg:g>\n                <svg:ellipse cx="{{width/2}}" cy="{{height/2}}" rx="{{width/2}}" ry="{{height/2}}"/>\n                <svg:path d="M {{width/2}} 0 L {{width/2}} {{height}}"/>\n                <svg:path d="M 0 {{height/2}} L {{width}} {{height/2}}"/>\n                </svg:g>\n            ' }, loopLimit: { type: "loopLimit", label: "Loop Limit", template: '<svg:path d="M 0 {{height/3}} L {{width/4}} 0 L {{width-(width/4)}} 0 L {{width}} {{height/3}} L {{width}} {{height}} L 0 {{height}} Z"/>' }, delay: { type: "delay", label: "Delay", template: '<svg:g>\n            <svg:path d="M {{width - (height/2) }} {{height}} L 0 {{height}} L 0 0 L {{width-(height/2}} 0 A {{height/2}} {{height/2}} 0 0 1 {{width-(height/2)}} {{height}}"/>\n            </svg:g>\n            ' }, display: { type: "display", label: "Display", template: '<svg:g>\n            <svg:path d="M {{width- (height/2)}} {{height}} L {{width/4}} {{height}} L 0 {{height/2}} L {{width/4}} 0 L {{width- (height/2}} 0 A {{height/2}} {{height/2}} 0 0 1 {{width- (height/2)}} {{height}}"/>\n            </svg:g>            ' }, database: { type: "database", label: "Database", template: '\n                <svg:g>\n                <svg:path d="M 0 {{height-(height/5)}} A {{width/2}} {{height/5}} 0 0 0 {{width}} {{height-(height/5)}} L {{width}} {{height/5}} A {{width/2}} {{height/5}} 0 0 0 0 {{(height/5)}} Z" data-fill/>\n                <svg:path d="M {{width}} {{height/5}} A {{width/2}} {{height/5}} 0 0 1 0 {{height/5}}" fill="none"/>\n                <svg:path d="M {{width}} {{height/ 4}} A {{width/2}} {{height/ 5}} 0 0 1 0 {{height/ 4}}" fill="none"/>\n                </svg:g>\n            ' }, dataStorage: { type: "dataStorage", label: "Data Storage", template: '<svg:path d="M {{width/5}} 0 A {{width/5}} {{height/2}} 0 0 0 {{width/5}} {{height}} L {{width-(width/5)}} {{height}} A {{(width/5)}} {{height/2}} 0 0 1 {{width-(width/5)}} 0 L {{width/5}} 0"/>' } } };

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui-shape-library/shapes-basic.js
  var t60 = { id: "basic", name: "Basic", shapes: { rectangle: { type: "rectangle", label: "Rectangle", template: '<svg:rect x="0" y="0" width="{{width}}" height="{{height}}"/>' }, "rounded-rectangle": { type: "rounded-rectangle", label: "Rounded Rectangle", template: '<svg:rect x="0" y="0" width="{{width}}" height="{{height}}" rx="{{width/10}}"/>' }, ellipse: { type: "ellipse", label: "Ellipse", template: '<svg:ellipse cx="{{width/2}}" cy="{{height/2}}" rx="{{width/2}}" ry="{{height/2}}"/>' }, diamond: { type: "diamond", label: "Diamond", template: '<svg:polygon points="{{width/2}} 0 {{width}} {{height/2}} {{width/2}} {{height}} 0 {{height /2}}"/>' }, "isoscoles-triangle": { type: "isoscoles-triangle", label: "Isoscoles Triangle", template: '<svg:polygon points="{{width/2}} 0 {{width}} {{height}} 0 {{height}}"/>' }, "inverted-isoscoles-triangle": { type: "inverted-isoscoles-triangle", label: "Inverted Isoscoles Triangle", template: '<svg:polygon points="{{width/2}} {{height}} {{width}} 0 0 0"/>' }, "right-triangle": { type: "right-triangle", label: "Right Triangle", template: '<svg:polygon points="0 0 0 {{height}} {{width}} {{height}}"/>' }, "inverted-right-triangle": { type: "inverted-right-triangle", label: "Right Triangle", template: '<svg:polygon points="{{width}} {{height}} {{width}} 0 0 {{height}}"/>' }, hexagon: { type: "hexagon", label: "Hexagon (pointy)", template: '<svg:polygon points="{{width/2}} 0 {{width}} {{height*1732/6000}} {{width}} {{height-(height*1732/6000)}} {{width/2}} {{height}} 0 {{height-(height*1732/6000)}} 0 {{height*1732/6000}}"/>' }, "hexagon-flat": { type: "hexagon-flat", label: "Hexagon (flat)", template: '<svg:polygon points="0 {{height/2}} {{width*1732/6000}} {{height}} {{width-(width*1732/6000)}} {{height}} {{width}} {{height/2}} {{width-(width*1732/6000)}} 0 {{width*1732/6000}} 0"/>' }, octagon: { type: "octagon", label: "Octagon", template: '<svg:polygon points="{{width * 293 / 1000}} 0 {{width * 707 / 1000}} 0 {{width}} {{height * 293 / 1000}} {{width}} {{height * 707 / 1000}} {{width * 707 / 1000}} {{height}} {{width * 293 / 1000}} {{height}} 0 {{height * 707 / 1000}} 0 {{height * 293 / 1000}}"/>' }, pentagon: { type: "pentagon", label: "Pentagon", template: '<svg:polygon points="{{width/2}} 0 {{width}} {{height*343/1000}} {{width*793/1000}} {{height*904/1000}} {{width*206/1000}} {{height*904/1000}} 0 {{height*343/1000}}"/>' }, parallelogram: { type: "parallelogram", label: "Parallelogram", template: '<svg:polygon points="0 {{height}} {{width/8}} 0 {{width}} 0 {{width * 7 / 8}} {{height}}"/>' }, trapezoid: { type: "trapezoid", label: "Trapezoid", template: '<svg:polygon points="0 {{height}} {{width/8}} 0 {{width * 7 / 8}} 0 {{width}} {{height}}"/>' }, cross: { type: "cross", label: "Cross", template: '<svg:path d="M 0 {{height*3/10}} L 0 {{height * 7/10}} L {{width *3/10}} {{ height * 7/10}} L {{width *3/10}} {{height}} L {{width *7/10}} {{height}} L {{width*7/10}} {{height*7/10}} L {{width}} {{height * 7/10}} L {{width}} {{height*3/10}} L {{width *7/10}} {{height*3/10}} L {{width*7/10}} 0 L {{width*3/10}} 0 L {{width*3/10}} {{height*3 /10}} Z"/>' }, "l-shape-bl": { type: "l-shape-bl", label: "L Shape (Bottom left)", template: '<svg:path d="M 0 0 L 0 {{height}} L {{width}} {{height}} L {{width}} {{height / 2}} L {{width/2}} {{height/2}} L {{width/2}} 0 Z"/>' }, "l-shape-br": { type: "l-shape-br", label: "L Shape (Bottom right)", template: '<svg:path d="M {{width}} {{height}} L {{width}} 0 L {{width/2}} 0 L {{width/2}} {{height/2}} L 0 {{height/2}} L 0 {{height}} Z"/>' }, "l-shape-tl": { type: "l-shape-tl", label: "L Shape (Top left)", template: '<svg:path d="M 0 0 L 0 {{height}} L {{width/2}} {{height}} L {{width/2}} {{height / 2}} L {{width}} {{height/2}} L {{width}} 0 Z"/>' }, "l-shape-tr": { type: "l-shape-tr", label: "L Shape (Top right)", template: '<svg:path d="M {{width}} {{height}} L {{width}} 0 L 0 0 L 0 {{height/2}} L {{width/2}} {{height/2}} L {{width/2}} {{height}} Z"/>' }, "u-shape": { type: "u-shape", label: "U Shape", template: '<svg:path d="M 0 0 L 0 {{height}} L {{width}} {{height}} L {{width}} 0 L {{width*2/3}} 0 L {{width*2/3}} {{height/2}} L {{width/3}} {{height/2}} L {{width/3}} 0 Z"/>' }, "inverted-u-shape": { type: "inverted-u-shape", label: "U Shape (Inverted)", template: '<svg:path d="M 0 0 L {{width}} 0 L {{width}} {{height}} L {{width*2/3}} {{height}} L {{width*2/3}} {{height/2}} L {{width/3}} {{height/2}} L {{width/3}} {{height}} L 0 {{height}} Z"/>' } } };

  // node_modules/.pnpm/@jsplumbtoolkit+browser-ui@6.81.0/node_modules/@jsplumbtoolkit/browser-ui/es6/browser-ui-vanilla-2/browser-ui.js
  var u51 = function(n91) {
    a(o42, n91);
    var u52 = s(o42);
    function o42() {
      t(this, o42);
      return u52.apply(this, arguments);
    }
    n(o42, [{ key: "render", value: function r53(e78, t61, s40) {
      var n92 = s40 || r49(t61);
      return g12(this, e78, n92, t61);
    } }]);
    return o42;
  }(_4);
  function o41(r53) {
    r53 = r53 || {};
    return new u51(r53);
  }

  // constants.ts
  var EDGE_TYPE_SOURCE_ARROW = "sourceArrow";
  var EDGE_TYPE_TARGET_ARROW = "targetArrow";
  var EDGE_TYPE_BOTH_ARROWS = "bothArrows";
  var EDGE_TYPE_PLAIN = "plain";
  var EDGE_TYPE_DASHED = "dashed";
  var PROPERTY_TEXT = "text";
  var PROPERTY_LINE_STYLE = "lineStyle";
  var PROPERTY_FILL = "fill";
  var PROPERTY_LABEL = "label";
  var PROPERTY_COLOR = "color";
  var PROPERTY_TEXT_COLOR = "textColor";
  var PROPERTY_OUTLINE = "outline";
  var CLASS_EDGE_LABEL = "jtk-flowchart-edge-label";
  var CLASS_DASHED_EDGE = "jtk-flowchart-dashed-edge";
  var CLASS_FLOWCHART_EDGE = "jtk-flowchart-edge";
  var ARROW_WIDTH = 20;
  var ARROW_LENGTH = 15;
  var DEFAULT_STROKE = "#000000";
  var DEFAULT_TEXT_COLOR = "#000000";
  var GRID_SIZE = {
    w: 50,
    h: 50
  };
  var GRID_BACKGROUND_OPTIONS = {
    dragOnGrid: true,
    showGrid: true,
    showBorder: false,
    autoShrink: true,
    minWidth: 1e4,
    maxWidth: null,
    minHeight: 1e4,
    maxHeight: null,
    showTickMarks: false,
    type: H9.type
  };

  // edge-mappings.js
  function edgeMappings(arrowWidth, arrowLength) {
    arrowWidth = arrowWidth || ARROW_WIDTH;
    arrowLength = arrowLength || ARROW_LENGTH;
    return [
      {
        property: PROPERTY_LINE_STYLE,
        mappings: {
          [EDGE_TYPE_SOURCE_ARROW]: {
            overlays: [{ type: p26.type, options: { location: 0, direction: -1, width: arrowWidth, Length: arrowLength } }]
          },
          [EDGE_TYPE_TARGET_ARROW]: {
            overlays: [{ type: p26.type, options: { location: 1, width: arrowWidth, length: arrowLength } }]
          },
          [EDGE_TYPE_BOTH_ARROWS]: {
            // should be able to say
            //parent: [ EDGE_TYPE_SOURCE_ARROW, EDGE_TYPE_TARGET_ARROW ],
            overlays: [{
              type: p26.type,
              options: {
                location: 1,
                width: arrowWidth,
                length: arrowLength
              }
            }, {
              type: p26.type,
              options: {
                location: 0,
                direction: -1,
                width: arrowWidth,
                length: arrowLength
              }
            }]
          },
          [EDGE_TYPE_PLAIN]: {},
          [EDGE_TYPE_DASHED]: {
            cssClass: CLASS_DASHED_EDGE
          }
        }
      }
    ];
  }

  // flowchart-inspector.ts
  var TMPL_NODE_INSPECTOR = "tmplNodeInspector";
  var TMPL_EDGE_INSPECTOR = "tmplEdgeInspector";
  var inspectorTemplates = {
    [TMPL_NODE_INSPECTOR]: `
            <div class="jtk-inspector jtk-node-inspector">
                <div class="jtk-inspector-section">
                    <div>Text</div>
                    <input type="text" jtk-att="${PROPERTY_TEXT}" jtk-focus/>
                </div>
                
                <div class="jtk-inspector-section">
                    <div>Fill</div>
                    <input type="color" jtk-att="${PROPERTY_FILL}"/>
                </div>
                
                <div class="jtk-inspector-section">
                    <div>Color</div>
                    <input type="color" jtk-att="${PROPERTY_TEXT_COLOR}"/>
                </div>
                
                <div class="jtk-inspector-section">
                    <div>Outline</div>
                    <input type="color" jtk-att="${PROPERTY_OUTLINE}"/>
                </div>
                
            </div>`,
    [TMPL_EDGE_INSPECTOR]: `
            <div class="jtk-inspector jtk-edge-inspector">
                <div>Label</div>
                <input type="text" jtk-att="${PROPERTY_LABEL}"/>
                <div>Line style</div>
                <jtk-line-style value="{{lineStyle}}" jtk-att="${PROPERTY_LINE_STYLE}"></jtk-line-style>
                <div>Color</div>
                <input type="color" jtk-att="${PROPERTY_COLOR}"/>
            </div>`
  };
  var FlowchartBuilderInspector = class extends h32 {
    constructor(options) {
      super(Object.assign(options, {
        templateResolver: (obj) => {
          if (f14(obj)) {
            return inspectorTemplates[TMPL_NODE_INSPECTOR];
          } else if (m13(obj)) {
            return inspectorTemplates[TMPL_EDGE_INSPECTOR];
          }
        }
      }));
      this.registerTag("jtk-line-style", r46(options.toolkit, PROPERTY_LINE_STYLE, edgeMappings(), (v41) => {
        this.setValue(PROPERTY_LINE_STYLE, v41);
      }));
    }
  };

  // demo.js
  r38();
  var anchorPositions = [
    { x: 0, y: 0.5, ox: -1, oy: 0, id: "left" },
    { x: 1, y: 0.5, ox: 1, oy: 0, id: "right" },
    { x: 0.5, y: 0, ox: 0, oy: -1, id: "top" },
    { x: 0.5, y: 1, ox: 0, oy: 1, id: "bottom" }
  ];
  i43(() => {
    const shapeLibrary = new T14([t59, t60]);
    let renderer;
    const mainElement = document.querySelector("#jtk-demo-flowchart"), canvasElement = mainElement.querySelector(".jtk-demo-canvas"), miniviewElement = mainElement.querySelector(".miniview"), nodePaletteElement = mainElement.querySelector(".node-palette"), controlsElement = mainElement.querySelector(".jtk-controls-container"), inspectorElement = mainElement.querySelector(".inspector");
    const toolkit = o41({
      // set the Toolkit's selection mode to 'isolated', meaning it can select a set of edges, or a set of nodes, but it
      // cannot select a set of nodes and edges. In this demonstration we use an inspector that responds to events from the
      // toolkit's selection, so setting this to `isolated` helps us ensure we dont try to inspect edges and nodes at the same
      // time.
      selectionMode: F9.isolated,
      // This is the payload to set when a user begins to drag an edge - we return values for the
      // edge's label, color and line style. If you wanted to implement a mechanism whereby you have
      // some "current style" you could update this method to return some dynamically configured
      // values.
      beforeStartConnect: (node, edgeType) => {
        return {
          [PROPERTY_LABEL]: "",
          [PROPERTY_COLOR]: DEFAULT_STROKE,
          [PROPERTY_LINE_STYLE]: EDGE_TYPE_TARGET_ARROW
        };
      }
    });
    renderer = toolkit.render(canvasElement, {
      //
      // used in the vanilla demo to extract the text color from each object and set it on its DOM element in the template
      //
      templateMacros: {
        textColor: (data) => {
          return data[PROPERTY_TEXT_COLOR] || DEFAULT_TEXT_COLOR;
        }
      },
      shapes: {
        library: shapeLibrary,
        showLabels: true,
        labelAttribute: "text"
      },
      view: {
        nodes: {
          [r7]: {
            // We have a single node type, which renders a div and uses the `jtk-shape` tag to inject appropriate SVG into
            // the DOM element.  The `jtk-shape` tag is made available because we attach a `ShapeLibraryPalette` further down
            // in the code here (see https://docs.jsplumbtoolkit.com/toolkit/6.x/shape-libraries).
            // In this template we render a div for each value in the `anchorPositions` array, and these elements
            // act as connection drag sources. We use CSS to position them, but we also write out various
            // `data-jtk-anchor-...` properties to control their anchor positions.
            template: `<div class="flowchart-default-node" data-isotherscript="{{#otherScript}}" data-isactive="{{is_active}}" data-jtk-target="true" data-isgoal="{{is_goal}}" style="border: 1px solid black">
															<r-if test="title">
																<div class="flowchart-node-text">{{title}} </div>
															</r-if>
															<r-if test="#hasTitleFromText">
																<div class=" flowchart-node-text flowchart-node-text--html">
																	<r-each in="titleFromText">
																		<p>
																			<r-each in="$value">
																					<r-if test="tagName === 'text'">
																						{{text}}
																					</r-if>
																					<r-if test="tagName === 'hs'">
																						<span class="{{class}}">{{text}}</span>
																					</r-if>
																					<r-if test="tagName === 'a'">
																						<span class="flowchart-node-link">{{text}}</span>
																					</r-if>
																					<r-if test="tagName === 'img'">
																						<span class="flowchart-node-image-icon">{{text}}</span>
																					</r-if>
																					<r-if test="tagName === 'strong'">
																						<strong class="{{class}}">{{text}}</strong>
																					</r-if>
																					<r-if test="tagName === 'i'">
																						<i class="{{class}}">{{text}}</i>
																					</r-if>
																					<r-if test="tagName === 'em'">
																						<em class="{{class}}">{{text}}</em>
																					</r-if>
																					<r-if test="tagName === 'span'">
																						<span class="{{class}}">{{text}}</span>
																					</r-if>
																			</r-each>
																		</p>
																	</r-each>
																</div>
															</r-if>
															<div class="flowchart-node-footer">
																<div class="flowchart-add-delete-buttons">
																	<div class="flowchart-button-add"></div>
																	<r-if test="#notStartNode">
																		<div class="flowchart-button-delete">
																			<span class="flowchart-text-delete">
																				Delete
																			</span>
																		</div>
																	</r-if>
																</div>
																<r-if test="issues.length">
																	<div class="flowchart-badge-no-appropriate-answer" title="">
																		<div>{{issues.length}}</div>
																	</div>
																</r-if>
																<r-if test="text.length == 0">
																	<div class="flowchart-badge-no-step-text" title="no step text"></div>
																</r-if>
																<r-if test="tasks.length">
																	<div class="flowchart-icon-tasks" title=""></div>
																</r-if>
																<r-if test="#isStarred">
																	<div class="flowchart-icon-hidden-quick-link" title="starred"></div>
																</r-if>
															</div>
															<div class="flowchart-node-link-start" data-jtk-source="true" title="drag to add a connection"></div>
														</div>`,
            // target connections to this node can exist at any of the given anchorPositions
            anchorPositions,
            // node can support any number of connections.
            maxConnections: -1,
            events: {
              [l9]: (params) => {
                renderer.stopEditingPath();
                if (toolkit.getSelection()._nodes.length < 1 || params.e.shiftKey !== true) {
                  toolkit.setSelection(params.obj);
                } else {
                  toolkit.addToSelection(params.obj);
                }
              }
            }
          }
        },
        edges: {
          [r7]: {
            overlays: [
              {
                type: p26.type,
                options: {
                  width: 10,
                  length: 10,
                  location: 1
                }
              }
            ],
            // Our edge uses a Blank endpoint and an Orthogonal connector.
            connector: {
              type: "StateMachine",
              options: {
                margin: 5,
                curviness: 10,
                proximityLimit: 80
              }
            },
            endpoint: {
              type: u23.type,
              options: {
                radius: 2,
                cssClass: "flowchart-endpoint"
              }
            },
            // we set a css class on the edge and also on its label
            cssClass: CLASS_FLOWCHART_EDGE,
            labelClass: CLASS_EDGE_LABEL,
            // This says 'extract `label` from the edge data and use it as the edge's label'.
            label: "{{label}}",
            // a large outlineWidth helps with selection via the mouse.
            outlineWidth: 10,
            events: {
              click: (p49) => {
                toolkit.setSelection(p49.edge);
                renderer.startEditingPath(p49.edge, {
                  deleteButton: true
                });
              }
            }
          },
          answer: {
            parent: r7,
            overlays: [
              {
                type: "Custom",
                options: {
                  create: (component) => {
                    if (component.data.condition) {
                      const label2 = document.createElement("div");
                      label2.classList.add("flowchart-condition-overlay");
                      label2.dataset.status = component.data.status;
                      label2.dataset.isactive = component.data.is_active;
                      label2.innerText = component.data.condition;
                      if (component.data.deletable) {
                        const button = document.createElement("div");
                        button.classList.add("flowchart-button-delete");
                        const deleteText = document.createElement("span");
                        deleteText.classList.add("flowchart-text-delete");
                        deleteText.innerText = "delete";
                        button.appendChild(deleteText);
                        label2.appendChild(button);
                      }
                      return label2;
                    }
                    const label = document.createElement("span");
                    label.style.display = "none";
                    return label;
                  },
                  location: 0.5,
                  id: "conditionOverlay"
                }
              }
            ]
          }
        }
      },
      // We declare a set of edge mappings here: a mapping from some property's value to a set of
      // config for the edge such as overlays, css class.
      // see https://docs.jsplumbtoolkit.com/toolkit/6.x/property-mappings and `edge-mappings.js` for details.
      propertyMappings: {
        edgeMappings: edgeMappings()
      },
      // enable path editing
      editablePaths: true,
      // Layout the nodes using an absolute layout
      layout: {
        type: s32.type
      },
      // Snap everything to a grid. This will be used for element dragging as well as resizing and also
      // by the palette that allows users to drag new nodes on to the canvas.
      grid: {
        size: GRID_SIZE
      },
      events: {
        // on whitespace click, clear selected node/edge and stop editing any edges.
        [r27]: (e78) => {
          toolkit.clearSelection();
          renderer.stopEditingPath();
        }
      },
      useModelForSizes: true,
      // this is mostly for dev: by default the surface will consume right clicks.
      consumeRightClick: false,
      // a selector identifying which parts of each node should not cause the element to be dragged.
      // typically here you'd list such things as buttons etc.
      dragOptions: {
        filter: ".jtk-draw-handle, .node-action, .node-action i"
      },
      plugins: [
        // add a miniview plugin.
        {
          type: ue2.type,
          options: {
            container: miniviewElement
          }
        },
        // this plugin allows the user to resize elements.
        {
          type: P15.type,
          options: {
            widthAttribute: "width",
            heightAttribute: "height"
          }
        },
        // select multiple elements with a lasso
        {
          type: u49.type,
          options: {
            lassoInvert: true,
            lassoEdges: true
          }
        },
        // use a grid background.
        {
          type: n90.type,
          options: GRID_BACKGROUND_OPTIONS
        },
        _14.type
      ],
      modelEvents: [
        // catch the TAP event on the delete buttons inside nodes and remove the node from the model.
        {
          event: l9,
          selector: ".node-delete",
          callback: (event2, eventTarget, info) => {
            toolkit.removeNode(info.obj);
          }
        }
      ]
    });
    new FlowchartBuilderInspector({
      toolkit,
      container: inspectorElement,
      surface: renderer
    });
    toolkit.load({
      url: `./copyright.json?q=${$()}`,
      onload: () => {
      }
    });
    document.querySelector("#exportSvg").addEventListener("click", () => {
      const x27 = new Q8(renderer, shapeLibrary);
      x27.export({ margins: { x: 50, y: 50 } });
    });
    document.querySelector("#exportPng").addEventListener("click", () => {
      const x27 = new tt2(renderer, shapeLibrary);
      x27.export({ margins: { x: 50, y: 50 }, dimensions: [
        { width: 3e3 },
        { width: 1200 },
        { width: 800 }
      ] });
    });
    document.querySelector("#exportJpg").addEventListener("click", () => {
      const x27 = new tt2(renderer, shapeLibrary);
      x27.export({ margins: { x: 50, y: 50 }, type: "image/jpeg", width: 3e3 });
    });
  });
})();
